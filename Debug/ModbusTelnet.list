
ModbusTelnet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f18  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005230  08005230  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08005230  08005230  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005230  08005230  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005230  08005230  00015230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005234  08005234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08005238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015cc  200000a8  080052e0  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001674  080052e0  00021674  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a9b7  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000281f  00000000  00000000  0002aacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  0002d2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000872  00000000  00000000  0002de28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b7c  00000000  00000000  0002e69a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dbaa  00000000  00000000  00047216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b109  00000000  00000000  00054dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002de8  00000000  00000000  000dfecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e2cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a8 	.word	0x200000a8
 800012c:	00000000 	.word	0x00000000
 8000130:	08005010 	.word	0x08005010

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000ac 	.word	0x200000ac
 800014c:	08005010 	.word	0x08005010

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	200000c4 	.word	0x200000c4
 800018c:	20000164 	.word	0x20000164

08000190 <TaskFunction>:
		.dhcp = NETINFO_STATIC
};
netmode_type gNetMode = {
		NM_FORCEARP | NM_WAKEONLAN | NM_PPPOE | 128
};
void TaskFunction(void *pvParameters) {
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
    for (;;) {
        // Task code here
    	startTelnet();
 8000198:	f000 face 	bl	8000738 <startTelnet>
        vTaskDelay(pdMS_TO_TICKS(10));  // Delay for 1000 milliseconds
 800019c:	200a      	movs	r0, #10
 800019e:	f003 ff0b 	bl	8003fb8 <vTaskDelay>
    	startTelnet();
 80001a2:	e7f9      	b.n	8000198 <TaskFunction+0x8>

080001a4 <Task2Function>:
    }
}
void Task2Function(void *pvParameters) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
    for (;;) {
        // Task 2 code here
    	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)==0){
 80001ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001b0:	480f      	ldr	r0, [pc, #60]	; (80001f0 <Task2Function+0x4c>)
 80001b2:	f002 fadd 	bl	8002770 <HAL_GPIO_ReadPin>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d10e      	bne.n	80001da <Task2Function+0x36>
    		  //set network address and network mode to default
    		  ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO2);
 80001bc:	490d      	ldr	r1, [pc, #52]	; (80001f4 <Task2Function+0x50>)
 80001be:	2000      	movs	r0, #0
 80001c0:	f001 f932 	bl	8001428 <ctlnetwork>
    		  ctlnetwork(CN_SET_NETMODE, (void*) &gNetMode);
 80001c4:	490c      	ldr	r1, [pc, #48]	; (80001f8 <Task2Function+0x54>)
 80001c6:	2002      	movs	r0, #2
 80001c8:	f001 f92e 	bl	8001428 <ctlnetwork>
    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80001cc:	2201      	movs	r2, #1
 80001ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d2:	4807      	ldr	r0, [pc, #28]	; (80001f0 <Task2Function+0x4c>)
 80001d4:	f002 fae3 	bl	800279e <HAL_GPIO_WritePin>
 80001d8:	e005      	b.n	80001e6 <Task2Function+0x42>
    	}else{
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 80001da:	2200      	movs	r2, #0
 80001dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <Task2Function+0x4c>)
 80001e2:	f002 fadc 	bl	800279e <HAL_GPIO_WritePin>
    	}
    	vTaskDelay(pdMS_TO_TICKS(3000));  // Delay for 1000 milliseconds
 80001e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80001ea:	f003 fee5 	bl	8003fb8 <vTaskDelay>
    	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)==0){
 80001ee:	e7dd      	b.n	80001ac <Task2Function+0x8>
 80001f0:	40010c00 	.word	0x40010c00
 80001f4:	20000000 	.word	0x20000000
 80001f8:	20000017 	.word	0x20000017

080001fc <main>:
    }
}
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af02      	add	r7, sp, #8

  HAL_Init();
 8000202:	f001 ffc7 	bl	8002194 <HAL_Init>

  SystemClock_Config();
 8000206:	f000 f825 	bl	8000254 <SystemClock_Config>

  MX_GPIO_Init();
 800020a:	f000 f89f 	bl	800034c <MX_GPIO_Init>
  MX_SPI1_Init();
 800020e:	f000 f867 	bl	80002e0 <MX_SPI1_Init>

  /* Start scheduler */
  W5500Init();
 8000212:	f000 ff07 	bl	8001024 <W5500Init>

  //put the task in queue
  xTaskCreate(TaskFunction, "Task1", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 8000216:	2300      	movs	r3, #0
 8000218:	9301      	str	r3, [sp, #4]
 800021a:	2301      	movs	r3, #1
 800021c:	9300      	str	r3, [sp, #0]
 800021e:	2300      	movs	r3, #0
 8000220:	2280      	movs	r2, #128	; 0x80
 8000222:	4908      	ldr	r1, [pc, #32]	; (8000244 <main+0x48>)
 8000224:	4808      	ldr	r0, [pc, #32]	; (8000248 <main+0x4c>)
 8000226:	f003 fd82 	bl	8003d2e <xTaskCreate>
  xTaskCreate(Task2Function, "Task2", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
 800022a:	2300      	movs	r3, #0
 800022c:	9301      	str	r3, [sp, #4]
 800022e:	2302      	movs	r3, #2
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	2300      	movs	r3, #0
 8000234:	2280      	movs	r2, #128	; 0x80
 8000236:	4905      	ldr	r1, [pc, #20]	; (800024c <main+0x50>)
 8000238:	4805      	ldr	r0, [pc, #20]	; (8000250 <main+0x54>)
 800023a:	f003 fd78 	bl	8003d2e <xTaskCreate>

  vTaskStartScheduler();
 800023e:	f003 feef 	bl	8004020 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000242:	e7fe      	b.n	8000242 <main+0x46>
 8000244:	08005028 	.word	0x08005028
 8000248:	08000191 	.word	0x08000191
 800024c:	08005030 	.word	0x08005030
 8000250:	080001a5 	.word	0x080001a5

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b090      	sub	sp, #64	; 0x40
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0318 	add.w	r3, r7, #24
 800025e:	2228      	movs	r2, #40	; 0x28
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f004 fdfc 	bl	8004e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
 8000274:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000276:	2301      	movs	r3, #1
 8000278:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800027a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000284:	2301      	movs	r3, #1
 8000286:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000288:	2302      	movs	r3, #2
 800028a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800028c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000290:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000292:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000296:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	f107 0318 	add.w	r3, r7, #24
 800029c:	4618      	mov	r0, r3
 800029e:	f002 faaf 	bl	8002800 <HAL_RCC_OscConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002a8:	f000 f8e0 	bl	800046c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ac:	230f      	movs	r3, #15
 80002ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b0:	2302      	movs	r3, #2
 80002b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2100      	movs	r1, #0
 80002c4:	4618      	mov	r0, r3
 80002c6:	f002 fd1d 	bl	8002d04 <HAL_RCC_ClockConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002d0:	f000 f8cc 	bl	800046c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80002d4:	f002 fe00 	bl	8002ed8 <HAL_RCC_EnableCSS>
}
 80002d8:	bf00      	nop
 80002da:	3740      	adds	r7, #64	; 0x40
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002e4:	4b17      	ldr	r3, [pc, #92]	; (8000344 <MX_SPI1_Init+0x64>)
 80002e6:	4a18      	ldr	r2, [pc, #96]	; (8000348 <MX_SPI1_Init+0x68>)
 80002e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002ea:	4b16      	ldr	r3, [pc, #88]	; (8000344 <MX_SPI1_Init+0x64>)
 80002ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002f2:	4b14      	ldr	r3, [pc, #80]	; (8000344 <MX_SPI1_Init+0x64>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002f8:	4b12      	ldr	r3, [pc, #72]	; (8000344 <MX_SPI1_Init+0x64>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_SPI1_Init+0x64>)
 8000300:	2202      	movs	r2, #2
 8000302:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <MX_SPI1_Init+0x64>)
 8000306:	2201      	movs	r2, #1
 8000308:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <MX_SPI1_Init+0x64>)
 800030c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000310:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_SPI1_Init+0x64>)
 8000314:	2220      	movs	r2, #32
 8000316:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000318:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <MX_SPI1_Init+0x64>)
 800031a:	2200      	movs	r2, #0
 800031c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_SPI1_Init+0x64>)
 8000320:	2200      	movs	r2, #0
 8000322:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000324:	4b07      	ldr	r3, [pc, #28]	; (8000344 <MX_SPI1_Init+0x64>)
 8000326:	2200      	movs	r2, #0
 8000328:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_SPI1_Init+0x64>)
 800032c:	220a      	movs	r2, #10
 800032e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <MX_SPI1_Init+0x64>)
 8000332:	f002 fe69 	bl	8003008 <HAL_SPI_Init>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800033c:	f000 f896 	bl	800046c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	20000364 	.word	0x20000364
 8000348:	40013000 	.word	0x40013000

0800034c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000360:	4b3e      	ldr	r3, [pc, #248]	; (800045c <MX_GPIO_Init+0x110>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a3d      	ldr	r2, [pc, #244]	; (800045c <MX_GPIO_Init+0x110>)
 8000366:	f043 0310 	orr.w	r3, r3, #16
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b3b      	ldr	r3, [pc, #236]	; (800045c <MX_GPIO_Init+0x110>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0310 	and.w	r3, r3, #16
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000378:	4b38      	ldr	r3, [pc, #224]	; (800045c <MX_GPIO_Init+0x110>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a37      	ldr	r2, [pc, #220]	; (800045c <MX_GPIO_Init+0x110>)
 800037e:	f043 0320 	orr.w	r3, r3, #32
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b35      	ldr	r3, [pc, #212]	; (800045c <MX_GPIO_Init+0x110>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0320 	and.w	r3, r3, #32
 800038c:	60bb      	str	r3, [r7, #8]
 800038e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000390:	4b32      	ldr	r3, [pc, #200]	; (800045c <MX_GPIO_Init+0x110>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a31      	ldr	r2, [pc, #196]	; (800045c <MX_GPIO_Init+0x110>)
 8000396:	f043 0304 	orr.w	r3, r3, #4
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b2f      	ldr	r3, [pc, #188]	; (800045c <MX_GPIO_Init+0x110>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0304 	and.w	r3, r3, #4
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a8:	4b2c      	ldr	r3, [pc, #176]	; (800045c <MX_GPIO_Init+0x110>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a2b      	ldr	r2, [pc, #172]	; (800045c <MX_GPIO_Init+0x110>)
 80003ae:	f043 0308 	orr.w	r3, r3, #8
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b29      	ldr	r3, [pc, #164]	; (800045c <MX_GPIO_Init+0x110>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0308 	and.w	r3, r3, #8
 80003bc:	603b      	str	r3, [r7, #0]
 80003be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c6:	4826      	ldr	r0, [pc, #152]	; (8000460 <MX_GPIO_Init+0x114>)
 80003c8:	f002 f9e9 	bl	800279e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2103      	movs	r1, #3
 80003d0:	4824      	ldr	r0, [pc, #144]	; (8000464 <MX_GPIO_Init+0x118>)
 80003d2:	f002 f9e4 	bl	800279e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003dc:	4822      	ldr	r0, [pc, #136]	; (8000468 <MX_GPIO_Init+0x11c>)
 80003de:	f002 f9de 	bl	800279e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e8:	2301      	movs	r3, #1
 80003ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f0:	2302      	movs	r3, #2
 80003f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003f4:	f107 0310 	add.w	r3, r7, #16
 80003f8:	4619      	mov	r1, r3
 80003fa:	4819      	ldr	r0, [pc, #100]	; (8000460 <MX_GPIO_Init+0x114>)
 80003fc:	f002 f834 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000400:	2303      	movs	r3, #3
 8000402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000404:	2301      	movs	r3, #1
 8000406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040c:	2302      	movs	r3, #2
 800040e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	4619      	mov	r1, r3
 8000416:	4813      	ldr	r0, [pc, #76]	; (8000464 <MX_GPIO_Init+0x118>)
 8000418:	f002 f826 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800041c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000420:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000422:	2301      	movs	r3, #1
 8000424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042a:	2302      	movs	r3, #2
 800042c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042e:	f107 0310 	add.w	r3, r7, #16
 8000432:	4619      	mov	r1, r3
 8000434:	480c      	ldr	r0, [pc, #48]	; (8000468 <MX_GPIO_Init+0x11c>)
 8000436:	f002 f817 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800043a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800043e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	4806      	ldr	r0, [pc, #24]	; (8000468 <MX_GPIO_Init+0x11c>)
 8000450:	f002 f80a 	bl	8002468 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000454:	bf00      	nop
 8000456:	3720      	adds	r7, #32
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40021000 	.word	0x40021000
 8000460:	40011000 	.word	0x40011000
 8000464:	40010800 	.word	0x40010800
 8000468:	40010c00 	.word	0x40010c00

0800046c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000470:	b672      	cpsid	i
}
 8000472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000474:	e7fe      	b.n	8000474 <Error_Handler+0x8>
	...

08000478 <HAL_MspInit>:
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <HAL_MspInit+0x68>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	4a17      	ldr	r2, [pc, #92]	; (80004e0 <HAL_MspInit+0x68>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6193      	str	r3, [r2, #24]
 800048a:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <HAL_MspInit+0x68>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	60bb      	str	r3, [r7, #8]
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <HAL_MspInit+0x68>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	4a11      	ldr	r2, [pc, #68]	; (80004e0 <HAL_MspInit+0x68>)
 800049c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a0:	61d3      	str	r3, [r2, #28]
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <HAL_MspInit+0x68>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2200      	movs	r2, #0
 80004b0:	210f      	movs	r1, #15
 80004b2:	f06f 0001 	mvn.w	r0, #1
 80004b6:	f001 ffae 	bl	8002416 <HAL_NVIC_SetPriority>
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <HAL_MspInit+0x6c>)
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <HAL_MspInit+0x6c>)
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	6053      	str	r3, [r2, #4]
 80004d6:	bf00      	nop
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40010000 	.word	0x40010000

080004e8 <HAL_SPI_MspInit>:
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a1b      	ldr	r2, [pc, #108]	; (8000570 <HAL_SPI_MspInit+0x88>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d12f      	bne.n	8000568 <HAL_SPI_MspInit+0x80>
 8000508:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <HAL_SPI_MspInit+0x8c>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a19      	ldr	r2, [pc, #100]	; (8000574 <HAL_SPI_MspInit+0x8c>)
 800050e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b17      	ldr	r3, [pc, #92]	; (8000574 <HAL_SPI_MspInit+0x8c>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <HAL_SPI_MspInit+0x8c>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a13      	ldr	r2, [pc, #76]	; (8000574 <HAL_SPI_MspInit+0x8c>)
 8000526:	f043 0304 	orr.w	r3, r3, #4
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <HAL_SPI_MspInit+0x8c>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0304 	and.w	r3, r3, #4
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	23a0      	movs	r3, #160	; 0xa0
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	2302      	movs	r3, #2
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	2303      	movs	r3, #3
 8000542:	61fb      	str	r3, [r7, #28]
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	4619      	mov	r1, r3
 800054a:	480b      	ldr	r0, [pc, #44]	; (8000578 <HAL_SPI_MspInit+0x90>)
 800054c:	f001 ff8c 	bl	8002468 <HAL_GPIO_Init>
 8000550:	2340      	movs	r3, #64	; 0x40
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	4619      	mov	r1, r3
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <HAL_SPI_MspInit+0x90>)
 8000564:	f001 ff80 	bl	8002468 <HAL_GPIO_Init>
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40013000 	.word	0x40013000
 8000574:	40021000 	.word	0x40021000
 8000578:	40010800 	.word	0x40010800

0800057c <NMI_Handler>:
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
 8000580:	f002 fd0a 	bl	8002f98 <HAL_RCC_NMI_IRQHandler>
 8000584:	e7fe      	b.n	8000584 <NMI_Handler+0x8>

08000586 <HardFault_Handler>:
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
 800058a:	e7fe      	b.n	800058a <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
 8000590:	e7fe      	b.n	8000590 <MemManage_Handler+0x4>

08000592 <BusFault_Handler>:
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
 8000596:	e7fe      	b.n	8000596 <BusFault_Handler+0x4>

08000598 <UsageFault_Handler>:
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
 800059c:	e7fe      	b.n	800059c <UsageFault_Handler+0x4>

0800059e <DebugMon_Handler>:
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <SysTick_Handler>:
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	f001 fe37 	bl	8002220 <HAL_IncTick>
 80005b2:	f004 f847 	bl	8004644 <xTaskGetSchedulerState>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d001      	beq.n	80005c0 <SysTick_Handler+0x16>
 80005bc:	f004 fa34 	bl	8004a28 <xPortSysTickHandler>
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <SystemInit>:
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <writeMessage>:

uint8_t buffer[MAX_BUFFER_SIZE];  // Assuming buffer is declared globally or passed as an argument
uint8_t telnetSocket = 0;
uint16_t telnetPort = 23;

void writeMessage(const char* message) {
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    send(telnetSocket, (void*)message, strlen(message));
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <writeMessage+0x28>)
 80005da:	781c      	ldrb	r4, [r3, #0]
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f7ff fdb7 	bl	8000150 <strlen>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	461a      	mov	r2, r3
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	4620      	mov	r0, r4
 80005ec:	f000 faf6 	bl	8000bdc <send>
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd90      	pop	{r4, r7, pc}
 80005f8:	200007bc 	.word	0x200007bc

080005fc <readMessage>:

uint8_t* readMessage() {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0

    int receivedSize = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
    int indexChar = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
    uint8_t receivedChar;

    while (1) {
		receivedSize = recv(telnetSocket, &receivedChar, 1);
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <readMessage+0x70>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	1df9      	adds	r1, r7, #7
 8000610:	2201      	movs	r2, #1
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fbdc 	bl	8000dd0 <recv>
 8000618:	60b8      	str	r0, [r7, #8]

		// Check for errors or connection closure
		if (receivedSize <= 0) {
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	2b00      	cmp	r3, #0
 800061e:	dd17      	ble.n	8000650 <readMessage+0x54>
			// Handle error or connection closure
			break;
		}
		// Check if the received character is a newline
		if (receivedChar == '\n') {
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	2b0a      	cmp	r3, #10
 8000624:	d105      	bne.n	8000632 <readMessage+0x36>
			// If yes, terminate the string and break out of the loop
			buffer[indexChar] = '\0';
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <readMessage+0x74>)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	4413      	add	r3, r2
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
			break;
 8000630:	e011      	b.n	8000656 <readMessage+0x5a>
		}
		// Otherwise, add the character to the buffer
		buffer[indexChar] = receivedChar;
 8000632:	79f9      	ldrb	r1, [r7, #7]
 8000634:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <readMessage+0x74>)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	4413      	add	r3, r2
 800063a:	460a      	mov	r2, r1
 800063c:	701a      	strb	r2, [r3, #0]
		// Increment the receivedSize counter
		indexChar++;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3301      	adds	r3, #1
 8000642:	60fb      	str	r3, [r7, #12]
		// Check if the buffer is full (adjust the size accordingly)
		if (indexChar >= MAX_BUFFER_SIZE - 1) {
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800064a:	4293      	cmp	r3, r2
 800064c:	dc02      	bgt.n	8000654 <readMessage+0x58>
		receivedSize = recv(telnetSocket, &receivedChar, 1);
 800064e:	e7dc      	b.n	800060a <readMessage+0xe>
			break;
 8000650:	bf00      	nop
 8000652:	e000      	b.n	8000656 <readMessage+0x5a>
			// Handle buffer full condition
			break;
 8000654:	bf00      	nop
		}
    }
    // Add null terminator to make it a valid C string
    buffer[indexChar] = '\0';
 8000656:	4a06      	ldr	r2, [pc, #24]	; (8000670 <readMessage+0x74>)
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4413      	add	r3, r2
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
    // Return the buffer (or you might return something else based on your needs)
    return buffer;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <readMessage+0x74>)
}
 8000662:	4618      	mov	r0, r3
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200007bc 	.word	0x200007bc
 8000670:	200003bc 	.word	0x200003bc

08000674 <clearScreen>:
void clearScreen(){
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	writeMessage("\033[2J");
 8000678:	4802      	ldr	r0, [pc, #8]	; (8000684 <clearScreen+0x10>)
 800067a:	f7ff ffa9 	bl	80005d0 <writeMessage>
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	08005038 	.word	0x08005038

08000688 <invalidInput>:
void invalidInput(){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	clearScreen();
 800068c:	f7ff fff2 	bl	8000674 <clearScreen>
	writeMessage("\033[31mInvalid Input\r\n\033[37m");
 8000690:	4802      	ldr	r0, [pc, #8]	; (800069c <invalidInput+0x14>)
 8000692:	f7ff ff9d 	bl	80005d0 <writeMessage>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	08005040 	.word	0x08005040

080006a0 <toggleLeds>:

void toggleLeds(uint8_t* clientMessage) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
    if (clientMessage[0] == 'l'&&clientMessage[1]=='1') {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b6c      	cmp	r3, #108	; 0x6c
 80006ae:	d10a      	bne.n	80006c6 <toggleLeds+0x26>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3301      	adds	r3, #1
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b31      	cmp	r3, #49	; 0x31
 80006b8:	d105      	bne.n	80006c6 <toggleLeds+0x26>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80006ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006be:	480b      	ldr	r0, [pc, #44]	; (80006ec <toggleLeds+0x4c>)
 80006c0:	f002 f885 	bl	80027ce <HAL_GPIO_TogglePin>
    } else if (clientMessage[0] == 'l'&&clientMessage[1]=='2') {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
    }
}
 80006c4:	e00d      	b.n	80006e2 <toggleLeds+0x42>
    } else if (clientMessage[0] == 'l'&&clientMessage[1]=='2') {
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b6c      	cmp	r3, #108	; 0x6c
 80006cc:	d109      	bne.n	80006e2 <toggleLeds+0x42>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3301      	adds	r3, #1
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b32      	cmp	r3, #50	; 0x32
 80006d6:	d104      	bne.n	80006e2 <toggleLeds+0x42>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 80006d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <toggleLeds+0x50>)
 80006de:	f002 f876 	bl	80027ce <HAL_GPIO_TogglePin>
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40011000 	.word	0x40011000
 80006f0:	40010c00 	.word	0x40010c00

080006f4 <mainMenu>:
void mainMenu(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	writeMessage("Select your inputs\r\n 1. Change Device Network Configuration\r\n 2. ");
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <mainMenu+0x3c>)
 80006fa:	f7ff ff69 	bl	80005d0 <writeMessage>
	switch ((char)readMessage()[0]){
 80006fe:	f7ff ff7d 	bl	80005fc <readMessage>
 8000702:	4603      	mov	r3, r0
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b31      	cmp	r3, #49	; 0x31
 8000708:	d10b      	bne.n	8000722 <mainMenu+0x2e>
	case '1' :
		clearScreen();
 800070a:	f7ff ffb3 	bl	8000674 <clearScreen>
		writeMessage(" 1. Change IP address\r\n 2. Change Netmask\r\n 3.Change Gateway\r\n");
 800070e:	4809      	ldr	r0, [pc, #36]	; (8000734 <mainMenu+0x40>)
 8000710:	f7ff ff5e 	bl	80005d0 <writeMessage>
		toggleLeds(readMessage());
 8000714:	f7ff ff72 	bl	80005fc <readMessage>
 8000718:	4603      	mov	r3, r0
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ffc0 	bl	80006a0 <toggleLeds>
	break;
 8000720:	e004      	b.n	800072c <mainMenu+0x38>
	default :
		invalidInput();
 8000722:	f7ff ffb1 	bl	8000688 <invalidInput>
		mainMenu();
 8000726:	f7ff ffe5 	bl	80006f4 <mainMenu>
	}
}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	0800505c 	.word	0x0800505c
 8000734:	080050a0 	.word	0x080050a0

08000738 <startTelnet>:

void startTelnet() {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    // Initialize the socket outside the loop
    socket(telnetSocket, Sn_MR_TCP, 23, 0);
 800073c:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <startTelnet+0xc4>)
 800073e:	7818      	ldrb	r0, [r3, #0]
 8000740:	2300      	movs	r3, #0
 8000742:	2217      	movs	r2, #23
 8000744:	2101      	movs	r1, #1
 8000746:	f000 f86d 	bl	8000824 <socket>
    listen(telnetSocket);
 800074a:	4b2c      	ldr	r3, [pc, #176]	; (80007fc <startTelnet+0xc4>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f9ea 	bl	8000b28 <listen>

    while (1) {
        if (getSn_SR(telnetSocket) == SOCK_ESTABLISHED) {
 8000754:	4b29      	ldr	r3, [pc, #164]	; (80007fc <startTelnet+0xc4>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	3301      	adds	r3, #1
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000762:	4618      	mov	r0, r3
 8000764:	f001 fa48 	bl	8001bf8 <WIZCHIP_READ>
 8000768:	4603      	mov	r3, r0
 800076a:	2b17      	cmp	r3, #23
 800076c:	d12c      	bne.n	80007c8 <startTelnet+0x90>
        	writeMessage("\033[36m");
 800076e:	4824      	ldr	r0, [pc, #144]	; (8000800 <startTelnet+0xc8>)
 8000770:	f7ff ff2e 	bl	80005d0 <writeMessage>
        	writeMessage("                    _____      \r\n");
 8000774:	4823      	ldr	r0, [pc, #140]	; (8000804 <startTelnet+0xcc>)
 8000776:	f7ff ff2b 	bl	80005d0 <writeMessage>
        	writeMessage("  _________  ____  / __(_)___ _\r\n");
 800077a:	4823      	ldr	r0, [pc, #140]	; (8000808 <startTelnet+0xd0>)
 800077c:	f7ff ff28 	bl	80005d0 <writeMessage>
        	writeMessage(" / ___/ __ \\/ __ \\/ /_/ / __ `/\r\n");
 8000780:	4822      	ldr	r0, [pc, #136]	; (800080c <startTelnet+0xd4>)
 8000782:	f7ff ff25 	bl	80005d0 <writeMessage>
        	writeMessage("/ /__/ /_/ / / / / __/ / /_/ / \r\n");
 8000786:	4822      	ldr	r0, [pc, #136]	; (8000810 <startTelnet+0xd8>)
 8000788:	f7ff ff22 	bl	80005d0 <writeMessage>
        	writeMessage("\\___/\\____/_/ /_/_/ /_/\\__, /  \r\n");
 800078c:	4821      	ldr	r0, [pc, #132]	; (8000814 <startTelnet+0xdc>)
 800078e:	f7ff ff1f 	bl	80005d0 <writeMessage>
        	writeMessage("                      /____/   \r\n");
 8000792:	4821      	ldr	r0, [pc, #132]	; (8000818 <startTelnet+0xe0>)
 8000794:	f7ff ff1c 	bl	80005d0 <writeMessage>
        	writeMessage("\033[37m");
 8000798:	4820      	ldr	r0, [pc, #128]	; (800081c <startTelnet+0xe4>)
 800079a:	f7ff ff19 	bl	80005d0 <writeMessage>
            writeMessage("\033[32mTelnet Configuration Session\033[37m\r\n");
 800079e:	4820      	ldr	r0, [pc, #128]	; (8000820 <startTelnet+0xe8>)
 80007a0:	f7ff ff16 	bl	80005d0 <writeMessage>
//          toggleLeds(readMessage()); //this is for test input of the LEDs only using command l1 and l2
            mainMenu();
 80007a4:	f7ff ffa6 	bl	80006f4 <mainMenu>
            clearScreen();
 80007a8:	f7ff ff64 	bl	8000674 <clearScreen>
            // Optionally, add a delay to avoid rapid reconnection attempts
            HAL_Delay(300);
            continue;//continue to the next iteration of loop
        }
        // Add a condition to break out of the loop or handle other logic
        if (getSn_SR(telnetSocket) != SOCK_ESTABLISHED) {
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <startTelnet+0xc4>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	3301      	adds	r3, #1
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 fa1c 	bl	8001bf8 <WIZCHIP_READ>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b17      	cmp	r3, #23
 80007c4:	d0c6      	beq.n	8000754 <startTelnet+0x1c>
        	break;
 80007c6:	e016      	b.n	80007f6 <startTelnet+0xbe>
            close(telnetSocket);
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <startTelnet+0xc4>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f93d 	bl	8000a4c <close>
            socket(telnetSocket, Sn_MR_TCP, 23, 0);
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <startTelnet+0xc4>)
 80007d4:	7818      	ldrb	r0, [r3, #0]
 80007d6:	2300      	movs	r3, #0
 80007d8:	2217      	movs	r2, #23
 80007da:	2101      	movs	r1, #1
 80007dc:	f000 f822 	bl	8000824 <socket>
            listen(telnetSocket);
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <startTelnet+0xc4>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f99f 	bl	8000b28 <listen>
            HAL_Delay(300);
 80007ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007ee:	f001 fd33 	bl	8002258 <HAL_Delay>
            continue;//continue to the next iteration of loop
 80007f2:	bf00      	nop
        if (getSn_SR(telnetSocket) == SOCK_ESTABLISHED) {
 80007f4:	e7ae      	b.n	8000754 <startTelnet+0x1c>
        }

    }
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200007bc 	.word	0x200007bc
 8000800:	080050e0 	.word	0x080050e0
 8000804:	080050e8 	.word	0x080050e8
 8000808:	0800510c 	.word	0x0800510c
 800080c:	08005130 	.word	0x08005130
 8000810:	08005154 	.word	0x08005154
 8000814:	08005178 	.word	0x08005178
 8000818:	0800519c 	.word	0x0800519c
 800081c:	080051c0 	.word	0x080051c0
 8000820:	080051c8 	.word	0x080051c8

08000824 <socket>:
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	4604      	mov	r4, r0
 800082c:	4608      	mov	r0, r1
 800082e:	4611      	mov	r1, r2
 8000830:	461a      	mov	r2, r3
 8000832:	4623      	mov	r3, r4
 8000834:	71fb      	strb	r3, [r7, #7]
 8000836:	4603      	mov	r3, r0
 8000838:	71bb      	strb	r3, [r7, #6]
 800083a:	460b      	mov	r3, r1
 800083c:	80bb      	strh	r3, [r7, #4]
 800083e:	4613      	mov	r3, r2
 8000840:	70fb      	strb	r3, [r7, #3]
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2b08      	cmp	r3, #8
 8000846:	d902      	bls.n	800084e <socket+0x2a>
 8000848:	f04f 33ff 	mov.w	r3, #4294967295
 800084c:	e0f0      	b.n	8000a30 <socket+0x20c>
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d005      	beq.n	8000860 <socket+0x3c>
 8000854:	2b00      	cmp	r3, #0
 8000856:	dd11      	ble.n	800087c <socket+0x58>
 8000858:	3b02      	subs	r3, #2
 800085a:	2b02      	cmp	r3, #2
 800085c:	d80e      	bhi.n	800087c <socket+0x58>
 800085e:	e011      	b.n	8000884 <socket+0x60>
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2204      	movs	r2, #4
 8000866:	4619      	mov	r1, r3
 8000868:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800086c:	f001 fa5e 	bl	8001d2c <WIZCHIP_READ_BUF>
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d105      	bne.n	8000882 <socket+0x5e>
 8000876:	f06f 0302 	mvn.w	r3, #2
 800087a:	e0d9      	b.n	8000a30 <socket+0x20c>
 800087c:	f06f 0304 	mvn.w	r3, #4
 8000880:	e0d6      	b.n	8000a30 <socket+0x20c>
 8000882:	bf00      	nop
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	2b00      	cmp	r3, #0
 800088c:	d002      	beq.n	8000894 <socket+0x70>
 800088e:	f06f 0305 	mvn.w	r3, #5
 8000892:	e0cd      	b.n	8000a30 <socket+0x20c>
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d028      	beq.n	80008ec <socket+0xc8>
 800089a:	79bb      	ldrb	r3, [r7, #6]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d002      	beq.n	80008a6 <socket+0x82>
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d008      	beq.n	80008b6 <socket+0x92>
 80008a4:	e022      	b.n	80008ec <socket+0xc8>
 80008a6:	78fb      	ldrb	r3, [r7, #3]
 80008a8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d11a      	bne.n	80008e6 <socket+0xc2>
 80008b0:	f06f 0305 	mvn.w	r3, #5
 80008b4:	e0bc      	b.n	8000a30 <socket+0x20c>
 80008b6:	78fb      	ldrb	r3, [r7, #3]
 80008b8:	f003 0320 	and.w	r3, r3, #32
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d006      	beq.n	80008ce <socket+0xaa>
 80008c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	db02      	blt.n	80008ce <socket+0xaa>
 80008c8:	f06f 0305 	mvn.w	r3, #5
 80008cc:	e0b0      	b.n	8000a30 <socket+0x20c>
 80008ce:	78fb      	ldrb	r3, [r7, #3]
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d008      	beq.n	80008ea <socket+0xc6>
 80008d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	db04      	blt.n	80008ea <socket+0xc6>
 80008e0:	f06f 0305 	mvn.w	r3, #5
 80008e4:	e0a4      	b.n	8000a30 <socket+0x20c>
 80008e6:	bf00      	nop
 80008e8:	e000      	b.n	80008ec <socket+0xc8>
 80008ea:	bf00      	nop
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f8ac 	bl	8000a4c <close>
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	3301      	adds	r3, #1
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	4618      	mov	r0, r3
 80008fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000902:	f023 030f 	bic.w	r3, r3, #15
 8000906:	b25a      	sxtb	r2, r3
 8000908:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800090c:	4313      	orrs	r3, r2
 800090e:	b25b      	sxtb	r3, r3
 8000910:	b2db      	uxtb	r3, r3
 8000912:	4619      	mov	r1, r3
 8000914:	f001 f9bc 	bl	8001c90 <WIZCHIP_WRITE>
 8000918:	88bb      	ldrh	r3, [r7, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d110      	bne.n	8000940 <socket+0x11c>
 800091e:	4b46      	ldr	r3, [pc, #280]	; (8000a38 <socket+0x214>)
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	b291      	uxth	r1, r2
 8000926:	4a44      	ldr	r2, [pc, #272]	; (8000a38 <socket+0x214>)
 8000928:	8011      	strh	r1, [r2, #0]
 800092a:	80bb      	strh	r3, [r7, #4]
 800092c:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <socket+0x214>)
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000934:	4293      	cmp	r3, r2
 8000936:	d103      	bne.n	8000940 <socket+0x11c>
 8000938:	4b3f      	ldr	r3, [pc, #252]	; (8000a38 <socket+0x214>)
 800093a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800093e:	801a      	strh	r2, [r3, #0]
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	3301      	adds	r3, #1
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800094c:	461a      	mov	r2, r3
 800094e:	88bb      	ldrh	r3, [r7, #4]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	b29b      	uxth	r3, r3
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4619      	mov	r1, r3
 8000958:	4610      	mov	r0, r2
 800095a:	f001 f999 	bl	8001c90 <WIZCHIP_WRITE>
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	3301      	adds	r3, #1
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800096a:	461a      	mov	r2, r3
 800096c:	88bb      	ldrh	r3, [r7, #4]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	4619      	mov	r1, r3
 8000972:	4610      	mov	r0, r2
 8000974:	f001 f98c 	bl	8001c90 <WIZCHIP_WRITE>
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	3301      	adds	r3, #1
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000984:	2101      	movs	r1, #1
 8000986:	4618      	mov	r0, r3
 8000988:	f001 f982 	bl	8001c90 <WIZCHIP_WRITE>
 800098c:	bf00      	nop
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	3301      	adds	r3, #1
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800099a:	4618      	mov	r0, r3
 800099c:	f001 f92c 	bl	8001bf8 <WIZCHIP_READ>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1f3      	bne.n	800098e <socket+0x16a>
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2201      	movs	r2, #1
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	b21a      	sxth	r2, r3
 80009b4:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <socket+0x218>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	4013      	ands	r3, r2
 80009bc:	b21b      	sxth	r3, r3
 80009be:	b29a      	uxth	r2, r3
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <socket+0x218>)
 80009c2:	801a      	strh	r2, [r3, #0]
 80009c4:	78fb      	ldrb	r3, [r7, #3]
 80009c6:	f003 0201 	and.w	r2, r3, #1
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	b21a      	sxth	r2, r3
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <socket+0x218>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	b21b      	sxth	r3, r3
 80009d8:	4313      	orrs	r3, r2
 80009da:	b21b      	sxth	r3, r3
 80009dc:	b29a      	uxth	r2, r3
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <socket+0x218>)
 80009e0:	801a      	strh	r2, [r3, #0]
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2201      	movs	r2, #1
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	b21a      	sxth	r2, r3
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <socket+0x21c>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	b21b      	sxth	r3, r3
 80009f6:	4013      	ands	r3, r2
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <socket+0x21c>)
 80009fe:	801a      	strh	r2, [r3, #0]
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <socket+0x220>)
 8000a04:	2100      	movs	r1, #0
 8000a06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <socket+0x224>)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	54d1      	strb	r1, [r2, r3]
 8000a12:	bf00      	nop
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	3301      	adds	r3, #1
 8000a1a:	00db      	lsls	r3, r3, #3
 8000a1c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 f8e9 	bl	8001bf8 <WIZCHIP_READ>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d0f3      	beq.n	8000a14 <socket+0x1f0>
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	4618      	mov	r0, r3
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd90      	pop	{r4, r7, pc}
 8000a38:	2000001c 	.word	0x2000001c
 8000a3c:	200007be 	.word	0x200007be
 8000a40:	200007c0 	.word	0x200007c0
 8000a44:	200007c4 	.word	0x200007c4
 8000a48:	200007d4 	.word	0x200007d4

08000a4c <close>:
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d902      	bls.n	8000a62 <close+0x16>
 8000a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a60:	e055      	b.n	8000b0e <close+0xc2>
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	3301      	adds	r3, #1
 8000a68:	00db      	lsls	r3, r3, #3
 8000a6a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a6e:	2110      	movs	r1, #16
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 f90d 	bl	8001c90 <WIZCHIP_WRITE>
 8000a76:	bf00      	nop
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a84:	4618      	mov	r0, r3
 8000a86:	f001 f8b7 	bl	8001bf8 <WIZCHIP_READ>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1f3      	bne.n	8000a78 <close+0x2c>
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	3301      	adds	r3, #1
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a9c:	211f      	movs	r1, #31
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 f8f6 	bl	8001c90 <WIZCHIP_WRITE>
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	b21a      	sxth	r2, r3
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <close+0xcc>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	b21b      	sxth	r3, r3
 8000ab8:	4013      	ands	r3, r2
 8000aba:	b21b      	sxth	r3, r3
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <close+0xcc>)
 8000ac0:	801a      	strh	r2, [r3, #0]
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	43db      	mvns	r3, r3
 8000ace:	b21a      	sxth	r2, r3
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <close+0xd0>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	b21b      	sxth	r3, r3
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <close+0xd0>)
 8000ade:	801a      	strh	r2, [r3, #0]
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <close+0xd4>)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <close+0xd8>)
 8000aee:	2100      	movs	r1, #0
 8000af0:	54d1      	strb	r1, [r2, r3]
 8000af2:	bf00      	nop
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	3301      	adds	r3, #1
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000b00:	4618      	mov	r0, r3
 8000b02:	f001 f879 	bl	8001bf8 <WIZCHIP_READ>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1f3      	bne.n	8000af4 <close+0xa8>
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200007be 	.word	0x200007be
 8000b1c:	200007c0 	.word	0x200007c0
 8000b20:	200007c4 	.word	0x200007c4
 8000b24:	200007d4 	.word	0x200007d4

08000b28 <listen>:
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	2b08      	cmp	r3, #8
 8000b36:	d902      	bls.n	8000b3e <listen+0x16>
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3c:	e049      	b.n	8000bd2 <listen+0xaa>
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	3301      	adds	r3, #1
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 f856 	bl	8001bf8 <WIZCHIP_READ>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d002      	beq.n	8000b5c <listen+0x34>
 8000b56:	f06f 0304 	mvn.w	r3, #4
 8000b5a:	e03a      	b.n	8000bd2 <listen+0xaa>
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	3301      	adds	r3, #1
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f001 f845 	bl	8001bf8 <WIZCHIP_READ>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b13      	cmp	r3, #19
 8000b72:	d002      	beq.n	8000b7a <listen+0x52>
 8000b74:	f06f 0302 	mvn.w	r3, #2
 8000b78:	e02b      	b.n	8000bd2 <listen+0xaa>
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	3301      	adds	r3, #1
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000b86:	2102      	movs	r1, #2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 f881 	bl	8001c90 <WIZCHIP_WRITE>
 8000b8e:	bf00      	nop
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	3301      	adds	r3, #1
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f001 f82b 	bl	8001bf8 <WIZCHIP_READ>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1f3      	bne.n	8000b90 <listen+0x68>
 8000ba8:	e006      	b.n	8000bb8 <listen+0x90>
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff4d 	bl	8000a4c <close>
 8000bb2:	f06f 0303 	mvn.w	r3, #3
 8000bb6:	e00c      	b.n	8000bd2 <listen+0xaa>
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 f817 	bl	8001bf8 <WIZCHIP_READ>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b14      	cmp	r3, #20
 8000bce:	d1ec      	bne.n	8000baa <listen+0x82>
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <send>:
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
 8000be8:	4613      	mov	r3, r2
 8000bea:	80bb      	strh	r3, [r7, #4]
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	81bb      	strh	r3, [r7, #12]
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b08      	cmp	r3, #8
 8000bf8:	d902      	bls.n	8000c00 <send+0x24>
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	e0de      	b.n	8000dbe <send+0x1e2>
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	3301      	adds	r3, #1
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 fff5 	bl	8001bf8 <WIZCHIP_READ>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	f003 030f 	and.w	r3, r3, #15
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d002      	beq.n	8000c1e <send+0x42>
 8000c18:	f06f 0304 	mvn.w	r3, #4
 8000c1c:	e0cf      	b.n	8000dbe <send+0x1e2>
 8000c1e:	88bb      	ldrh	r3, [r7, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <send+0x4e>
 8000c24:	f06f 030d 	mvn.w	r3, #13
 8000c28:	e0c9      	b.n	8000dbe <send+0x1e2>
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	3301      	adds	r3, #1
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 ffde 	bl	8001bf8 <WIZCHIP_READ>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	2b17      	cmp	r3, #23
 8000c44:	d005      	beq.n	8000c52 <send+0x76>
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	2b1c      	cmp	r3, #28
 8000c4a:	d002      	beq.n	8000c52 <send+0x76>
 8000c4c:	f06f 0306 	mvn.w	r3, #6
 8000c50:	e0b5      	b.n	8000dbe <send+0x1e2>
 8000c52:	4b5d      	ldr	r3, [pc, #372]	; (8000dc8 <send+0x1ec>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	fa42 f303 	asr.w	r3, r2, r3
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d039      	beq.n	8000cda <send+0xfe>
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 ffc0 	bl	8001bf8 <WIZCHIP_READ>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	f003 031f 	and.w	r3, r3, #31
 8000c7e:	73fb      	strb	r3, [r7, #15]
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d019      	beq.n	8000cbe <send+0xe2>
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	3301      	adds	r3, #1
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c96:	2110      	movs	r1, #16
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 fff9 	bl	8001c90 <WIZCHIP_WRITE>
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	b21b      	sxth	r3, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	b21a      	sxth	r2, r3
 8000cac:	4b46      	ldr	r3, [pc, #280]	; (8000dc8 <send+0x1ec>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	4b43      	ldr	r3, [pc, #268]	; (8000dc8 <send+0x1ec>)
 8000cba:	801a      	strh	r2, [r3, #0]
 8000cbc:	e00d      	b.n	8000cda <send+0xfe>
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	f003 0308 	and.w	r3, r3, #8
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d006      	beq.n	8000cd6 <send+0xfa>
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff febe 	bl	8000a4c <close>
 8000cd0:	f06f 030c 	mvn.w	r3, #12
 8000cd4:	e073      	b.n	8000dbe <send+0x1e2>
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e071      	b.n	8000dbe <send+0x1e2>
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	3301      	adds	r3, #1
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 ff86 	bl	8001bf8 <WIZCHIP_READ>
 8000cec:	4603      	mov	r3, r0
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	029b      	lsls	r3, r3, #10
 8000cf2:	81bb      	strh	r3, [r7, #12]
 8000cf4:	88ba      	ldrh	r2, [r7, #4]
 8000cf6:	89bb      	ldrh	r3, [r7, #12]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d901      	bls.n	8000d00 <send+0x124>
 8000cfc:	89bb      	ldrh	r3, [r7, #12]
 8000cfe:	80bb      	strh	r3, [r7, #4]
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 f8d2 	bl	8001eac <getSn_TX_FSR>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	81bb      	strh	r3, [r7, #12]
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	3301      	adds	r3, #1
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 ff6d 	bl	8001bf8 <WIZCHIP_READ>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	73fb      	strb	r3, [r7, #15]
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	2b17      	cmp	r3, #23
 8000d26:	d009      	beq.n	8000d3c <send+0x160>
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	2b1c      	cmp	r3, #28
 8000d2c:	d006      	beq.n	8000d3c <send+0x160>
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fe8b 	bl	8000a4c <close>
 8000d36:	f06f 0306 	mvn.w	r3, #6
 8000d3a:	e040      	b.n	8000dbe <send+0x1e2>
 8000d3c:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <send+0x1f0>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	fa42 f303 	asr.w	r3, r2, r3
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d005      	beq.n	8000d5c <send+0x180>
 8000d50:	88ba      	ldrh	r2, [r7, #4]
 8000d52:	89bb      	ldrh	r3, [r7, #12]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d901      	bls.n	8000d5c <send+0x180>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	e030      	b.n	8000dbe <send+0x1e2>
 8000d5c:	88ba      	ldrh	r2, [r7, #4]
 8000d5e:	89bb      	ldrh	r3, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d900      	bls.n	8000d66 <send+0x18a>
 8000d64:	e7cc      	b.n	8000d00 <send+0x124>
 8000d66:	bf00      	nop
 8000d68:	88ba      	ldrh	r2, [r7, #4]
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	6839      	ldr	r1, [r7, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 f932 	bl	8001fd8 <wiz_send_data>
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	3301      	adds	r3, #1
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d80:	2120      	movs	r1, #32
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 ff84 	bl	8001c90 <WIZCHIP_WRITE>
 8000d88:	bf00      	nop
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	3301      	adds	r3, #1
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 ff2e 	bl	8001bf8 <WIZCHIP_READ>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1f3      	bne.n	8000d8a <send+0x1ae>
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2201      	movs	r2, #1
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	b21a      	sxth	r2, r3
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <send+0x1ec>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	b21b      	sxth	r3, r3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	b21b      	sxth	r3, r3
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <send+0x1ec>)
 8000dba:	801a      	strh	r2, [r3, #0]
 8000dbc:	88bb      	ldrh	r3, [r7, #4]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200007c0 	.word	0x200007c0
 8000dcc:	200007be 	.word	0x200007be

08000dd0 <recv>:
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	80bb      	strh	r3, [r7, #4]
 8000de0:	2300      	movs	r3, #0
 8000de2:	73fb      	strb	r3, [r7, #15]
 8000de4:	2300      	movs	r3, #0
 8000de6:	81bb      	strh	r3, [r7, #12]
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	2b08      	cmp	r3, #8
 8000dec:	d902      	bls.n	8000df4 <recv+0x24>
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	e09c      	b.n	8000f2e <recv+0x15e>
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	3301      	adds	r3, #1
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 fefb 	bl	8001bf8 <WIZCHIP_READ>
 8000e02:	4603      	mov	r3, r0
 8000e04:	f003 030f 	and.w	r3, r3, #15
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d002      	beq.n	8000e12 <recv+0x42>
 8000e0c:	f06f 0304 	mvn.w	r3, #4
 8000e10:	e08d      	b.n	8000f2e <recv+0x15e>
 8000e12:	88bb      	ldrh	r3, [r7, #4]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <recv+0x4e>
 8000e18:	f06f 030d 	mvn.w	r3, #13
 8000e1c:	e087      	b.n	8000f2e <recv+0x15e>
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	3301      	adds	r3, #1
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 fee4 	bl	8001bf8 <WIZCHIP_READ>
 8000e30:	4603      	mov	r3, r0
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	029b      	lsls	r3, r3, #10
 8000e36:	81bb      	strh	r3, [r7, #12]
 8000e38:	89ba      	ldrh	r2, [r7, #12]
 8000e3a:	88bb      	ldrh	r3, [r7, #4]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d201      	bcs.n	8000e44 <recv+0x74>
 8000e40:	89bb      	ldrh	r3, [r7, #12]
 8000e42:	80bb      	strh	r3, [r7, #4]
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 f87b 	bl	8001f42 <getSn_RX_RSR>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	81bb      	strh	r3, [r7, #12]
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	3301      	adds	r3, #1
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 fecb 	bl	8001bf8 <WIZCHIP_READ>
 8000e62:	4603      	mov	r3, r0
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	2b17      	cmp	r3, #23
 8000e6a:	d026      	beq.n	8000eba <recv+0xea>
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	2b1c      	cmp	r3, #28
 8000e70:	d11c      	bne.n	8000eac <recv+0xdc>
 8000e72:	89bb      	ldrh	r3, [r7, #12]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d133      	bne.n	8000ee0 <recv+0x110>
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 f816 	bl	8001eac <getSn_TX_FSR>
 8000e80:	4603      	mov	r3, r0
 8000e82:	461c      	mov	r4, r3
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	3301      	adds	r3, #1
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 feb1 	bl	8001bf8 <WIZCHIP_READ>
 8000e96:	4603      	mov	r3, r0
 8000e98:	029b      	lsls	r3, r3, #10
 8000e9a:	429c      	cmp	r4, r3
 8000e9c:	d10d      	bne.n	8000eba <recv+0xea>
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fdd3 	bl	8000a4c <close>
 8000ea6:	f06f 0306 	mvn.w	r3, #6
 8000eaa:	e040      	b.n	8000f2e <recv+0x15e>
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fdcc 	bl	8000a4c <close>
 8000eb4:	f06f 0306 	mvn.w	r3, #6
 8000eb8:	e039      	b.n	8000f2e <recv+0x15e>
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <recv+0x168>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	fa42 f303 	asr.w	r3, r2, r3
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d004      	beq.n	8000ed8 <recv+0x108>
 8000ece:	89bb      	ldrh	r3, [r7, #12]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d101      	bne.n	8000ed8 <recv+0x108>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	e02a      	b.n	8000f2e <recv+0x15e>
 8000ed8:	89bb      	ldrh	r3, [r7, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d102      	bne.n	8000ee4 <recv+0x114>
 8000ede:	e7b1      	b.n	8000e44 <recv+0x74>
 8000ee0:	bf00      	nop
 8000ee2:	e000      	b.n	8000ee6 <recv+0x116>
 8000ee4:	bf00      	nop
 8000ee6:	89ba      	ldrh	r2, [r7, #12]
 8000ee8:	88bb      	ldrh	r3, [r7, #4]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d201      	bcs.n	8000ef2 <recv+0x122>
 8000eee:	89bb      	ldrh	r3, [r7, #12]
 8000ef0:	80bb      	strh	r3, [r7, #4]
 8000ef2:	88ba      	ldrh	r2, [r7, #4]
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f001 f8c9 	bl	8002090 <wiz_recv_data>
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	3301      	adds	r3, #1
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f0a:	2140      	movs	r1, #64	; 0x40
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 febf 	bl	8001c90 <WIZCHIP_WRITE>
 8000f12:	bf00      	nop
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	3301      	adds	r3, #1
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 fe69 	bl	8001bf8 <WIZCHIP_READ>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f3      	bne.n	8000f14 <recv+0x144>
 8000f2c:	88bb      	ldrh	r3, [r7, #4]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd90      	pop	{r4, r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200007be 	.word	0x200007be

08000f3c <wizchip_select>:
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	2200      	movs	r2, #0
 8000f42:	2102      	movs	r1, #2
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <wizchip_select+0x14>)
 8000f46:	f001 fc2a 	bl	800279e <HAL_GPIO_WritePin>
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40010800 	.word	0x40010800

08000f54 <wizchip_deselect>:
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <wizchip_deselect+0x14>)
 8000f5e:	f001 fc1e 	bl	800279e <HAL_GPIO_WritePin>
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40010800 	.word	0x40010800

08000f6c <wizchip_read>:
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	1df9      	adds	r1, r7, #7
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4804      	ldr	r0, [pc, #16]	; (8000f8c <wizchip_read+0x20>)
 8000f7c:	f002 fa0b 	bl	8003396 <HAL_SPI_Receive>
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000364 	.word	0x20000364

08000f90 <wizchip_write>:
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
 8000f9a:	1df9      	adds	r1, r7, #7
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <wizchip_write+0x20>)
 8000fa4:	f002 f8b4 	bl	8003110 <HAL_SPI_Transmit>
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000364 	.word	0x20000364

08000fb4 <wizchip_read_burst>:
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	81fb      	strh	r3, [r7, #14]
 8000fc4:	e009      	b.n	8000fda <wizchip_read_burst+0x26>
 8000fc6:	89fb      	ldrh	r3, [r7, #14]
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	18d4      	adds	r4, r2, r3
 8000fcc:	f7ff ffce 	bl	8000f6c <wizchip_read>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	7023      	strb	r3, [r4, #0]
 8000fd4:	89fb      	ldrh	r3, [r7, #14]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	81fb      	strh	r3, [r7, #14]
 8000fda:	89fa      	ldrh	r2, [r7, #14]
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d3f1      	bcc.n	8000fc6 <wizchip_read_burst+0x12>
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd90      	pop	{r4, r7, pc}

08000fec <wizchip_write_burst>:
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	81fb      	strh	r3, [r7, #14]
 8000ffc:	e009      	b.n	8001012 <wizchip_write_burst+0x26>
 8000ffe:	89fb      	ldrh	r3, [r7, #14]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ffc2 	bl	8000f90 <wizchip_write>
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	3301      	adds	r3, #1
 8001010:	81fb      	strh	r3, [r7, #14]
 8001012:	89fa      	ldrh	r2, [r7, #14]
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	429a      	cmp	r2, r3
 8001018:	d3f1      	bcc.n	8000ffe <wizchip_write_burst+0x12>
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <W5500Init>:
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <W5500Init+0x74>)
 800102c:	1d3c      	adds	r4, r7, #4
 800102e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001030:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001034:	2201      	movs	r2, #1
 8001036:	2102      	movs	r1, #2
 8001038:	4818      	ldr	r0, [pc, #96]	; (800109c <W5500Init+0x78>)
 800103a:	f001 fbb0 	bl	800279e <HAL_GPIO_WritePin>
 800103e:	2200      	movs	r2, #0
 8001040:	2101      	movs	r1, #1
 8001042:	4816      	ldr	r0, [pc, #88]	; (800109c <W5500Init+0x78>)
 8001044:	f001 fbab 	bl	800279e <HAL_GPIO_WritePin>
 8001048:	23ff      	movs	r3, #255	; 0xff
 800104a:	75fb      	strb	r3, [r7, #23]
 800104c:	bf00      	nop
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	1e5a      	subs	r2, r3, #1
 8001052:	75fa      	strb	r2, [r7, #23]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1fa      	bne.n	800104e <W5500Init+0x2a>
 8001058:	2201      	movs	r2, #1
 800105a:	2101      	movs	r1, #1
 800105c:	480f      	ldr	r0, [pc, #60]	; (800109c <W5500Init+0x78>)
 800105e:	f001 fb9e 	bl	800279e <HAL_GPIO_WritePin>
 8001062:	490f      	ldr	r1, [pc, #60]	; (80010a0 <W5500Init+0x7c>)
 8001064:	480f      	ldr	r0, [pc, #60]	; (80010a4 <W5500Init+0x80>)
 8001066:	f000 f881 	bl	800116c <reg_wizchip_cs_cbfunc>
 800106a:	490f      	ldr	r1, [pc, #60]	; (80010a8 <W5500Init+0x84>)
 800106c:	480f      	ldr	r0, [pc, #60]	; (80010ac <W5500Init+0x88>)
 800106e:	f000 f8a1 	bl	80011b4 <reg_wizchip_spi_cbfunc>
 8001072:	490f      	ldr	r1, [pc, #60]	; (80010b0 <W5500Init+0x8c>)
 8001074:	480f      	ldr	r0, [pc, #60]	; (80010b4 <W5500Init+0x90>)
 8001076:	f000 f8c9 	bl	800120c <reg_wizchip_spiburst_cbfunc>
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	4619      	mov	r1, r3
 800107e:	2001      	movs	r0, #1
 8001080:	f000 f8f0 	bl	8001264 <ctlwizchip>
 8001084:	4603      	mov	r3, r0
 8001086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108a:	d100      	bne.n	800108e <W5500Init+0x6a>
 800108c:	e7fe      	b.n	800108c <W5500Init+0x68>
 800108e:	bf00      	nop
 8001090:	371c      	adds	r7, #28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd90      	pop	{r4, r7, pc}
 8001096:	bf00      	nop
 8001098:	080051f4 	.word	0x080051f4
 800109c:	40010800 	.word	0x40010800
 80010a0:	08000f55 	.word	0x08000f55
 80010a4:	08000f3d 	.word	0x08000f3d
 80010a8:	08000f91 	.word	0x08000f91
 80010ac:	08000f6d 	.word	0x08000f6d
 80010b0:	08000fed 	.word	0x08000fed
 80010b4:	08000fb5 	.word	0x08000fb5

080010b8 <wizchip_cris_enter>:
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <wizchip_cris_exit>:
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <wizchip_cs_select>:
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <wizchip_cs_deselect>:
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <wizchip_bus_readdata>:
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <wizchip_bus_writedata>:
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	78fa      	ldrb	r2, [r7, #3]
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <wizchip_spi_readbyte>:
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
 8001120:	2300      	movs	r3, #0
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr

0800112a <wizchip_spi_writebyte>:
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <wizchip_spi_readburst>:
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	460b      	mov	r3, r1
 8001148:	807b      	strh	r3, [r7, #2]
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <wizchip_spi_writeburst>:
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
	...

0800116c <reg_wizchip_cs_cbfunc>:
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <reg_wizchip_cs_cbfunc+0x16>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d106      	bne.n	8001190 <reg_wizchip_cs_cbfunc+0x24>
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <reg_wizchip_cs_cbfunc+0x3c>)
 8001184:	4a09      	ldr	r2, [pc, #36]	; (80011ac <reg_wizchip_cs_cbfunc+0x40>)
 8001186:	615a      	str	r2, [r3, #20]
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <reg_wizchip_cs_cbfunc+0x3c>)
 800118a:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <reg_wizchip_cs_cbfunc+0x44>)
 800118c:	619a      	str	r2, [r3, #24]
 800118e:	e006      	b.n	800119e <reg_wizchip_cs_cbfunc+0x32>
 8001190:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <reg_wizchip_cs_cbfunc+0x3c>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6153      	str	r3, [r2, #20]
 8001196:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <reg_wizchip_cs_cbfunc+0x3c>)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	20000020 	.word	0x20000020
 80011ac:	080010d1 	.word	0x080010d1
 80011b0:	080010dd 	.word	0x080010dd

080011b4 <reg_wizchip_spi_cbfunc>:
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	bf00      	nop
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <reg_wizchip_spi_cbfunc+0x4c>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f9      	beq.n	80011c0 <reg_wizchip_spi_cbfunc+0xc>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <reg_wizchip_spi_cbfunc+0x24>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d106      	bne.n	80011e6 <reg_wizchip_spi_cbfunc+0x32>
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <reg_wizchip_spi_cbfunc+0x4c>)
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <reg_wizchip_spi_cbfunc+0x50>)
 80011dc:	61da      	str	r2, [r3, #28]
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <reg_wizchip_spi_cbfunc+0x4c>)
 80011e0:	4a09      	ldr	r2, [pc, #36]	; (8001208 <reg_wizchip_spi_cbfunc+0x54>)
 80011e2:	621a      	str	r2, [r3, #32]
 80011e4:	e006      	b.n	80011f4 <reg_wizchip_spi_cbfunc+0x40>
 80011e6:	4a06      	ldr	r2, [pc, #24]	; (8001200 <reg_wizchip_spi_cbfunc+0x4c>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	61d3      	str	r3, [r2, #28]
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <reg_wizchip_spi_cbfunc+0x4c>)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	6213      	str	r3, [r2, #32]
 80011f2:	bf00      	nop
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000020 	.word	0x20000020
 8001204:	0800111d 	.word	0x0800111d
 8001208:	0800112b 	.word	0x0800112b

0800120c <reg_wizchip_spiburst_cbfunc>:
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	bf00      	nop
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f9      	beq.n	8001218 <reg_wizchip_spiburst_cbfunc+0xc>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <reg_wizchip_spiburst_cbfunc+0x24>
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d106      	bne.n	800123e <reg_wizchip_spiburst_cbfunc+0x32>
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <reg_wizchip_spiburst_cbfunc+0x50>)
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001238:	4a09      	ldr	r2, [pc, #36]	; (8001260 <reg_wizchip_spiburst_cbfunc+0x54>)
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
 800123c:	e006      	b.n	800124c <reg_wizchip_spiburst_cbfunc+0x40>
 800123e:	4a06      	ldr	r2, [pc, #24]	; (8001258 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6253      	str	r3, [r2, #36]	; 0x24
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	6293      	str	r3, [r2, #40]	; 0x28
 800124a:	bf00      	nop
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000020 	.word	0x20000020
 800125c:	0800113f 	.word	0x0800113f
 8001260:	08001155 	.word	0x08001155

08001264 <ctlwizchip>:
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b087      	sub	sp, #28
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
 8001270:	2300      	movs	r3, #0
 8001272:	75fb      	strb	r3, [r7, #23]
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	2b0f      	cmp	r3, #15
 8001280:	f200 80c7 	bhi.w	8001412 <ctlwizchip+0x1ae>
 8001284:	a201      	add	r2, pc, #4	; (adr r2, 800128c <ctlwizchip+0x28>)
 8001286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128a:	bf00      	nop
 800128c:	080012cd 	.word	0x080012cd
 8001290:	080012d3 	.word	0x080012d3
 8001294:	080012ff 	.word	0x080012ff
 8001298:	080012f3 	.word	0x080012f3
 800129c:	0800130d 	.word	0x0800130d
 80012a0:	08001319 	.word	0x08001319
 80012a4:	08001327 	.word	0x08001327
 80012a8:	0800134d 	.word	0x0800134d
 80012ac:	08001373 	.word	0x08001373
 80012b0:	080013b7 	.word	0x080013b7
 80012b4:	080013bd 	.word	0x080013bd
 80012b8:	080013c5 	.word	0x080013c5
 80012bc:	08001419 	.word	0x08001419
 80012c0:	080013cd 	.word	0x080013cd
 80012c4:	080013db 	.word	0x080013db
 80012c8:	080013f7 	.word	0x080013f7
 80012cc:	f000 f8ea 	bl	80014a4 <wizchip_sw_reset>
 80012d0:	e0a3      	b.n	800141a <ctlwizchip+0x1b6>
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <ctlwizchip+0x7e>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3308      	adds	r3, #8
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 f927 	bl	800153c <wizchip_init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	e094      	b.n	800141c <ctlwizchip+0x1b8>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f9ac 	bl	8001654 <wizchip_clrinterrupt>
 80012fc:	e08d      	b.n	800141a <ctlwizchip+0x1b6>
 80012fe:	f000 f9dd 	bl	80016bc <wizchip_getinterrupt>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	801a      	strh	r2, [r3, #0]
 800130a:	e086      	b.n	800141a <ctlwizchip+0x1b6>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f9f8 	bl	8001706 <wizchip_setinterruptmask>
 8001316:	e080      	b.n	800141a <ctlwizchip+0x1b6>
 8001318:	f000 fa10 	bl	800173c <wizchip_getinterruptmask>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	801a      	strh	r2, [r3, #0]
 8001324:	e079      	b.n	800141a <ctlwizchip+0x1b6>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	b29b      	uxth	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	4619      	mov	r1, r3
 8001332:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8001336:	f000 fcab 	bl	8001c90 <WIZCHIP_WRITE>
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4619      	mov	r1, r3
 8001342:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001346:	f000 fca3 	bl	8001c90 <WIZCHIP_WRITE>
 800134a:	e066      	b.n	800141a <ctlwizchip+0x1b6>
 800134c:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8001350:	f000 fc52 	bl	8001bf8 <WIZCHIP_READ>
 8001354:	4603      	mov	r3, r0
 8001356:	b29b      	uxth	r3, r3
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b29c      	uxth	r4, r3
 800135c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001360:	f000 fc4a 	bl	8001bf8 <WIZCHIP_READ>
 8001364:	4603      	mov	r3, r0
 8001366:	b29b      	uxth	r3, r3
 8001368:	4423      	add	r3, r4
 800136a:	b29a      	uxth	r2, r3
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	801a      	strh	r2, [r3, #0]
 8001370:	e053      	b.n	800141a <ctlwizchip+0x1b6>
 8001372:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <ctlwizchip+0x1c0>)
 8001374:	789a      	ldrb	r2, [r3, #2]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	701a      	strb	r2, [r3, #0]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	4a29      	ldr	r2, [pc, #164]	; (8001424 <ctlwizchip+0x1c0>)
 8001380:	78d2      	ldrb	r2, [r2, #3]
 8001382:	701a      	strb	r2, [r3, #0]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	3302      	adds	r3, #2
 8001388:	4a26      	ldr	r2, [pc, #152]	; (8001424 <ctlwizchip+0x1c0>)
 800138a:	7912      	ldrb	r2, [r2, #4]
 800138c:	701a      	strb	r2, [r3, #0]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	3303      	adds	r3, #3
 8001392:	4a24      	ldr	r2, [pc, #144]	; (8001424 <ctlwizchip+0x1c0>)
 8001394:	7952      	ldrb	r2, [r2, #5]
 8001396:	701a      	strb	r2, [r3, #0]
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	3304      	adds	r3, #4
 800139c:	4a21      	ldr	r2, [pc, #132]	; (8001424 <ctlwizchip+0x1c0>)
 800139e:	7992      	ldrb	r2, [r2, #6]
 80013a0:	701a      	strb	r2, [r3, #0]
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	3305      	adds	r3, #5
 80013a6:	4a1f      	ldr	r2, [pc, #124]	; (8001424 <ctlwizchip+0x1c0>)
 80013a8:	79d2      	ldrb	r2, [r2, #7]
 80013aa:	701a      	strb	r2, [r3, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	3306      	adds	r3, #6
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
 80013b4:	e031      	b.n	800141a <ctlwizchip+0x1b6>
 80013b6:	f000 fa13 	bl	80017e0 <wizphy_reset>
 80013ba:	e02e      	b.n	800141a <ctlwizchip+0x1b6>
 80013bc:	6838      	ldr	r0, [r7, #0]
 80013be:	f000 fa36 	bl	800182e <wizphy_setphyconf>
 80013c2:	e02a      	b.n	800141a <ctlwizchip+0x1b6>
 80013c4:	6838      	ldr	r0, [r7, #0]
 80013c6:	f000 fa75 	bl	80018b4 <wizphy_getphyconf>
 80013ca:	e026      	b.n	800141a <ctlwizchip+0x1b6>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 fad9 	bl	8001988 <wizphy_setphypmode>
 80013d6:	4603      	mov	r3, r0
 80013d8:	e020      	b.n	800141c <ctlwizchip+0x1b8>
 80013da:	f000 f9e8 	bl	80017ae <wizphy_getphypmode>
 80013de:	4603      	mov	r3, r0
 80013e0:	75fb      	strb	r3, [r7, #23]
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	2bff      	cmp	r3, #255	; 0xff
 80013e6:	d102      	bne.n	80013ee <ctlwizchip+0x18a>
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	e016      	b.n	800141c <ctlwizchip+0x1b8>
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	7dfa      	ldrb	r2, [r7, #23]
 80013f2:	701a      	strb	r2, [r3, #0]
 80013f4:	e011      	b.n	800141a <ctlwizchip+0x1b6>
 80013f6:	f000 f9c4 	bl	8001782 <wizphy_getphylink>
 80013fa:	4603      	mov	r3, r0
 80013fc:	75fb      	strb	r3, [r7, #23]
 80013fe:	7dfb      	ldrb	r3, [r7, #23]
 8001400:	2bff      	cmp	r3, #255	; 0xff
 8001402:	d102      	bne.n	800140a <ctlwizchip+0x1a6>
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	e008      	b.n	800141c <ctlwizchip+0x1b8>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	7dfa      	ldrb	r2, [r7, #23]
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	e003      	b.n	800141a <ctlwizchip+0x1b6>
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e001      	b.n	800141c <ctlwizchip+0x1b8>
 8001418:	bf00      	nop
 800141a:	2300      	movs	r3, #0
 800141c:	4618      	mov	r0, r3
 800141e:	371c      	adds	r7, #28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd90      	pop	{r4, r7, pc}
 8001424:	20000020 	.word	0x20000020

08001428 <ctlnetwork>:
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	71fb      	strb	r3, [r7, #7]
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	2b05      	cmp	r3, #5
 8001438:	d82c      	bhi.n	8001494 <ctlnetwork+0x6c>
 800143a:	a201      	add	r2, pc, #4	; (adr r2, 8001440 <ctlnetwork+0x18>)
 800143c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001440:	08001459 	.word	0x08001459
 8001444:	08001461 	.word	0x08001461
 8001448:	08001469 	.word	0x08001469
 800144c:	08001477 	.word	0x08001477
 8001450:	08001485 	.word	0x08001485
 8001454:	0800148d 	.word	0x0800148d
 8001458:	6838      	ldr	r0, [r7, #0]
 800145a:	f000 fadf 	bl	8001a1c <wizchip_setnetinfo>
 800145e:	e01c      	b.n	800149a <ctlnetwork+0x72>
 8001460:	6838      	ldr	r0, [r7, #0]
 8001462:	f000 fb1b 	bl	8001a9c <wizchip_getnetinfo>
 8001466:	e018      	b.n	800149a <ctlnetwork+0x72>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fb55 	bl	8001b1c <wizchip_setnetmode>
 8001472:	4603      	mov	r3, r0
 8001474:	e012      	b.n	800149c <ctlnetwork+0x74>
 8001476:	f000 fb73 	bl	8001b60 <wizchip_getnetmode>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	701a      	strb	r2, [r3, #0]
 8001482:	e00a      	b.n	800149a <ctlnetwork+0x72>
 8001484:	6838      	ldr	r0, [r7, #0]
 8001486:	f000 fb73 	bl	8001b70 <wizchip_settimeout>
 800148a:	e006      	b.n	800149a <ctlnetwork+0x72>
 800148c:	6838      	ldr	r0, [r7, #0]
 800148e:	f000 fb90 	bl	8001bb2 <wizchip_gettimeout>
 8001492:	e002      	b.n	800149a <ctlnetwork+0x72>
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
 8001498:	e000      	b.n	800149c <ctlnetwork+0x74>
 800149a:	2300      	movs	r3, #0
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <wizchip_sw_reset>:
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2206      	movs	r2, #6
 80014ae:	4619      	mov	r1, r3
 80014b0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80014b4:	f000 fc3a 	bl	8001d2c <WIZCHIP_READ_BUF>
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2204      	movs	r2, #4
 80014be:	4619      	mov	r1, r3
 80014c0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014c4:	f000 fc32 	bl	8001d2c <WIZCHIP_READ_BUF>
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	2204      	movs	r2, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80014d4:	f000 fc2a 	bl	8001d2c <WIZCHIP_READ_BUF>
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	2204      	movs	r2, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80014e4:	f000 fc22 	bl	8001d2c <WIZCHIP_READ_BUF>
 80014e8:	2180      	movs	r1, #128	; 0x80
 80014ea:	2000      	movs	r0, #0
 80014ec:	f000 fbd0 	bl	8001c90 <WIZCHIP_WRITE>
 80014f0:	2000      	movs	r0, #0
 80014f2:	f000 fb81 	bl	8001bf8 <WIZCHIP_READ>
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2206      	movs	r2, #6
 80014fa:	4619      	mov	r1, r3
 80014fc:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001500:	f000 fc74 	bl	8001dec <WIZCHIP_WRITE_BUF>
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2204      	movs	r2, #4
 800150a:	4619      	mov	r1, r3
 800150c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001510:	f000 fc6c 	bl	8001dec <WIZCHIP_WRITE_BUF>
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	2204      	movs	r2, #4
 800151a:	4619      	mov	r1, r3
 800151c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001520:	f000 fc64 	bl	8001dec <WIZCHIP_WRITE_BUF>
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	2204      	movs	r2, #4
 800152a:	4619      	mov	r1, r3
 800152c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001530:	f000 fc5c 	bl	8001dec <WIZCHIP_WRITE_BUF>
 8001534:	bf00      	nop
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <wizchip_init>:
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	2300      	movs	r3, #0
 8001548:	73bb      	strb	r3, [r7, #14]
 800154a:	f7ff ffab 	bl	80014a4 <wizchip_sw_reset>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d03b      	beq.n	80015cc <wizchip_init+0x90>
 8001554:	2300      	movs	r3, #0
 8001556:	73bb      	strb	r3, [r7, #14]
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e015      	b.n	800158a <wizchip_init+0x4e>
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	781a      	ldrb	r2, [r3, #0]
 8001568:	7bbb      	ldrb	r3, [r7, #14]
 800156a:	4413      	add	r3, r2
 800156c:	b2db      	uxtb	r3, r3
 800156e:	73bb      	strb	r3, [r7, #14]
 8001570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001574:	2b10      	cmp	r3, #16
 8001576:	dd02      	ble.n	800157e <wizchip_init+0x42>
 8001578:	f04f 33ff 	mov.w	r3, #4294967295
 800157c:	e066      	b.n	800164c <wizchip_init+0x110>
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	3301      	adds	r3, #1
 8001586:	b2db      	uxtb	r3, r3
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	2b07      	cmp	r3, #7
 8001590:	dde5      	ble.n	800155e <wizchip_init+0x22>
 8001592:	2300      	movs	r3, #0
 8001594:	73fb      	strb	r3, [r7, #15]
 8001596:	e015      	b.n	80015c4 <wizchip_init+0x88>
 8001598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	3301      	adds	r3, #1
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80015a6:	4618      	mov	r0, r3
 80015a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	4413      	add	r3, r2
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	4619      	mov	r1, r3
 80015b4:	f000 fb6c 	bl	8001c90 <WIZCHIP_WRITE>
 80015b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	3301      	adds	r3, #1
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c8:	2b07      	cmp	r3, #7
 80015ca:	dde5      	ble.n	8001598 <wizchip_init+0x5c>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d03b      	beq.n	800164a <wizchip_init+0x10e>
 80015d2:	2300      	movs	r3, #0
 80015d4:	73bb      	strb	r3, [r7, #14]
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	e015      	b.n	8001608 <wizchip_init+0xcc>
 80015dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	781a      	ldrb	r2, [r3, #0]
 80015e6:	7bbb      	ldrb	r3, [r7, #14]
 80015e8:	4413      	add	r3, r2
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	73bb      	strb	r3, [r7, #14]
 80015ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015f2:	2b10      	cmp	r3, #16
 80015f4:	dd02      	ble.n	80015fc <wizchip_init+0xc0>
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	e027      	b.n	800164c <wizchip_init+0x110>
 80015fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	3301      	adds	r3, #1
 8001604:	b2db      	uxtb	r3, r3
 8001606:	73fb      	strb	r3, [r7, #15]
 8001608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160c:	2b07      	cmp	r3, #7
 800160e:	dde5      	ble.n	80015dc <wizchip_init+0xa0>
 8001610:	2300      	movs	r3, #0
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e015      	b.n	8001642 <wizchip_init+0x106>
 8001616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	3301      	adds	r3, #1
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001624:	4618      	mov	r0, r3
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	4413      	add	r3, r2
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	f000 fb2d 	bl	8001c90 <WIZCHIP_WRITE>
 8001636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	3301      	adds	r3, #1
 800163e:	b2db      	uxtb	r3, r3
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001646:	2b07      	cmp	r3, #7
 8001648:	dde5      	ble.n	8001616 <wizchip_init+0xda>
 800164a:	2300      	movs	r3, #0
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <wizchip_clrinterrupt>:
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	73fb      	strb	r3, [r7, #15]
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	b29b      	uxth	r3, r3
 8001668:	73bb      	strb	r3, [r7, #14]
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	f023 030f 	bic.w	r3, r3, #15
 8001670:	b2db      	uxtb	r3, r3
 8001672:	4619      	mov	r1, r3
 8001674:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001678:	f000 fb0a 	bl	8001c90 <WIZCHIP_WRITE>
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]
 8001680:	e014      	b.n	80016ac <wizchip_clrinterrupt+0x58>
 8001682:	7bba      	ldrb	r2, [r7, #14]
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	fa42 f303 	asr.w	r3, r2, r3
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <wizchip_clrinterrupt+0x52>
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	3301      	adds	r3, #1
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800169e:	211f      	movs	r1, #31
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 faf5 	bl	8001c90 <WIZCHIP_WRITE>
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	3301      	adds	r3, #1
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	2b07      	cmp	r3, #7
 80016b0:	d9e7      	bls.n	8001682 <wizchip_clrinterrupt+0x2e>
 80016b2:	bf00      	nop
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <wizchip_getinterrupt>:
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	2300      	movs	r3, #0
 80016c4:	71fb      	strb	r3, [r7, #7]
 80016c6:	2300      	movs	r3, #0
 80016c8:	71bb      	strb	r3, [r7, #6]
 80016ca:	2300      	movs	r3, #0
 80016cc:	80bb      	strh	r3, [r7, #4]
 80016ce:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80016d2:	f000 fa91 	bl	8001bf8 <WIZCHIP_READ>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f023 030f 	bic.w	r3, r3, #15
 80016dc:	71fb      	strb	r3, [r7, #7]
 80016de:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80016e2:	f000 fa89 	bl	8001bf8 <WIZCHIP_READ>
 80016e6:	4603      	mov	r3, r0
 80016e8:	71bb      	strb	r3, [r7, #6]
 80016ea:	79bb      	ldrb	r3, [r7, #6]
 80016ec:	80bb      	strh	r3, [r7, #4]
 80016ee:	88bb      	ldrh	r3, [r7, #4]
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	80bb      	strh	r3, [r7, #4]
 80016fc:	88bb      	ldrh	r3, [r7, #4]
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <wizchip_setinterruptmask>:
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	80fb      	strh	r3, [r7, #6]
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	0a1b      	lsrs	r3, r3, #8
 8001718:	b29b      	uxth	r3, r3
 800171a:	73bb      	strb	r3, [r7, #14]
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	4619      	mov	r1, r3
 8001720:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8001724:	f000 fab4 	bl	8001c90 <WIZCHIP_WRITE>
 8001728:	7bbb      	ldrb	r3, [r7, #14]
 800172a:	4619      	mov	r1, r3
 800172c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001730:	f000 faae 	bl	8001c90 <WIZCHIP_WRITE>
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <wizchip_getinterruptmask>:
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	2300      	movs	r3, #0
 8001744:	71fb      	strb	r3, [r7, #7]
 8001746:	2300      	movs	r3, #0
 8001748:	71bb      	strb	r3, [r7, #6]
 800174a:	2300      	movs	r3, #0
 800174c:	80bb      	strh	r3, [r7, #4]
 800174e:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8001752:	f000 fa51 	bl	8001bf8 <WIZCHIP_READ>
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
 800175a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800175e:	f000 fa4b 	bl	8001bf8 <WIZCHIP_READ>
 8001762:	4603      	mov	r3, r0
 8001764:	71bb      	strb	r3, [r7, #6]
 8001766:	79bb      	ldrb	r3, [r7, #6]
 8001768:	80bb      	strh	r3, [r7, #4]
 800176a:	88bb      	ldrh	r3, [r7, #4]
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	b29a      	uxth	r2, r3
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	b29b      	uxth	r3, r3
 8001774:	4413      	add	r3, r2
 8001776:	80bb      	strh	r3, [r7, #4]
 8001778:	88bb      	ldrh	r3, [r7, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <wizphy_getphylink>:
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	2300      	movs	r3, #0
 800178a:	71fb      	strb	r3, [r7, #7]
 800178c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001790:	f000 fa32 	bl	8001bf8 <WIZCHIP_READ>
 8001794:	4603      	mov	r3, r0
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <wizphy_getphylink+0x20>
 800179e:	2301      	movs	r3, #1
 80017a0:	71fb      	strb	r3, [r7, #7]
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <wizphy_getphypmode>:
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	2300      	movs	r3, #0
 80017b6:	71fb      	strb	r3, [r7, #7]
 80017b8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80017bc:	f000 fa1c 	bl	8001bf8 <WIZCHIP_READ>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017c6:	2b30      	cmp	r3, #48	; 0x30
 80017c8:	d102      	bne.n	80017d0 <wizphy_getphypmode+0x22>
 80017ca:	2301      	movs	r3, #1
 80017cc:	71fb      	strb	r3, [r7, #7]
 80017ce:	e001      	b.n	80017d4 <wizphy_getphypmode+0x26>
 80017d0:	2300      	movs	r3, #0
 80017d2:	71fb      	strb	r3, [r7, #7]
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <wizphy_reset>:
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80017ea:	f000 fa05 	bl	8001bf8 <WIZCHIP_READ>
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017f8:	71fb      	strb	r3, [r7, #7]
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001802:	f000 fa45 	bl	8001c90 <WIZCHIP_WRITE>
 8001806:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800180a:	f000 f9f5 	bl	8001bf8 <WIZCHIP_READ>
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001818:	71fb      	strb	r3, [r7, #7]
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001822:	f000 fa35 	bl	8001c90 <WIZCHIP_WRITE>
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <wizphy_setphyconf>:
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	2300      	movs	r3, #0
 8001838:	73fb      	strb	r3, [r7, #15]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d104      	bne.n	800184c <wizphy_setphyconf+0x1e>
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001848:	73fb      	strb	r3, [r7, #15]
 800184a:	e003      	b.n	8001854 <wizphy_setphyconf+0x26>
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001852:	73fb      	strb	r3, [r7, #15]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	785b      	ldrb	r3, [r3, #1]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d104      	bne.n	8001866 <wizphy_setphyconf+0x38>
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	e019      	b.n	800189a <wizphy_setphyconf+0x6c>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	78db      	ldrb	r3, [r3, #3]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d10d      	bne.n	800188a <wizphy_setphyconf+0x5c>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	789b      	ldrb	r3, [r3, #2]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d104      	bne.n	8001880 <wizphy_setphyconf+0x52>
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	f043 0318 	orr.w	r3, r3, #24
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	e00c      	b.n	800189a <wizphy_setphyconf+0x6c>
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	f043 0308 	orr.w	r3, r3, #8
 8001886:	73fb      	strb	r3, [r7, #15]
 8001888:	e007      	b.n	800189a <wizphy_setphyconf+0x6c>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	789b      	ldrb	r3, [r3, #2]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d103      	bne.n	800189a <wizphy_setphyconf+0x6c>
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	f043 0310 	orr.w	r3, r3, #16
 8001898:	73fb      	strb	r3, [r7, #15]
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	4619      	mov	r1, r3
 800189e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80018a2:	f000 f9f5 	bl	8001c90 <WIZCHIP_WRITE>
 80018a6:	f7ff ff9b 	bl	80017e0 <wizphy_reset>
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <wizphy_getphyconf>:
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	2300      	movs	r3, #0
 80018be:	73fb      	strb	r3, [r7, #15]
 80018c0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80018c4:	f000 f998 	bl	8001bf8 <WIZCHIP_READ>
 80018c8:	4603      	mov	r3, r0
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	119b      	asrs	r3, r3, #6
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	701a      	strb	r2, [r3, #0]
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018e2:	2b20      	cmp	r3, #32
 80018e4:	d001      	beq.n	80018ea <wizphy_getphyconf+0x36>
 80018e6:	2b38      	cmp	r3, #56	; 0x38
 80018e8:	d103      	bne.n	80018f2 <wizphy_getphyconf+0x3e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	705a      	strb	r2, [r3, #1]
 80018f0:	e003      	b.n	80018fa <wizphy_getphyconf+0x46>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	705a      	strb	r2, [r3, #1]
 80018f8:	bf00      	nop
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001900:	3b10      	subs	r3, #16
 8001902:	2b10      	cmp	r3, #16
 8001904:	bf8c      	ite	hi
 8001906:	2201      	movhi	r2, #1
 8001908:	2200      	movls	r2, #0
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	2a00      	cmp	r2, #0
 800190e:	d10f      	bne.n	8001930 <wizphy_getphyconf+0x7c>
 8001910:	4a1b      	ldr	r2, [pc, #108]	; (8001980 <wizphy_getphyconf+0xcc>)
 8001912:	fa22 f303 	lsr.w	r3, r2, r3
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	bf14      	ite	ne
 800191e:	2301      	movne	r3, #1
 8001920:	2300      	moveq	r3, #0
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <wizphy_getphyconf+0x7c>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	709a      	strb	r2, [r3, #2]
 800192e:	e003      	b.n	8001938 <wizphy_getphyconf+0x84>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	709a      	strb	r2, [r3, #2]
 8001936:	bf00      	nop
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800193e:	3b08      	subs	r3, #8
 8001940:	2b18      	cmp	r3, #24
 8001942:	bf8c      	ite	hi
 8001944:	2201      	movhi	r2, #1
 8001946:	2200      	movls	r2, #0
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	2a00      	cmp	r2, #0
 800194c:	d10f      	bne.n	800196e <wizphy_getphyconf+0xba>
 800194e:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <wizphy_getphyconf+0xd0>)
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	bf14      	ite	ne
 800195c:	2301      	movne	r3, #1
 800195e:	2300      	moveq	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <wizphy_getphyconf+0xba>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	70da      	strb	r2, [r3, #3]
 800196c:	e003      	b.n	8001976 <wizphy_getphyconf+0xc2>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	70da      	strb	r2, [r3, #3]
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	00010101 	.word	0x00010101
 8001984:	01010001 	.word	0x01010001

08001988 <wizphy_setphypmode>:
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
 8001992:	2300      	movs	r3, #0
 8001994:	73fb      	strb	r3, [r7, #15]
 8001996:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800199a:	f000 f92d 	bl	8001bf8 <WIZCHIP_READ>
 800199e:	4603      	mov	r3, r0
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <wizphy_setphypmode+0x2a>
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	e030      	b.n	8001a14 <wizphy_setphypmode+0x8c>
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d104      	bne.n	80019ca <wizphy_setphypmode+0x42>
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80019c6:	73fb      	strb	r3, [r7, #15]
 80019c8:	e003      	b.n	80019d2 <wizphy_setphypmode+0x4a>
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80019d0:	73fb      	strb	r3, [r7, #15]
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	4619      	mov	r1, r3
 80019d6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80019da:	f000 f959 	bl	8001c90 <WIZCHIP_WRITE>
 80019de:	f7ff feff 	bl	80017e0 <wizphy_reset>
 80019e2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80019e6:	f000 f907 	bl	8001bf8 <WIZCHIP_READ>
 80019ea:	4603      	mov	r3, r0
 80019ec:	73fb      	strb	r3, [r7, #15]
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d106      	bne.n	8001a02 <wizphy_setphypmode+0x7a>
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d008      	beq.n	8001a10 <wizphy_setphypmode+0x88>
 80019fe:	2300      	movs	r3, #0
 8001a00:	e008      	b.n	8001a14 <wizphy_setphypmode+0x8c>
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <wizphy_setphypmode+0x88>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	e001      	b.n	8001a14 <wizphy_setphypmode+0x8c>
 8001a10:	f04f 33ff 	mov.w	r3, #4294967295
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <wizchip_setnetinfo>:
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2206      	movs	r2, #6
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001a2e:	f000 f9dd 	bl	8001dec <WIZCHIP_WRITE_BUF>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	330e      	adds	r3, #14
 8001a36:	2204      	movs	r2, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a3e:	f000 f9d5 	bl	8001dec <WIZCHIP_WRITE_BUF>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	330a      	adds	r3, #10
 8001a46:	2204      	movs	r2, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001a4e:	f000 f9cd 	bl	8001dec <WIZCHIP_WRITE_BUF>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3306      	adds	r3, #6
 8001a56:	2204      	movs	r2, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001a5e:	f000 f9c5 	bl	8001dec <WIZCHIP_WRITE_BUF>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7c9a      	ldrb	r2, [r3, #18]
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <wizchip_setnetinfo+0x78>)
 8001a68:	701a      	strb	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	7cda      	ldrb	r2, [r3, #19]
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <wizchip_setnetinfo+0x78>)
 8001a70:	705a      	strb	r2, [r3, #1]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7d1a      	ldrb	r2, [r3, #20]
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <wizchip_setnetinfo+0x78>)
 8001a78:	709a      	strb	r2, [r3, #2]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7d5a      	ldrb	r2, [r3, #21]
 8001a7e:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <wizchip_setnetinfo+0x78>)
 8001a80:	70da      	strb	r2, [r3, #3]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7d9a      	ldrb	r2, [r3, #22]
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <wizchip_setnetinfo+0x7c>)
 8001a88:	701a      	strb	r2, [r3, #0]
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200007dc 	.word	0x200007dc
 8001a98:	200007e0 	.word	0x200007e0

08001a9c <wizchip_getnetinfo>:
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2206      	movs	r2, #6
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001aae:	f000 f93d 	bl	8001d2c <WIZCHIP_READ_BUF>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	330e      	adds	r3, #14
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001abe:	f000 f935 	bl	8001d2c <WIZCHIP_READ_BUF>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	330a      	adds	r3, #10
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001ace:	f000 f92d 	bl	8001d2c <WIZCHIP_READ_BUF>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3306      	adds	r3, #6
 8001ad6:	2204      	movs	r2, #4
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001ade:	f000 f925 	bl	8001d2c <WIZCHIP_READ_BUF>
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <wizchip_getnetinfo+0x78>)
 8001ae4:	781a      	ldrb	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	749a      	strb	r2, [r3, #18]
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <wizchip_getnetinfo+0x78>)
 8001aec:	785a      	ldrb	r2, [r3, #1]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	74da      	strb	r2, [r3, #19]
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <wizchip_getnetinfo+0x78>)
 8001af4:	789a      	ldrb	r2, [r3, #2]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	751a      	strb	r2, [r3, #20]
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <wizchip_getnetinfo+0x78>)
 8001afc:	78da      	ldrb	r2, [r3, #3]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	755a      	strb	r2, [r3, #21]
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <wizchip_getnetinfo+0x7c>)
 8001b04:	781a      	ldrb	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	759a      	strb	r2, [r3, #22]
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200007dc 	.word	0x200007dc
 8001b18:	200007e0 	.word	0x200007e0

08001b1c <wizchip_setnetmode>:
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
 8001b26:	2300      	movs	r3, #0
 8001b28:	73fb      	strb	r3, [r7, #15]
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <wizchip_setnetmode+0x1e>
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295
 8001b38:	e00e      	b.n	8001b58 <wizchip_setnetmode+0x3c>
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f000 f85c 	bl	8001bf8 <WIZCHIP_READ>
 8001b40:	4603      	mov	r3, r0
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	7bfa      	ldrb	r2, [r7, #15]
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	2000      	movs	r0, #0
 8001b52:	f000 f89d 	bl	8001c90 <WIZCHIP_WRITE>
 8001b56:	2300      	movs	r3, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <wizchip_getnetmode>:
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	2000      	movs	r0, #0
 8001b66:	f000 f847 	bl	8001bf8 <WIZCHIP_READ>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <wizchip_settimeout>:
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001b82:	f000 f885 	bl	8001c90 <WIZCHIP_WRITE>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	885b      	ldrh	r3, [r3, #2]
 8001b8a:	0a1b      	lsrs	r3, r3, #8
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	4619      	mov	r1, r3
 8001b92:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001b96:	f000 f87b 	bl	8001c90 <WIZCHIP_WRITE>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	885b      	ldrh	r3, [r3, #2]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001ba6:	f000 f873 	bl	8001c90 <WIZCHIP_WRITE>
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <wizchip_gettimeout>:
 8001bb2:	b590      	push	{r4, r7, lr}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001bbe:	f000 f81b 	bl	8001bf8 <WIZCHIP_READ>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	701a      	strb	r2, [r3, #0]
 8001bca:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001bce:	f000 f813 	bl	8001bf8 <WIZCHIP_READ>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	b29c      	uxth	r4, r3
 8001bda:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001bde:	f000 f80b 	bl	8001bf8 <WIZCHIP_READ>
 8001be2:	4603      	mov	r3, r0
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	4423      	add	r3, r4
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	805a      	strh	r2, [r3, #2]
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd90      	pop	{r4, r7, pc}
	...

08001bf8 <WIZCHIP_READ>:
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <WIZCHIP_READ+0x94>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4798      	blx	r3
 8001c06:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <WIZCHIP_READ+0x94>)
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	4798      	blx	r3
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <WIZCHIP_READ+0x94>)
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <WIZCHIP_READ+0x24>
 8001c14:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <WIZCHIP_READ+0x94>)
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d114      	bne.n	8001c46 <WIZCHIP_READ+0x4e>
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <WIZCHIP_READ+0x94>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	0c12      	lsrs	r2, r2, #16
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	4610      	mov	r0, r2
 8001c28:	4798      	blx	r3
 8001c2a:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <WIZCHIP_READ+0x94>)
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	0a12      	lsrs	r2, r2, #8
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	4610      	mov	r0, r2
 8001c36:	4798      	blx	r3
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <WIZCHIP_READ+0x94>)
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	4610      	mov	r0, r2
 8001c42:	4798      	blx	r3
 8001c44:	e011      	b.n	8001c6a <WIZCHIP_READ+0x72>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	0c1b      	lsrs	r3, r3, #16
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	733b      	strb	r3, [r7, #12]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	737b      	strb	r3, [r7, #13]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	73bb      	strb	r3, [r7, #14]
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <WIZCHIP_READ+0x94>)
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	f107 020c 	add.w	r2, r7, #12
 8001c64:	2103      	movs	r1, #3
 8001c66:	4610      	mov	r0, r2
 8001c68:	4798      	blx	r3
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <WIZCHIP_READ+0x94>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	4798      	blx	r3
 8001c70:	4603      	mov	r3, r0
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <WIZCHIP_READ+0x94>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4798      	blx	r3
 8001c7a:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <WIZCHIP_READ+0x94>)
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	4798      	blx	r3
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000020 	.word	0x20000020

08001c90 <WIZCHIP_WRITE>:
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
 8001c9c:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <WIZCHIP_WRITE+0x98>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4798      	blx	r3
 8001ca2:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <WIZCHIP_WRITE+0x98>)
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	4798      	blx	r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <WIZCHIP_WRITE+0x98>)
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d119      	bne.n	8001cec <WIZCHIP_WRITE+0x5c>
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <WIZCHIP_WRITE+0x98>)
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	0c12      	lsrs	r2, r2, #16
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4798      	blx	r3
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <WIZCHIP_WRITE+0x98>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	0a12      	lsrs	r2, r2, #8
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4798      	blx	r3
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <WIZCHIP_WRITE+0x98>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4798      	blx	r3
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <WIZCHIP_WRITE+0x98>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	78fa      	ldrb	r2, [r7, #3]
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4798      	blx	r3
 8001cea:	e013      	b.n	8001d14 <WIZCHIP_WRITE+0x84>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	0c1b      	lsrs	r3, r3, #16
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	733b      	strb	r3, [r7, #12]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	0a1b      	lsrs	r3, r3, #8
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	737b      	strb	r3, [r7, #13]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	73bb      	strb	r3, [r7, #14]
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	73fb      	strb	r3, [r7, #15]
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <WIZCHIP_WRITE+0x98>)
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	f107 020c 	add.w	r2, r7, #12
 8001d0e:	2104      	movs	r1, #4
 8001d10:	4610      	mov	r0, r2
 8001d12:	4798      	blx	r3
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <WIZCHIP_WRITE+0x98>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4798      	blx	r3
 8001d1a:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <WIZCHIP_WRITE+0x98>)
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	4798      	blx	r3
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000020 	.word	0x20000020

08001d2c <WIZCHIP_READ_BUF>:
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	4613      	mov	r3, r2
 8001d38:	80fb      	strh	r3, [r7, #6]
 8001d3a:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <WIZCHIP_READ_BUF+0xbc>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	4798      	blx	r3
 8001d40:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <WIZCHIP_READ_BUF+0xbc>)
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	4798      	blx	r3
 8001d46:	4b28      	ldr	r3, [pc, #160]	; (8001de8 <WIZCHIP_READ_BUF+0xbc>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <WIZCHIP_READ_BUF+0x2a>
 8001d4e:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <WIZCHIP_READ_BUF+0xbc>)
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d126      	bne.n	8001da4 <WIZCHIP_READ_BUF+0x78>
 8001d56:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <WIZCHIP_READ_BUF+0xbc>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	0c12      	lsrs	r2, r2, #16
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	4610      	mov	r0, r2
 8001d62:	4798      	blx	r3
 8001d64:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <WIZCHIP_READ_BUF+0xbc>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	0a12      	lsrs	r2, r2, #8
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	4610      	mov	r0, r2
 8001d70:	4798      	blx	r3
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <WIZCHIP_READ_BUF+0xbc>)
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4798      	blx	r3
 8001d7e:	2300      	movs	r3, #0
 8001d80:	82fb      	strh	r3, [r7, #22]
 8001d82:	e00a      	b.n	8001d9a <WIZCHIP_READ_BUF+0x6e>
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <WIZCHIP_READ_BUF+0xbc>)
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	8afa      	ldrh	r2, [r7, #22]
 8001d8a:	68b9      	ldr	r1, [r7, #8]
 8001d8c:	188c      	adds	r4, r1, r2
 8001d8e:	4798      	blx	r3
 8001d90:	4603      	mov	r3, r0
 8001d92:	7023      	strb	r3, [r4, #0]
 8001d94:	8afb      	ldrh	r3, [r7, #22]
 8001d96:	3301      	adds	r3, #1
 8001d98:	82fb      	strh	r3, [r7, #22]
 8001d9a:	8afa      	ldrh	r2, [r7, #22]
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d3f0      	bcc.n	8001d84 <WIZCHIP_READ_BUF+0x58>
 8001da2:	e017      	b.n	8001dd4 <WIZCHIP_READ_BUF+0xa8>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	0c1b      	lsrs	r3, r3, #16
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	743b      	strb	r3, [r7, #16]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	747b      	strb	r3, [r7, #17]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	74bb      	strb	r3, [r7, #18]
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <WIZCHIP_READ_BUF+0xbc>)
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	f107 0210 	add.w	r2, r7, #16
 8001dc2:	2103      	movs	r1, #3
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4798      	blx	r3
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <WIZCHIP_READ_BUF+0xbc>)
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	88fa      	ldrh	r2, [r7, #6]
 8001dce:	4611      	mov	r1, r2
 8001dd0:	68b8      	ldr	r0, [r7, #8]
 8001dd2:	4798      	blx	r3
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <WIZCHIP_READ_BUF+0xbc>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4798      	blx	r3
 8001dda:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <WIZCHIP_READ_BUF+0xbc>)
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	4798      	blx	r3
 8001de0:	bf00      	nop
 8001de2:	371c      	adds	r7, #28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd90      	pop	{r4, r7, pc}
 8001de8:	20000020 	.word	0x20000020

08001dec <WIZCHIP_WRITE_BUF>:
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	4613      	mov	r3, r2
 8001df8:	80fb      	strh	r3, [r7, #6]
 8001dfa:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	4798      	blx	r3
 8001e00:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	4798      	blx	r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d126      	bne.n	8001e64 <WIZCHIP_WRITE_BUF+0x78>
 8001e16:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	0c12      	lsrs	r2, r2, #16
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	4610      	mov	r0, r2
 8001e22:	4798      	blx	r3
 8001e24:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	0a12      	lsrs	r2, r2, #8
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4798      	blx	r3
 8001e32:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4798      	blx	r3
 8001e3e:	2300      	movs	r3, #0
 8001e40:	82fb      	strh	r3, [r7, #22]
 8001e42:	e00a      	b.n	8001e5a <WIZCHIP_WRITE_BUF+0x6e>
 8001e44:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	8afa      	ldrh	r2, [r7, #22]
 8001e4a:	68b9      	ldr	r1, [r7, #8]
 8001e4c:	440a      	add	r2, r1
 8001e4e:	7812      	ldrb	r2, [r2, #0]
 8001e50:	4610      	mov	r0, r2
 8001e52:	4798      	blx	r3
 8001e54:	8afb      	ldrh	r3, [r7, #22]
 8001e56:	3301      	adds	r3, #1
 8001e58:	82fb      	strh	r3, [r7, #22]
 8001e5a:	8afa      	ldrh	r2, [r7, #22]
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d3f0      	bcc.n	8001e44 <WIZCHIP_WRITE_BUF+0x58>
 8001e62:	e017      	b.n	8001e94 <WIZCHIP_WRITE_BUF+0xa8>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	0c1b      	lsrs	r3, r3, #16
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	743b      	strb	r3, [r7, #16]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	747b      	strb	r3, [r7, #17]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	74bb      	strb	r3, [r7, #18]
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	f107 0210 	add.w	r2, r7, #16
 8001e82:	2103      	movs	r1, #3
 8001e84:	4610      	mov	r0, r2
 8001e86:	4798      	blx	r3
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	88fa      	ldrh	r2, [r7, #6]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	68b8      	ldr	r0, [r7, #8]
 8001e92:	4798      	blx	r3
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4798      	blx	r3
 8001e9a:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	4798      	blx	r3
 8001ea0:	bf00      	nop
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000020 	.word	0x20000020

08001eac <getSn_TX_FSR>:
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	81fb      	strh	r3, [r7, #14]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	81bb      	strh	r3, [r7, #12]
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fe94 	bl	8001bf8 <WIZCHIP_READ>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	81bb      	strh	r3, [r7, #12]
 8001ed4:	89bb      	ldrh	r3, [r7, #12]
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	b29c      	uxth	r4, r3
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	3301      	adds	r3, #1
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fe86 	bl	8001bf8 <WIZCHIP_READ>
 8001eec:	4603      	mov	r3, r0
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	4423      	add	r3, r4
 8001ef2:	81bb      	strh	r3, [r7, #12]
 8001ef4:	89bb      	ldrh	r3, [r7, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d01a      	beq.n	8001f30 <getSn_TX_FSR+0x84>
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	3301      	adds	r3, #1
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fe76 	bl	8001bf8 <WIZCHIP_READ>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	81fb      	strh	r3, [r7, #14]
 8001f10:	89fb      	ldrh	r3, [r7, #14]
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	b29c      	uxth	r4, r3
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fe68 	bl	8001bf8 <WIZCHIP_READ>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	4423      	add	r3, r4
 8001f2e:	81fb      	strh	r3, [r7, #14]
 8001f30:	89fa      	ldrh	r2, [r7, #14]
 8001f32:	89bb      	ldrh	r3, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d1c2      	bne.n	8001ebe <getSn_TX_FSR+0x12>
 8001f38:	89fb      	ldrh	r3, [r7, #14]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd90      	pop	{r4, r7, pc}

08001f42 <getSn_RX_RSR>:
 8001f42:	b590      	push	{r4, r7, lr}
 8001f44:	b085      	sub	sp, #20
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	71fb      	strb	r3, [r7, #7]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	81fb      	strh	r3, [r7, #14]
 8001f50:	2300      	movs	r3, #0
 8001f52:	81bb      	strh	r3, [r7, #12]
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	3301      	adds	r3, #1
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fe49 	bl	8001bf8 <WIZCHIP_READ>
 8001f66:	4603      	mov	r3, r0
 8001f68:	81bb      	strh	r3, [r7, #12]
 8001f6a:	89bb      	ldrh	r3, [r7, #12]
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	b29c      	uxth	r4, r3
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	3301      	adds	r3, #1
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fe3b 	bl	8001bf8 <WIZCHIP_READ>
 8001f82:	4603      	mov	r3, r0
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	4423      	add	r3, r4
 8001f88:	81bb      	strh	r3, [r7, #12]
 8001f8a:	89bb      	ldrh	r3, [r7, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01a      	beq.n	8001fc6 <getSn_RX_RSR+0x84>
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	3301      	adds	r3, #1
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fe2b 	bl	8001bf8 <WIZCHIP_READ>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	81fb      	strh	r3, [r7, #14]
 8001fa6:	89fb      	ldrh	r3, [r7, #14]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	b29c      	uxth	r4, r3
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fe1d 	bl	8001bf8 <WIZCHIP_READ>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	4423      	add	r3, r4
 8001fc4:	81fb      	strh	r3, [r7, #14]
 8001fc6:	89fa      	ldrh	r2, [r7, #14]
 8001fc8:	89bb      	ldrh	r3, [r7, #12]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d1c2      	bne.n	8001f54 <getSn_RX_RSR+0x12>
 8001fce:	89fb      	ldrh	r3, [r7, #14]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd90      	pop	{r4, r7, pc}

08001fd8 <wiz_send_data>:
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	6039      	str	r1, [r7, #0]
 8001fe2:	71fb      	strb	r3, [r7, #7]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	80bb      	strh	r3, [r7, #4]
 8001fe8:	2300      	movs	r3, #0
 8001fea:	81fb      	strh	r3, [r7, #14]
 8001fec:	2300      	movs	r3, #0
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	88bb      	ldrh	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d048      	beq.n	8002088 <wiz_send_data+0xb0>
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fdf8 	bl	8001bf8 <WIZCHIP_READ>
 8002008:	4603      	mov	r3, r0
 800200a:	b29b      	uxth	r3, r3
 800200c:	021b      	lsls	r3, r3, #8
 800200e:	b29c      	uxth	r4, r3
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	3301      	adds	r3, #1
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fdeb 	bl	8001bf8 <WIZCHIP_READ>
 8002022:	4603      	mov	r3, r0
 8002024:	b29b      	uxth	r3, r3
 8002026:	4423      	add	r3, r4
 8002028:	81fb      	strh	r3, [r7, #14]
 800202a:	89fb      	ldrh	r3, [r7, #14]
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	79fa      	ldrb	r2, [r7, #7]
 8002030:	0092      	lsls	r2, r2, #2
 8002032:	3202      	adds	r2, #2
 8002034:	00d2      	lsls	r2, r2, #3
 8002036:	4413      	add	r3, r2
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	88bb      	ldrh	r3, [r7, #4]
 800203c:	461a      	mov	r2, r3
 800203e:	6839      	ldr	r1, [r7, #0]
 8002040:	68b8      	ldr	r0, [r7, #8]
 8002042:	f7ff fed3 	bl	8001dec <WIZCHIP_WRITE_BUF>
 8002046:	89fa      	ldrh	r2, [r7, #14]
 8002048:	88bb      	ldrh	r3, [r7, #4]
 800204a:	4413      	add	r3, r2
 800204c:	81fb      	strh	r3, [r7, #14]
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	3301      	adds	r3, #1
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800205a:	461a      	mov	r2, r3
 800205c:	89fb      	ldrh	r3, [r7, #14]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	b29b      	uxth	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	4619      	mov	r1, r3
 8002066:	4610      	mov	r0, r2
 8002068:	f7ff fe12 	bl	8001c90 <WIZCHIP_WRITE>
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	3301      	adds	r3, #1
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002078:	461a      	mov	r2, r3
 800207a:	89fb      	ldrh	r3, [r7, #14]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	4619      	mov	r1, r3
 8002080:	4610      	mov	r0, r2
 8002082:	f7ff fe05 	bl	8001c90 <WIZCHIP_WRITE>
 8002086:	e000      	b.n	800208a <wiz_send_data+0xb2>
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	bd90      	pop	{r4, r7, pc}

08002090 <wiz_recv_data>:
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
 800209c:	4613      	mov	r3, r2
 800209e:	80bb      	strh	r3, [r7, #4]
 80020a0:	2300      	movs	r3, #0
 80020a2:	81fb      	strh	r3, [r7, #14]
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	88bb      	ldrh	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d048      	beq.n	8002140 <wiz_recv_data+0xb0>
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	3301      	adds	r3, #1
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fd9c 	bl	8001bf8 <WIZCHIP_READ>
 80020c0:	4603      	mov	r3, r0
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	b29c      	uxth	r4, r3
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	3301      	adds	r3, #1
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fd8f 	bl	8001bf8 <WIZCHIP_READ>
 80020da:	4603      	mov	r3, r0
 80020dc:	b29b      	uxth	r3, r3
 80020de:	4423      	add	r3, r4
 80020e0:	81fb      	strh	r3, [r7, #14]
 80020e2:	89fb      	ldrh	r3, [r7, #14]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	79fa      	ldrb	r2, [r7, #7]
 80020e8:	0092      	lsls	r2, r2, #2
 80020ea:	3203      	adds	r2, #3
 80020ec:	00d2      	lsls	r2, r2, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	88bb      	ldrh	r3, [r7, #4]
 80020f4:	461a      	mov	r2, r3
 80020f6:	6839      	ldr	r1, [r7, #0]
 80020f8:	68b8      	ldr	r0, [r7, #8]
 80020fa:	f7ff fe17 	bl	8001d2c <WIZCHIP_READ_BUF>
 80020fe:	89fa      	ldrh	r2, [r7, #14]
 8002100:	88bb      	ldrh	r3, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	81fb      	strh	r3, [r7, #14]
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	3301      	adds	r3, #1
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002112:	461a      	mov	r2, r3
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	0a1b      	lsrs	r3, r3, #8
 8002118:	b29b      	uxth	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	4619      	mov	r1, r3
 800211e:	4610      	mov	r0, r2
 8002120:	f7ff fdb6 	bl	8001c90 <WIZCHIP_WRITE>
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	3301      	adds	r3, #1
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002130:	461a      	mov	r2, r3
 8002132:	89fb      	ldrh	r3, [r7, #14]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	4619      	mov	r1, r3
 8002138:	4610      	mov	r0, r2
 800213a:	f7ff fda9 	bl	8001c90 <WIZCHIP_WRITE>
 800213e:	e000      	b.n	8002142 <wiz_recv_data+0xb2>
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	bd90      	pop	{r4, r7, pc}

08002148 <Reset_Handler>:
 8002148:	f7fe fa3c 	bl	80005c4 <SystemInit>
 800214c:	480b      	ldr	r0, [pc, #44]	; (800217c <LoopFillZerobss+0xe>)
 800214e:	490c      	ldr	r1, [pc, #48]	; (8002180 <LoopFillZerobss+0x12>)
 8002150:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <LoopFillZerobss+0x16>)
 8002152:	2300      	movs	r3, #0
 8002154:	e002      	b.n	800215c <LoopCopyDataInit>

08002156 <CopyDataInit>:
 8002156:	58d4      	ldr	r4, [r2, r3]
 8002158:	50c4      	str	r4, [r0, r3]
 800215a:	3304      	adds	r3, #4

0800215c <LoopCopyDataInit>:
 800215c:	18c4      	adds	r4, r0, r3
 800215e:	428c      	cmp	r4, r1
 8002160:	d3f9      	bcc.n	8002156 <CopyDataInit>
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <LoopFillZerobss+0x1a>)
 8002164:	4c09      	ldr	r4, [pc, #36]	; (800218c <LoopFillZerobss+0x1e>)
 8002166:	2300      	movs	r3, #0
 8002168:	e001      	b.n	800216e <LoopFillZerobss>

0800216a <FillZerobss>:
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	3204      	adds	r2, #4

0800216e <LoopFillZerobss>:
 800216e:	42a2      	cmp	r2, r4
 8002170:	d3fb      	bcc.n	800216a <FillZerobss>
 8002172:	f002 fed3 	bl	8004f1c <__libc_init_array>
 8002176:	f7fe f841 	bl	80001fc <main>
 800217a:	4770      	bx	lr
 800217c:	20000000 	.word	0x20000000
 8002180:	200000a8 	.word	0x200000a8
 8002184:	08005238 	.word	0x08005238
 8002188:	200000a8 	.word	0x200000a8
 800218c:	20001674 	.word	0x20001674

08002190 <ADC1_2_IRQHandler>:
 8002190:	e7fe      	b.n	8002190 <ADC1_2_IRQHandler>
	...

08002194 <HAL_Init>:
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HAL_Init+0x28>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a07      	ldr	r2, [pc, #28]	; (80021bc <HAL_Init+0x28>)
 800219e:	f043 0310 	orr.w	r3, r3, #16
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	2003      	movs	r0, #3
 80021a6:	f000 f92b 	bl	8002400 <HAL_NVIC_SetPriorityGrouping>
 80021aa:	200f      	movs	r0, #15
 80021ac:	f000 f808 	bl	80021c0 <HAL_InitTick>
 80021b0:	f7fe f962 	bl	8000478 <HAL_MspInit>
 80021b4:	2300      	movs	r3, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40022000 	.word	0x40022000

080021c0 <HAL_InitTick>:
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_InitTick+0x54>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_InitTick+0x58>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f935 	bl	800244e <HAL_SYSTICK_Config>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_InitTick+0x2e>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00e      	b.n	800220c <HAL_InitTick+0x4c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b0f      	cmp	r3, #15
 80021f2:	d80a      	bhi.n	800220a <HAL_InitTick+0x4a>
 80021f4:	2200      	movs	r2, #0
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f000 f90b 	bl	8002416 <HAL_NVIC_SetPriority>
 8002200:	4a06      	ldr	r2, [pc, #24]	; (800221c <HAL_InitTick+0x5c>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <HAL_InitTick+0x4c>
 800220a:	2301      	movs	r3, #1
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000018 	.word	0x20000018
 8002218:	20000050 	.word	0x20000050
 800221c:	2000004c 	.word	0x2000004c

08002220 <HAL_IncTick>:
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_IncTick+0x1c>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_IncTick+0x20>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4413      	add	r3, r2
 8002230:	4a03      	ldr	r2, [pc, #12]	; (8002240 <HAL_IncTick+0x20>)
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	20000050 	.word	0x20000050
 8002240:	200007e4 	.word	0x200007e4

08002244 <HAL_GetTick>:
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
 8002248:	4b02      	ldr	r3, [pc, #8]	; (8002254 <HAL_GetTick+0x10>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	200007e4 	.word	0x200007e4

08002258 <HAL_Delay>:
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	f7ff fff0 	bl	8002244 <HAL_GetTick>
 8002264:	60b8      	str	r0, [r7, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002270:	d005      	beq.n	800227e <HAL_Delay+0x26>
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_Delay+0x44>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4413      	add	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	bf00      	nop
 8002280:	f7ff ffe0 	bl	8002244 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	429a      	cmp	r2, r3
 800228e:	d8f7      	bhi.n	8002280 <HAL_Delay+0x28>
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000050 	.word	0x20000050

080022a0 <__NVIC_SetPriorityGrouping>:
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <__NVIC_SetPriorityGrouping+0x44>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022bc:	4013      	ands	r3, r2
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	021a      	lsls	r2, r3, #8
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <__NVIC_SetPriorityGrouping+0x44>)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	60d3      	str	r3, [r2, #12]
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_GetPriorityGrouping>:
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <__NVIC_GetPriorityGrouping+0x18>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	0a1b      	lsrs	r3, r3, #8
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <__NVIC_SetPriority>:
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	2b00      	cmp	r3, #0
 8002316:	db0a      	blt.n	800232e <__NVIC_SetPriority+0x2a>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	490c      	ldr	r1, [pc, #48]	; (8002350 <__NVIC_SetPriority+0x4c>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	0112      	lsls	r2, r2, #4
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	440b      	add	r3, r1
 8002328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800232c:	e00a      	b.n	8002344 <__NVIC_SetPriority+0x40>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4908      	ldr	r1, [pc, #32]	; (8002354 <__NVIC_SetPriority+0x50>)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	3b04      	subs	r3, #4
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	440b      	add	r3, r1
 8002342:	761a      	strb	r2, [r3, #24]
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	e000e100 	.word	0xe000e100
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <NVIC_EncodePriority>:
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	61fb      	str	r3, [r7, #28]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f1c3 0307 	rsb	r3, r3, #7
 8002372:	2b04      	cmp	r3, #4
 8002374:	bf28      	it	cs
 8002376:	2304      	movcs	r3, #4
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3304      	adds	r3, #4
 800237e:	2b06      	cmp	r3, #6
 8002380:	d902      	bls.n	8002388 <NVIC_EncodePriority+0x30>
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3b03      	subs	r3, #3
 8002386:	e000      	b.n	800238a <NVIC_EncodePriority+0x32>
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	f04f 32ff 	mov.w	r2, #4294967295
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	401a      	ands	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	409a      	lsls	r2, r3
 80023a0:	f04f 31ff 	mov.w	r1, #4294967295
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	43d9      	mvns	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	400b      	ands	r3, r1
 80023b0:	4313      	orrs	r3, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	3724      	adds	r7, #36	; 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <SysTick_Config>:
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023cc:	d301      	bcc.n	80023d2 <SysTick_Config+0x16>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00f      	b.n	80023f2 <SysTick_Config+0x36>
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <SysTick_Config+0x40>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	6053      	str	r3, [r2, #4]
 80023da:	210f      	movs	r1, #15
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	f7ff ff90 	bl	8002304 <__NVIC_SetPriority>
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <SysTick_Config+0x40>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <SysTick_Config+0x40>)
 80023ec:	2207      	movs	r2, #7
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	2300      	movs	r3, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	e000e010 	.word	0xe000e010

08002400 <HAL_NVIC_SetPriorityGrouping>:
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff49 	bl	80022a0 <__NVIC_SetPriorityGrouping>
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_SetPriority>:
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	f7ff ff5e 	bl	80022e8 <__NVIC_GetPriorityGrouping>
 800242c:	6178      	str	r0, [r7, #20]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	6978      	ldr	r0, [r7, #20]
 8002434:	f7ff ff90 	bl	8002358 <NVIC_EncodePriority>
 8002438:	4602      	mov	r2, r0
 800243a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff5f 	bl	8002304 <__NVIC_SetPriority>
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_SYSTICK_Config>:
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ffb0 	bl	80023bc <SysTick_Config>
 800245c:	4603      	mov	r3, r0
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_GPIO_Init>:
 8002468:	b480      	push	{r7}
 800246a:	b08b      	sub	sp, #44	; 0x2c
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
 8002476:	2300      	movs	r3, #0
 8002478:	623b      	str	r3, [r7, #32]
 800247a:	e169      	b.n	8002750 <HAL_GPIO_Init+0x2e8>
 800247c:	2201      	movs	r2, #1
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	429a      	cmp	r2, r3
 8002496:	f040 8158 	bne.w	800274a <HAL_GPIO_Init+0x2e2>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4a9a      	ldr	r2, [pc, #616]	; (8002708 <HAL_GPIO_Init+0x2a0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d05e      	beq.n	8002562 <HAL_GPIO_Init+0xfa>
 80024a4:	4a98      	ldr	r2, [pc, #608]	; (8002708 <HAL_GPIO_Init+0x2a0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d875      	bhi.n	8002596 <HAL_GPIO_Init+0x12e>
 80024aa:	4a98      	ldr	r2, [pc, #608]	; (800270c <HAL_GPIO_Init+0x2a4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d058      	beq.n	8002562 <HAL_GPIO_Init+0xfa>
 80024b0:	4a96      	ldr	r2, [pc, #600]	; (800270c <HAL_GPIO_Init+0x2a4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d86f      	bhi.n	8002596 <HAL_GPIO_Init+0x12e>
 80024b6:	4a96      	ldr	r2, [pc, #600]	; (8002710 <HAL_GPIO_Init+0x2a8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d052      	beq.n	8002562 <HAL_GPIO_Init+0xfa>
 80024bc:	4a94      	ldr	r2, [pc, #592]	; (8002710 <HAL_GPIO_Init+0x2a8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d869      	bhi.n	8002596 <HAL_GPIO_Init+0x12e>
 80024c2:	4a94      	ldr	r2, [pc, #592]	; (8002714 <HAL_GPIO_Init+0x2ac>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d04c      	beq.n	8002562 <HAL_GPIO_Init+0xfa>
 80024c8:	4a92      	ldr	r2, [pc, #584]	; (8002714 <HAL_GPIO_Init+0x2ac>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d863      	bhi.n	8002596 <HAL_GPIO_Init+0x12e>
 80024ce:	4a92      	ldr	r2, [pc, #584]	; (8002718 <HAL_GPIO_Init+0x2b0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d046      	beq.n	8002562 <HAL_GPIO_Init+0xfa>
 80024d4:	4a90      	ldr	r2, [pc, #576]	; (8002718 <HAL_GPIO_Init+0x2b0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d85d      	bhi.n	8002596 <HAL_GPIO_Init+0x12e>
 80024da:	2b12      	cmp	r3, #18
 80024dc:	d82a      	bhi.n	8002534 <HAL_GPIO_Init+0xcc>
 80024de:	2b12      	cmp	r3, #18
 80024e0:	d859      	bhi.n	8002596 <HAL_GPIO_Init+0x12e>
 80024e2:	a201      	add	r2, pc, #4	; (adr r2, 80024e8 <HAL_GPIO_Init+0x80>)
 80024e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e8:	08002563 	.word	0x08002563
 80024ec:	0800253d 	.word	0x0800253d
 80024f0:	0800254f 	.word	0x0800254f
 80024f4:	08002591 	.word	0x08002591
 80024f8:	08002597 	.word	0x08002597
 80024fc:	08002597 	.word	0x08002597
 8002500:	08002597 	.word	0x08002597
 8002504:	08002597 	.word	0x08002597
 8002508:	08002597 	.word	0x08002597
 800250c:	08002597 	.word	0x08002597
 8002510:	08002597 	.word	0x08002597
 8002514:	08002597 	.word	0x08002597
 8002518:	08002597 	.word	0x08002597
 800251c:	08002597 	.word	0x08002597
 8002520:	08002597 	.word	0x08002597
 8002524:	08002597 	.word	0x08002597
 8002528:	08002597 	.word	0x08002597
 800252c:	08002545 	.word	0x08002545
 8002530:	08002559 	.word	0x08002559
 8002534:	4a79      	ldr	r2, [pc, #484]	; (800271c <HAL_GPIO_Init+0x2b4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_GPIO_Init+0xfa>
 800253a:	e02c      	b.n	8002596 <HAL_GPIO_Init+0x12e>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	623b      	str	r3, [r7, #32]
 8002542:	e029      	b.n	8002598 <HAL_GPIO_Init+0x130>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	3304      	adds	r3, #4
 800254a:	623b      	str	r3, [r7, #32]
 800254c:	e024      	b.n	8002598 <HAL_GPIO_Init+0x130>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	3308      	adds	r3, #8
 8002554:	623b      	str	r3, [r7, #32]
 8002556:	e01f      	b.n	8002598 <HAL_GPIO_Init+0x130>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	330c      	adds	r3, #12
 800255e:	623b      	str	r3, [r7, #32]
 8002560:	e01a      	b.n	8002598 <HAL_GPIO_Init+0x130>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d102      	bne.n	8002570 <HAL_GPIO_Init+0x108>
 800256a:	2304      	movs	r3, #4
 800256c:	623b      	str	r3, [r7, #32]
 800256e:	e013      	b.n	8002598 <HAL_GPIO_Init+0x130>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d105      	bne.n	8002584 <HAL_GPIO_Init+0x11c>
 8002578:	2308      	movs	r3, #8
 800257a:	623b      	str	r3, [r7, #32]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	611a      	str	r2, [r3, #16]
 8002582:	e009      	b.n	8002598 <HAL_GPIO_Init+0x130>
 8002584:	2308      	movs	r3, #8
 8002586:	623b      	str	r3, [r7, #32]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	615a      	str	r2, [r3, #20]
 800258e:	e003      	b.n	8002598 <HAL_GPIO_Init+0x130>
 8002590:	2300      	movs	r3, #0
 8002592:	623b      	str	r3, [r7, #32]
 8002594:	e000      	b.n	8002598 <HAL_GPIO_Init+0x130>
 8002596:	bf00      	nop
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2bff      	cmp	r3, #255	; 0xff
 800259c:	d801      	bhi.n	80025a2 <HAL_GPIO_Init+0x13a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	e001      	b.n	80025a6 <HAL_GPIO_Init+0x13e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3304      	adds	r3, #4
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2bff      	cmp	r3, #255	; 0xff
 80025ac:	d802      	bhi.n	80025b4 <HAL_GPIO_Init+0x14c>
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	e002      	b.n	80025ba <HAL_GPIO_Init+0x152>
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	3b08      	subs	r3, #8
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	210f      	movs	r1, #15
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	fa01 f303 	lsl.w	r3, r1, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	401a      	ands	r2, r3
 80025cc:	6a39      	ldr	r1, [r7, #32]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	431a      	orrs	r2, r3
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 80b1 	beq.w	800274a <HAL_GPIO_Init+0x2e2>
 80025e8:	4b4d      	ldr	r3, [pc, #308]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	4a4c      	ldr	r2, [pc, #304]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6193      	str	r3, [r2, #24]
 80025f4:	4b4a      	ldr	r3, [pc, #296]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	4a48      	ldr	r2, [pc, #288]	; (8002724 <HAL_GPIO_Init+0x2bc>)
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	089b      	lsrs	r3, r3, #2
 8002606:	3302      	adds	r3, #2
 8002608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	220f      	movs	r2, #15
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4013      	ands	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a40      	ldr	r2, [pc, #256]	; (8002728 <HAL_GPIO_Init+0x2c0>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d013      	beq.n	8002654 <HAL_GPIO_Init+0x1ec>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a3f      	ldr	r2, [pc, #252]	; (800272c <HAL_GPIO_Init+0x2c4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00d      	beq.n	8002650 <HAL_GPIO_Init+0x1e8>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a3e      	ldr	r2, [pc, #248]	; (8002730 <HAL_GPIO_Init+0x2c8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d007      	beq.n	800264c <HAL_GPIO_Init+0x1e4>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a3d      	ldr	r2, [pc, #244]	; (8002734 <HAL_GPIO_Init+0x2cc>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d101      	bne.n	8002648 <HAL_GPIO_Init+0x1e0>
 8002644:	2303      	movs	r3, #3
 8002646:	e006      	b.n	8002656 <HAL_GPIO_Init+0x1ee>
 8002648:	2304      	movs	r3, #4
 800264a:	e004      	b.n	8002656 <HAL_GPIO_Init+0x1ee>
 800264c:	2302      	movs	r3, #2
 800264e:	e002      	b.n	8002656 <HAL_GPIO_Init+0x1ee>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <HAL_GPIO_Init+0x1ee>
 8002654:	2300      	movs	r3, #0
 8002656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002658:	f002 0203 	and.w	r2, r2, #3
 800265c:	0092      	lsls	r2, r2, #2
 800265e:	4093      	lsls	r3, r2
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	492f      	ldr	r1, [pc, #188]	; (8002724 <HAL_GPIO_Init+0x2bc>)
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d006      	beq.n	800268e <HAL_GPIO_Init+0x226>
 8002680:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <HAL_GPIO_Init+0x2d0>)
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	492c      	ldr	r1, [pc, #176]	; (8002738 <HAL_GPIO_Init+0x2d0>)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	608b      	str	r3, [r1, #8]
 800268c:	e006      	b.n	800269c <HAL_GPIO_Init+0x234>
 800268e:	4b2a      	ldr	r3, [pc, #168]	; (8002738 <HAL_GPIO_Init+0x2d0>)
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	43db      	mvns	r3, r3
 8002696:	4928      	ldr	r1, [pc, #160]	; (8002738 <HAL_GPIO_Init+0x2d0>)
 8002698:	4013      	ands	r3, r2
 800269a:	608b      	str	r3, [r1, #8]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d006      	beq.n	80026b6 <HAL_GPIO_Init+0x24e>
 80026a8:	4b23      	ldr	r3, [pc, #140]	; (8002738 <HAL_GPIO_Init+0x2d0>)
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	4922      	ldr	r1, [pc, #136]	; (8002738 <HAL_GPIO_Init+0x2d0>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60cb      	str	r3, [r1, #12]
 80026b4:	e006      	b.n	80026c4 <HAL_GPIO_Init+0x25c>
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <HAL_GPIO_Init+0x2d0>)
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	43db      	mvns	r3, r3
 80026be:	491e      	ldr	r1, [pc, #120]	; (8002738 <HAL_GPIO_Init+0x2d0>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	60cb      	str	r3, [r1, #12]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d006      	beq.n	80026de <HAL_GPIO_Init+0x276>
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <HAL_GPIO_Init+0x2d0>)
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	4918      	ldr	r1, [pc, #96]	; (8002738 <HAL_GPIO_Init+0x2d0>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
 80026dc:	e006      	b.n	80026ec <HAL_GPIO_Init+0x284>
 80026de:	4b16      	ldr	r3, [pc, #88]	; (8002738 <HAL_GPIO_Init+0x2d0>)
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	4914      	ldr	r1, [pc, #80]	; (8002738 <HAL_GPIO_Init+0x2d0>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d021      	beq.n	800273c <HAL_GPIO_Init+0x2d4>
 80026f8:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <HAL_GPIO_Init+0x2d0>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	490e      	ldr	r1, [pc, #56]	; (8002738 <HAL_GPIO_Init+0x2d0>)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]
 8002704:	e021      	b.n	800274a <HAL_GPIO_Init+0x2e2>
 8002706:	bf00      	nop
 8002708:	10320000 	.word	0x10320000
 800270c:	10310000 	.word	0x10310000
 8002710:	10220000 	.word	0x10220000
 8002714:	10210000 	.word	0x10210000
 8002718:	10120000 	.word	0x10120000
 800271c:	10110000 	.word	0x10110000
 8002720:	40021000 	.word	0x40021000
 8002724:	40010000 	.word	0x40010000
 8002728:	40010800 	.word	0x40010800
 800272c:	40010c00 	.word	0x40010c00
 8002730:	40011000 	.word	0x40011000
 8002734:	40011400 	.word	0x40011400
 8002738:	40010400 	.word	0x40010400
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_GPIO_Init+0x304>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	43db      	mvns	r3, r3
 8002744:	4909      	ldr	r1, [pc, #36]	; (800276c <HAL_GPIO_Init+0x304>)
 8002746:	4013      	ands	r3, r2
 8002748:	600b      	str	r3, [r1, #0]
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	3301      	adds	r3, #1
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	fa22 f303 	lsr.w	r3, r2, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	f47f ae8e 	bne.w	800247c <HAL_GPIO_Init+0x14>
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	372c      	adds	r7, #44	; 0x2c
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	40010400 	.word	0x40010400

08002770 <HAL_GPIO_ReadPin>:
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	807b      	strh	r3, [r7, #2]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	887b      	ldrh	r3, [r7, #2]
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <HAL_GPIO_ReadPin+0x1e>
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
 800278c:	e001      	b.n	8002792 <HAL_GPIO_ReadPin+0x22>
 800278e:	2300      	movs	r3, #0
 8002790:	73fb      	strb	r3, [r7, #15]
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	4618      	mov	r0, r3
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <HAL_GPIO_WritePin>:
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	807b      	strh	r3, [r7, #2]
 80027aa:	4613      	mov	r3, r2
 80027ac:	707b      	strb	r3, [r7, #1]
 80027ae:	787b      	ldrb	r3, [r7, #1]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_GPIO_WritePin+0x1e>
 80027b4:	887a      	ldrh	r2, [r7, #2]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	611a      	str	r2, [r3, #16]
 80027ba:	e003      	b.n	80027c4 <HAL_GPIO_WritePin+0x26>
 80027bc:	887b      	ldrh	r3, [r7, #2]
 80027be:	041a      	lsls	r2, r3, #16
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	611a      	str	r2, [r3, #16]
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <HAL_GPIO_TogglePin>:
 80027ce:	b480      	push	{r7}
 80027d0:	b085      	sub	sp, #20
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	460b      	mov	r3, r1
 80027d8:	807b      	strh	r3, [r7, #2]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	887a      	ldrh	r2, [r7, #2]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4013      	ands	r3, r2
 80027e6:	041a      	lsls	r2, r3, #16
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	43d9      	mvns	r1, r3
 80027ec:	887b      	ldrh	r3, [r7, #2]
 80027ee:	400b      	ands	r3, r1
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	611a      	str	r2, [r3, #16]
 80027f6:	bf00      	nop
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <HAL_RCC_OscConfig>:
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_OscConfig+0x12>
 800280e:	2301      	movs	r3, #1
 8002810:	e272      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 8087 	beq.w	800292e <HAL_RCC_OscConfig+0x12e>
 8002820:	4b92      	ldr	r3, [pc, #584]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 030c 	and.w	r3, r3, #12
 8002828:	2b04      	cmp	r3, #4
 800282a:	d00c      	beq.n	8002846 <HAL_RCC_OscConfig+0x46>
 800282c:	4b8f      	ldr	r3, [pc, #572]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 030c 	and.w	r3, r3, #12
 8002834:	2b08      	cmp	r3, #8
 8002836:	d112      	bne.n	800285e <HAL_RCC_OscConfig+0x5e>
 8002838:	4b8c      	ldr	r3, [pc, #560]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002844:	d10b      	bne.n	800285e <HAL_RCC_OscConfig+0x5e>
 8002846:	4b89      	ldr	r3, [pc, #548]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d06c      	beq.n	800292c <HAL_RCC_OscConfig+0x12c>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d168      	bne.n	800292c <HAL_RCC_OscConfig+0x12c>
 800285a:	2301      	movs	r3, #1
 800285c:	e24c      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002866:	d106      	bne.n	8002876 <HAL_RCC_OscConfig+0x76>
 8002868:	4b80      	ldr	r3, [pc, #512]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a7f      	ldr	r2, [pc, #508]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800286e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	e02e      	b.n	80028d4 <HAL_RCC_OscConfig+0xd4>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x98>
 800287e:	4b7b      	ldr	r3, [pc, #492]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a7a      	ldr	r2, [pc, #488]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	4b78      	ldr	r3, [pc, #480]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a77      	ldr	r2, [pc, #476]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	e01d      	b.n	80028d4 <HAL_RCC_OscConfig+0xd4>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a0:	d10c      	bne.n	80028bc <HAL_RCC_OscConfig+0xbc>
 80028a2:	4b72      	ldr	r3, [pc, #456]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a71      	ldr	r2, [pc, #452]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	4b6f      	ldr	r3, [pc, #444]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a6e      	ldr	r2, [pc, #440]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e00b      	b.n	80028d4 <HAL_RCC_OscConfig+0xd4>
 80028bc:	4b6b      	ldr	r3, [pc, #428]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a6a      	ldr	r2, [pc, #424]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	4b68      	ldr	r3, [pc, #416]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a67      	ldr	r2, [pc, #412]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d013      	beq.n	8002904 <HAL_RCC_OscConfig+0x104>
 80028dc:	f7ff fcb2 	bl	8002244 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0xf6>
 80028e4:	f7ff fcae 	bl	8002244 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	; 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0xf6>
 80028f2:	2303      	movs	r3, #3
 80028f4:	e200      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
 80028f6:	4b5d      	ldr	r3, [pc, #372]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0xe4>
 8002902:	e014      	b.n	800292e <HAL_RCC_OscConfig+0x12e>
 8002904:	f7ff fc9e 	bl	8002244 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x11e>
 800290c:	f7ff fc9a 	bl	8002244 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	; 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x11e>
 800291a:	2303      	movs	r3, #3
 800291c:	e1ec      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
 800291e:	4b53      	ldr	r3, [pc, #332]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x10c>
 800292a:	e000      	b.n	800292e <HAL_RCC_OscConfig+0x12e>
 800292c:	bf00      	nop
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d063      	beq.n	8002a02 <HAL_RCC_OscConfig+0x202>
 800293a:	4b4c      	ldr	r3, [pc, #304]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_RCC_OscConfig+0x15e>
 8002946:	4b49      	ldr	r3, [pc, #292]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b08      	cmp	r3, #8
 8002950:	d11c      	bne.n	800298c <HAL_RCC_OscConfig+0x18c>
 8002952:	4b46      	ldr	r3, [pc, #280]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d116      	bne.n	800298c <HAL_RCC_OscConfig+0x18c>
 800295e:	4b43      	ldr	r3, [pc, #268]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <HAL_RCC_OscConfig+0x176>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d001      	beq.n	8002976 <HAL_RCC_OscConfig+0x176>
 8002972:	2301      	movs	r3, #1
 8002974:	e1c0      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
 8002976:	4b3d      	ldr	r3, [pc, #244]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4939      	ldr	r1, [pc, #228]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]
 800298a:	e03a      	b.n	8002a02 <HAL_RCC_OscConfig+0x202>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d020      	beq.n	80029d6 <HAL_RCC_OscConfig+0x1d6>
 8002994:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	f7ff fc53 	bl	8002244 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x1b4>
 80029a2:	f7ff fc4f 	bl	8002244 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x1b4>
 80029b0:	2303      	movs	r3, #3
 80029b2:	e1a1      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
 80029b4:	4b2d      	ldr	r3, [pc, #180]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x1a2>
 80029c0:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4927      	ldr	r1, [pc, #156]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]
 80029d4:	e015      	b.n	8002a02 <HAL_RCC_OscConfig+0x202>
 80029d6:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	f7ff fc32 	bl	8002244 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x1f6>
 80029e4:	f7ff fc2e 	bl	8002244 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x1f6>
 80029f2:	2303      	movs	r3, #3
 80029f4:	e180      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
 80029f6:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x1e4>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d03a      	beq.n	8002a84 <HAL_RCC_OscConfig+0x284>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d019      	beq.n	8002a4a <HAL_RCC_OscConfig+0x24a>
 8002a16:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	f7ff fc12 	bl	8002244 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x236>
 8002a24:	f7ff fc0e 	bl	8002244 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x236>
 8002a32:	2303      	movs	r3, #3
 8002a34:	e160      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x224>
 8002a42:	2001      	movs	r0, #1
 8002a44:	f000 fabc 	bl	8002fc0 <RCC_Delay>
 8002a48:	e01c      	b.n	8002a84 <HAL_RCC_OscConfig+0x284>
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	f7ff fbf8 	bl	8002244 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]
 8002a56:	e00f      	b.n	8002a78 <HAL_RCC_OscConfig+0x278>
 8002a58:	f7ff fbf4 	bl	8002244 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d908      	bls.n	8002a78 <HAL_RCC_OscConfig+0x278>
 8002a66:	2303      	movs	r3, #3
 8002a68:	e146      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	42420000 	.word	0x42420000
 8002a74:	42420480 	.word	0x42420480
 8002a78:	4b92      	ldr	r3, [pc, #584]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e9      	bne.n	8002a58 <HAL_RCC_OscConfig+0x258>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80a6 	beq.w	8002bde <HAL_RCC_OscConfig+0x3de>
 8002a92:	2300      	movs	r3, #0
 8002a94:	75fb      	strb	r3, [r7, #23]
 8002a96:	4b8b      	ldr	r3, [pc, #556]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10d      	bne.n	8002abe <HAL_RCC_OscConfig+0x2be>
 8002aa2:	4b88      	ldr	r3, [pc, #544]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	4a87      	ldr	r2, [pc, #540]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aac:	61d3      	str	r3, [r2, #28]
 8002aae:	4b85      	ldr	r3, [pc, #532]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2301      	movs	r3, #1
 8002abc:	75fb      	strb	r3, [r7, #23]
 8002abe:	4b82      	ldr	r3, [pc, #520]	; (8002cc8 <HAL_RCC_OscConfig+0x4c8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d118      	bne.n	8002afc <HAL_RCC_OscConfig+0x2fc>
 8002aca:	4b7f      	ldr	r3, [pc, #508]	; (8002cc8 <HAL_RCC_OscConfig+0x4c8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a7e      	ldr	r2, [pc, #504]	; (8002cc8 <HAL_RCC_OscConfig+0x4c8>)
 8002ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	f7ff fbb5 	bl	8002244 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x2f0>
 8002ade:	f7ff fbb1 	bl	8002244 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b64      	cmp	r3, #100	; 0x64
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x2f0>
 8002aec:	2303      	movs	r3, #3
 8002aee:	e103      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
 8002af0:	4b75      	ldr	r3, [pc, #468]	; (8002cc8 <HAL_RCC_OscConfig+0x4c8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x2de>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d106      	bne.n	8002b12 <HAL_RCC_OscConfig+0x312>
 8002b04:	4b6f      	ldr	r3, [pc, #444]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	4a6e      	ldr	r2, [pc, #440]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6213      	str	r3, [r2, #32]
 8002b10:	e02d      	b.n	8002b6e <HAL_RCC_OscConfig+0x36e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x334>
 8002b1a:	4b6a      	ldr	r3, [pc, #424]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	4a69      	ldr	r2, [pc, #420]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	6213      	str	r3, [r2, #32]
 8002b26:	4b67      	ldr	r3, [pc, #412]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	4a66      	ldr	r2, [pc, #408]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b2c:	f023 0304 	bic.w	r3, r3, #4
 8002b30:	6213      	str	r3, [r2, #32]
 8002b32:	e01c      	b.n	8002b6e <HAL_RCC_OscConfig+0x36e>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b05      	cmp	r3, #5
 8002b3a:	d10c      	bne.n	8002b56 <HAL_RCC_OscConfig+0x356>
 8002b3c:	4b61      	ldr	r3, [pc, #388]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4a60      	ldr	r2, [pc, #384]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b42:	f043 0304 	orr.w	r3, r3, #4
 8002b46:	6213      	str	r3, [r2, #32]
 8002b48:	4b5e      	ldr	r3, [pc, #376]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4a5d      	ldr	r2, [pc, #372]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6213      	str	r3, [r2, #32]
 8002b54:	e00b      	b.n	8002b6e <HAL_RCC_OscConfig+0x36e>
 8002b56:	4b5b      	ldr	r3, [pc, #364]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	4a5a      	ldr	r2, [pc, #360]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	6213      	str	r3, [r2, #32]
 8002b62:	4b58      	ldr	r3, [pc, #352]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4a57      	ldr	r2, [pc, #348]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	f023 0304 	bic.w	r3, r3, #4
 8002b6c:	6213      	str	r3, [r2, #32]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d015      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x3a2>
 8002b76:	f7ff fb65 	bl	8002244 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_OscConfig+0x394>
 8002b7e:	f7ff fb61 	bl	8002244 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x394>
 8002b90:	2303      	movs	r3, #3
 8002b92:	e0b1      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
 8002b94:	4b4b      	ldr	r3, [pc, #300]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ee      	beq.n	8002b7e <HAL_RCC_OscConfig+0x37e>
 8002ba0:	e014      	b.n	8002bcc <HAL_RCC_OscConfig+0x3cc>
 8002ba2:	f7ff fb4f 	bl	8002244 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
 8002baa:	f7ff fb4b 	bl	8002244 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e09b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
 8002bc0:	4b40      	ldr	r3, [pc, #256]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ee      	bne.n	8002baa <HAL_RCC_OscConfig+0x3aa>
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d105      	bne.n	8002bde <HAL_RCC_OscConfig+0x3de>
 8002bd2:	4b3c      	ldr	r3, [pc, #240]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	4a3b      	ldr	r2, [pc, #236]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	61d3      	str	r3, [r2, #28]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8087 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x4f6>
 8002be8:	4b36      	ldr	r3, [pc, #216]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d061      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x4b8>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d146      	bne.n	8002c8a <HAL_RCC_OscConfig+0x48a>
 8002bfc:	4b33      	ldr	r3, [pc, #204]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	f7ff fb1f 	bl	8002244 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x41c>
 8002c0a:	f7ff fb1b 	bl	8002244 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x41c>
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e06d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
 8002c1c:	4b29      	ldr	r3, [pc, #164]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1f0      	bne.n	8002c0a <HAL_RCC_OscConfig+0x40a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c30:	d108      	bne.n	8002c44 <HAL_RCC_OscConfig+0x444>
 8002c32:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	4921      	ldr	r1, [pc, #132]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
 8002c44:	4b1f      	ldr	r3, [pc, #124]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a19      	ldr	r1, [r3, #32]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	430b      	orrs	r3, r1
 8002c56:	491b      	ldr	r1, [pc, #108]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	f7ff faef 	bl	8002244 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x47c>
 8002c6a:	f7ff faeb 	bl	8002244 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x47c>
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e03d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
 8002c7c:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x46a>
 8002c88:	e035      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4f6>
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	f7ff fad8 	bl	8002244 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x4aa>
 8002c98:	f7ff fad4 	bl	8002244 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x4aa>
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e026      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x498>
 8002cb6:	e01e      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4f6>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x4d0>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e019      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	42420060 	.word	0x42420060
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCC_OscConfig+0x500>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x4f2>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x4f6>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40021000 	.word	0x40021000

08002d04 <HAL_RCC_ClockConfig>:
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x14>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0d0      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
 8002d18:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d910      	bls.n	8002d48 <HAL_RCC_ClockConfig+0x44>
 8002d26:	4b67      	ldr	r3, [pc, #412]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 0207 	bic.w	r2, r3, #7
 8002d2e:	4965      	ldr	r1, [pc, #404]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
 8002d36:	4b63      	ldr	r3, [pc, #396]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x44>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0b8      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d020      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x92>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x68>
 8002d60:	4b59      	ldr	r3, [pc, #356]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4a58      	ldr	r2, [pc, #352]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d6a:	6053      	str	r3, [r2, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x80>
 8002d78:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4a52      	ldr	r2, [pc, #328]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d82:	6053      	str	r3, [r2, #4]
 8002d84:	4b50      	ldr	r3, [pc, #320]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	494d      	ldr	r1, [pc, #308]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d040      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x120>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d107      	bne.n	8002dba <HAL_RCC_ClockConfig+0xb6>
 8002daa:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d115      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e07f      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xce>
 8002dc2:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e073      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
 8002dd2:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e06b      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
 8002de2:	4b39      	ldr	r3, [pc, #228]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f023 0203 	bic.w	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4936      	ldr	r1, [pc, #216]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]
 8002df4:	f7ff fa26 	bl	8002244 <HAL_GetTick>
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
 8002dfc:	f7ff fa22 	bl	8002244 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e053      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
 8002e12:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 020c 	and.w	r2, r3, #12
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d1eb      	bne.n	8002dfc <HAL_RCC_ClockConfig+0xf8>
 8002e24:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d210      	bcs.n	8002e54 <HAL_RCC_ClockConfig+0x150>
 8002e32:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 0207 	bic.w	r2, r3, #7
 8002e3a:	4922      	ldr	r1, [pc, #136]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]
 8002e42:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x150>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e032      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d008      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x16e>
 8002e60:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	4916      	ldr	r1, [pc, #88]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	604b      	str	r3, [r1, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x18e>
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	490e      	ldr	r1, [pc, #56]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	604b      	str	r3, [r1, #4]
 8002e92:	f000 f82d 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8002e96:	4602      	mov	r2, r0
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	490a      	ldr	r1, [pc, #40]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002ea4:	5ccb      	ldrb	r3, [r1, r3]
 8002ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eaa:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <HAL_RCC_ClockConfig+0x1cc>)
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <HAL_RCC_ClockConfig+0x1d0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff f984 	bl	80021c0 <HAL_InitTick>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40022000 	.word	0x40022000
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	0800520c 	.word	0x0800520c
 8002ed0:	20000018 	.word	0x20000018
 8002ed4:	2000004c 	.word	0x2000004c

08002ed8 <HAL_RCC_EnableCSS>:
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <HAL_RCC_EnableCSS+0x14>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	bf00      	nop
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	4242004c 	.word	0x4242004c

08002ef0 <HAL_RCC_GetSysClockFreq>:
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d002      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x30>
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0x36>
 8002f1e:	e027      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x80>
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	e027      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0x86>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	0c9b      	lsrs	r3, r3, #18
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	4a17      	ldr	r2, [pc, #92]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f30:	5cd3      	ldrb	r3, [r2, r3]
 8002f32:	607b      	str	r3, [r7, #4]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d010      	beq.n	8002f60 <HAL_RCC_GetSysClockFreq+0x70>
 8002f3e:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	0c5b      	lsrs	r3, r3, #17
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	4a11      	ldr	r2, [pc, #68]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f4a:	5cd3      	ldrb	r3, [r2, r3]
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a0d      	ldr	r2, [pc, #52]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f52:	fb03 f202 	mul.w	r2, r3, r2
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	e004      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0x7a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a0c      	ldr	r2, [pc, #48]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f64:	fb02 f303 	mul.w	r3, r2, r3
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	e002      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0x86>
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	bf00      	nop
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	007a1200 	.word	0x007a1200
 8002f8c:	0800521c 	.word	0x0800521c
 8002f90:	0800522c 	.word	0x0800522c
 8002f94:	003d0900 	.word	0x003d0900

08002f98 <HAL_RCC_NMI_IRQHandler>:
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa4:	2b80      	cmp	r3, #128	; 0x80
 8002fa6:	d104      	bne.n	8002fb2 <HAL_RCC_NMI_IRQHandler+0x1a>
 8002fa8:	f000 f828 	bl	8002ffc <HAL_RCC_CSSCallback>
 8002fac:	4b03      	ldr	r3, [pc, #12]	; (8002fbc <HAL_RCC_NMI_IRQHandler+0x24>)
 8002fae:	2280      	movs	r2, #128	; 0x80
 8002fb0:	701a      	strb	r2, [r3, #0]
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	4002100a 	.word	0x4002100a

08002fc0 <RCC_Delay>:
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <RCC_Delay+0x34>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a0a      	ldr	r2, [pc, #40]	; (8002ff8 <RCC_Delay+0x38>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	0a5b      	lsrs	r3, r3, #9
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	bf00      	nop
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1e5a      	subs	r2, r3, #1
 8002fe2:	60fa      	str	r2, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f9      	bne.n	8002fdc <RCC_Delay+0x1c>
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	20000018 	.word	0x20000018
 8002ff8:	10624dd3 	.word	0x10624dd3

08002ffc <HAL_RCC_CSSCallback>:
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <HAL_SPI_Init>:
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_SPI_Init+0x12>
 8003016:	2301      	movs	r3, #1
 8003018:	e076      	b.n	8003108 <HAL_SPI_Init+0x100>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	2b00      	cmp	r3, #0
 8003020:	d108      	bne.n	8003034 <HAL_SPI_Init+0x2c>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800302a:	d009      	beq.n	8003040 <HAL_SPI_Init+0x38>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	61da      	str	r2, [r3, #28]
 8003032:	e005      	b.n	8003040 <HAL_SPI_Init+0x38>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	611a      	str	r2, [r3, #16]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	615a      	str	r2, [r3, #20]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	629a      	str	r2, [r3, #40]	; 0x28
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_SPI_Init+0x58>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fd fa44 	bl	80004e8 <HAL_SPI_MspInit>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c4:	ea42 0103 	orr.w	r1, r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	0c1a      	lsrs	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f002 0204 	and.w	r2, r2, #4
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69da      	ldr	r2, [r3, #28]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f6:	61da      	str	r2, [r3, #28]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	655a      	str	r2, [r3, #84]	; 0x54
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003106:	2300      	movs	r3, #0
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_SPI_Transmit>:
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	4613      	mov	r3, r2
 800311e:	80fb      	strh	r3, [r7, #6]
 8003120:	2300      	movs	r3, #0
 8003122:	77fb      	strb	r3, [r7, #31]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_SPI_Transmit+0x22>
 800312e:	2302      	movs	r3, #2
 8003130:	e12d      	b.n	800338e <HAL_SPI_Transmit+0x27e>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800313a:	f7ff f883 	bl	8002244 <HAL_GetTick>
 800313e:	61b8      	str	r0, [r7, #24]
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	82fb      	strh	r3, [r7, #22]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b01      	cmp	r3, #1
 800314e:	d002      	beq.n	8003156 <HAL_SPI_Transmit+0x46>
 8003150:	2302      	movs	r3, #2
 8003152:	77fb      	strb	r3, [r7, #31]
 8003154:	e116      	b.n	8003384 <HAL_SPI_Transmit+0x274>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <HAL_SPI_Transmit+0x52>
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d102      	bne.n	8003168 <HAL_SPI_Transmit+0x58>
 8003162:	2301      	movs	r3, #1
 8003164:	77fb      	strb	r3, [r7, #31]
 8003166:	e10d      	b.n	8003384 <HAL_SPI_Transmit+0x274>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2203      	movs	r2, #3
 800316c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	88fa      	ldrh	r2, [r7, #6]
 8003180:	869a      	strh	r2, [r3, #52]	; 0x34
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	88fa      	ldrh	r2, [r7, #6]
 8003186:	86da      	strh	r2, [r3, #54]	; 0x36
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	639a      	str	r2, [r3, #56]	; 0x38
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	87da      	strh	r2, [r3, #62]	; 0x3e
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	645a      	str	r2, [r3, #68]	; 0x44
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ae:	d10f      	bne.n	80031d0 <HAL_SPI_Transmit+0xc0>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031da:	2b40      	cmp	r3, #64	; 0x40
 80031dc:	d007      	beq.n	80031ee <HAL_SPI_Transmit+0xde>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f6:	d14f      	bne.n	8003298 <HAL_SPI_Transmit+0x188>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <HAL_SPI_Transmit+0xf6>
 8003200:	8afb      	ldrh	r3, [r7, #22]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d142      	bne.n	800328c <HAL_SPI_Transmit+0x17c>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	881a      	ldrh	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	1c9a      	adds	r2, r3, #2
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	86da      	strh	r2, [r3, #54]	; 0x36
 800322a:	e02f      	b.n	800328c <HAL_SPI_Transmit+0x17c>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b02      	cmp	r3, #2
 8003238:	d112      	bne.n	8003260 <HAL_SPI_Transmit+0x150>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	881a      	ldrh	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	1c9a      	adds	r2, r3, #2
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	631a      	str	r2, [r3, #48]	; 0x30
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	86da      	strh	r2, [r3, #54]	; 0x36
 800325e:	e015      	b.n	800328c <HAL_SPI_Transmit+0x17c>
 8003260:	f7fe fff0 	bl	8002244 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d803      	bhi.n	8003278 <HAL_SPI_Transmit+0x168>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003276:	d102      	bne.n	800327e <HAL_SPI_Transmit+0x16e>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_SPI_Transmit+0x17c>
 800327e:	2303      	movs	r3, #3
 8003280:	77fb      	strb	r3, [r7, #31]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800328a:	e07b      	b.n	8003384 <HAL_SPI_Transmit+0x274>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1ca      	bne.n	800322c <HAL_SPI_Transmit+0x11c>
 8003296:	e050      	b.n	800333a <HAL_SPI_Transmit+0x22a>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <HAL_SPI_Transmit+0x196>
 80032a0:	8afb      	ldrh	r3, [r7, #22]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d144      	bne.n	8003330 <HAL_SPI_Transmit+0x220>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	330c      	adds	r3, #12
 80032b0:	7812      	ldrb	r2, [r2, #0]
 80032b2:	701a      	strb	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	631a      	str	r2, [r3, #48]	; 0x30
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80032cc:	e030      	b.n	8003330 <HAL_SPI_Transmit+0x220>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d113      	bne.n	8003304 <HAL_SPI_Transmit+0x1f4>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	330c      	adds	r3, #12
 80032e6:	7812      	ldrb	r2, [r2, #0]
 80032e8:	701a      	strb	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	631a      	str	r2, [r3, #48]	; 0x30
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	86da      	strh	r2, [r3, #54]	; 0x36
 8003302:	e015      	b.n	8003330 <HAL_SPI_Transmit+0x220>
 8003304:	f7fe ff9e 	bl	8002244 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d803      	bhi.n	800331c <HAL_SPI_Transmit+0x20c>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331a:	d102      	bne.n	8003322 <HAL_SPI_Transmit+0x212>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_SPI_Transmit+0x220>
 8003322:	2303      	movs	r3, #3
 8003324:	77fb      	strb	r3, [r7, #31]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800332e:	e029      	b.n	8003384 <HAL_SPI_Transmit+0x274>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1c9      	bne.n	80032ce <HAL_SPI_Transmit+0x1be>
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	6839      	ldr	r1, [r7, #0]
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 fbcc 	bl	8003adc <SPI_EndRxTxTransaction>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_SPI_Transmit+0x240>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	655a      	str	r2, [r3, #84]	; 0x54
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10a      	bne.n	800336e <HAL_SPI_Transmit+0x25e>
 8003358:	2300      	movs	r3, #0
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_SPI_Transmit+0x26c>
 8003376:	2301      	movs	r3, #1
 8003378:	77fb      	strb	r3, [r7, #31]
 800337a:	e003      	b.n	8003384 <HAL_SPI_Transmit+0x274>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800338c:	7ffb      	ldrb	r3, [r7, #31]
 800338e:	4618      	mov	r0, r3
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_SPI_Receive>:
 8003396:	b580      	push	{r7, lr}
 8003398:	b088      	sub	sp, #32
 800339a:	af02      	add	r7, sp, #8
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	4613      	mov	r3, r2
 80033a4:	80fb      	strh	r3, [r7, #6]
 80033a6:	2300      	movs	r3, #0
 80033a8:	75fb      	strb	r3, [r7, #23]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d002      	beq.n	80033bc <HAL_SPI_Receive+0x26>
 80033b6:	2302      	movs	r3, #2
 80033b8:	75fb      	strb	r3, [r7, #23]
 80033ba:	e0fb      	b.n	80035b4 <HAL_SPI_Receive+0x21e>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033c4:	d112      	bne.n	80033ec <HAL_SPI_Receive+0x56>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10e      	bne.n	80033ec <HAL_SPI_Receive+0x56>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2204      	movs	r2, #4
 80033d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80033d6:	88fa      	ldrh	r2, [r7, #6]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 f8ef 	bl	80035c6 <HAL_SPI_TransmitReceive>
 80033e8:	4603      	mov	r3, r0
 80033ea:	e0e8      	b.n	80035be <HAL_SPI_Receive+0x228>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_SPI_Receive+0x64>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e0e1      	b.n	80035be <HAL_SPI_Receive+0x228>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003402:	f7fe ff1f 	bl	8002244 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_SPI_Receive+0x7e>
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d102      	bne.n	800341a <HAL_SPI_Receive+0x84>
 8003414:	2301      	movs	r3, #1
 8003416:	75fb      	strb	r3, [r7, #23]
 8003418:	e0cc      	b.n	80035b4 <HAL_SPI_Receive+0x21e>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2204      	movs	r2, #4
 800341e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	655a      	str	r2, [r3, #84]	; 0x54
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	639a      	str	r2, [r3, #56]	; 0x38
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	88fa      	ldrh	r2, [r7, #6]
 8003432:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	88fa      	ldrh	r2, [r7, #6]
 8003438:	87da      	strh	r2, [r3, #62]	; 0x3e
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	869a      	strh	r2, [r3, #52]	; 0x34
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	86da      	strh	r2, [r3, #54]	; 0x36
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	641a      	str	r2, [r3, #64]	; 0x40
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	645a      	str	r2, [r3, #68]	; 0x44
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003460:	d10f      	bne.n	8003482 <HAL_SPI_Receive+0xec>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	d007      	beq.n	80034a0 <HAL_SPI_Receive+0x10a>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d16a      	bne.n	800357e <HAL_SPI_Receive+0x1e8>
 80034a8:	e032      	b.n	8003510 <HAL_SPI_Receive+0x17a>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d115      	bne.n	80034e4 <HAL_SPI_Receive+0x14e>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f103 020c 	add.w	r2, r3, #12
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	7812      	ldrb	r2, [r2, #0]
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	639a      	str	r2, [r3, #56]	; 0x38
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034e2:	e015      	b.n	8003510 <HAL_SPI_Receive+0x17a>
 80034e4:	f7fe feae 	bl	8002244 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d803      	bhi.n	80034fc <HAL_SPI_Receive+0x166>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fa:	d102      	bne.n	8003502 <HAL_SPI_Receive+0x16c>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_SPI_Receive+0x17a>
 8003502:	2303      	movs	r3, #3
 8003504:	75fb      	strb	r3, [r7, #23]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800350e:	e051      	b.n	80035b4 <HAL_SPI_Receive+0x21e>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1c7      	bne.n	80034aa <HAL_SPI_Receive+0x114>
 800351a:	e035      	b.n	8003588 <HAL_SPI_Receive+0x1f2>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b01      	cmp	r3, #1
 8003528:	d113      	bne.n	8003552 <HAL_SPI_Receive+0x1bc>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	b292      	uxth	r2, r2
 8003536:	801a      	strh	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	1c9a      	adds	r2, r3, #2
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	639a      	str	r2, [r3, #56]	; 0x38
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003550:	e015      	b.n	800357e <HAL_SPI_Receive+0x1e8>
 8003552:	f7fe fe77 	bl	8002244 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d803      	bhi.n	800356a <HAL_SPI_Receive+0x1d4>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003568:	d102      	bne.n	8003570 <HAL_SPI_Receive+0x1da>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d106      	bne.n	800357e <HAL_SPI_Receive+0x1e8>
 8003570:	2303      	movs	r3, #3
 8003572:	75fb      	strb	r3, [r7, #23]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800357c:	e01a      	b.n	80035b4 <HAL_SPI_Receive+0x21e>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1c9      	bne.n	800351c <HAL_SPI_Receive+0x186>
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	6839      	ldr	r1, [r7, #0]
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 fa53 	bl	8003a38 <SPI_EndRxTransaction>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <HAL_SPI_Receive+0x208>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	655a      	str	r2, [r3, #84]	; 0x54
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_SPI_Receive+0x216>
 80035a6:	2301      	movs	r3, #1
 80035a8:	75fb      	strb	r3, [r7, #23]
 80035aa:	e003      	b.n	80035b4 <HAL_SPI_Receive+0x21e>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_SPI_TransmitReceive>:
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b08c      	sub	sp, #48	; 0x30
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	807b      	strh	r3, [r7, #2]
 80035d4:	2301      	movs	r3, #1
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035d8:	2300      	movs	r3, #0
 80035da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_SPI_TransmitReceive+0x26>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e198      	b.n	800391e <HAL_SPI_TransmitReceive+0x358>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80035f4:	f7fe fe26 	bl	8002244 <HAL_GetTick>
 80035f8:	6278      	str	r0, [r7, #36]	; 0x24
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	887b      	ldrh	r3, [r7, #2]
 800360c:	837b      	strh	r3, [r7, #26]
 800360e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003612:	2b01      	cmp	r3, #1
 8003614:	d00f      	beq.n	8003636 <HAL_SPI_TransmitReceive+0x70>
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800361c:	d107      	bne.n	800362e <HAL_SPI_TransmitReceive+0x68>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d103      	bne.n	800362e <HAL_SPI_TransmitReceive+0x68>
 8003626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800362a:	2b04      	cmp	r3, #4
 800362c:	d003      	beq.n	8003636 <HAL_SPI_TransmitReceive+0x70>
 800362e:	2302      	movs	r3, #2
 8003630:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003634:	e16d      	b.n	8003912 <HAL_SPI_TransmitReceive+0x34c>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_SPI_TransmitReceive+0x82>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_SPI_TransmitReceive+0x82>
 8003642:	887b      	ldrh	r3, [r7, #2]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d103      	bne.n	8003650 <HAL_SPI_TransmitReceive+0x8a>
 8003648:	2301      	movs	r3, #1
 800364a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800364e:	e160      	b.n	8003912 <HAL_SPI_TransmitReceive+0x34c>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b04      	cmp	r3, #4
 800365a:	d003      	beq.n	8003664 <HAL_SPI_TransmitReceive+0x9e>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2205      	movs	r2, #5
 8003660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	655a      	str	r2, [r3, #84]	; 0x54
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	639a      	str	r2, [r3, #56]	; 0x38
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	887a      	ldrh	r2, [r7, #2]
 8003674:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	887a      	ldrh	r2, [r7, #2]
 800367a:	879a      	strh	r2, [r3, #60]	; 0x3c
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	887a      	ldrh	r2, [r7, #2]
 8003686:	86da      	strh	r2, [r3, #54]	; 0x36
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	887a      	ldrh	r2, [r7, #2]
 800368c:	869a      	strh	r2, [r3, #52]	; 0x34
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	641a      	str	r2, [r3, #64]	; 0x40
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	d007      	beq.n	80036b8 <HAL_SPI_TransmitReceive+0xf2>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c0:	d17c      	bne.n	80037bc <HAL_SPI_TransmitReceive+0x1f6>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_SPI_TransmitReceive+0x10a>
 80036ca:	8b7b      	ldrh	r3, [r7, #26]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d16a      	bne.n	80037a6 <HAL_SPI_TransmitReceive+0x1e0>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	881a      	ldrh	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60da      	str	r2, [r3, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	1c9a      	adds	r2, r3, #2
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	631a      	str	r2, [r3, #48]	; 0x30
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80036f4:	e057      	b.n	80037a6 <HAL_SPI_TransmitReceive+0x1e0>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b02      	cmp	r3, #2
 8003702:	d11b      	bne.n	800373c <HAL_SPI_TransmitReceive+0x176>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d016      	beq.n	800373c <HAL_SPI_TransmitReceive+0x176>
 800370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003710:	2b01      	cmp	r3, #1
 8003712:	d113      	bne.n	800373c <HAL_SPI_TransmitReceive+0x176>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	881a      	ldrh	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60da      	str	r2, [r3, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	1c9a      	adds	r2, r3, #2
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	631a      	str	r2, [r3, #48]	; 0x30
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	86da      	strh	r2, [r3, #54]	; 0x36
 8003738:	2300      	movs	r3, #0
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b01      	cmp	r3, #1
 8003748:	d119      	bne.n	800377e <HAL_SPI_TransmitReceive+0x1b8>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d014      	beq.n	800377e <HAL_SPI_TransmitReceive+0x1b8>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	b292      	uxth	r2, r2
 8003760:	801a      	strh	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	1c9a      	adds	r2, r3, #2
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	639a      	str	r2, [r3, #56]	; 0x38
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	87da      	strh	r2, [r3, #62]	; 0x3e
 800377a:	2301      	movs	r3, #1
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800377e:	f7fe fd61 	bl	8002244 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800378a:	429a      	cmp	r2, r3
 800378c:	d80b      	bhi.n	80037a6 <HAL_SPI_TransmitReceive+0x1e0>
 800378e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003794:	d007      	beq.n	80037a6 <HAL_SPI_TransmitReceive+0x1e0>
 8003796:	2303      	movs	r3, #3
 8003798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80037a4:	e0b5      	b.n	8003912 <HAL_SPI_TransmitReceive+0x34c>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1a2      	bne.n	80036f6 <HAL_SPI_TransmitReceive+0x130>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d19d      	bne.n	80036f6 <HAL_SPI_TransmitReceive+0x130>
 80037ba:	e080      	b.n	80038be <HAL_SPI_TransmitReceive+0x2f8>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <HAL_SPI_TransmitReceive+0x204>
 80037c4:	8b7b      	ldrh	r3, [r7, #26]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d16f      	bne.n	80038aa <HAL_SPI_TransmitReceive+0x2e4>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	330c      	adds	r3, #12
 80037d4:	7812      	ldrb	r2, [r2, #0]
 80037d6:	701a      	strb	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80037f0:	e05b      	b.n	80038aa <HAL_SPI_TransmitReceive+0x2e4>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d11c      	bne.n	800383a <HAL_SPI_TransmitReceive+0x274>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d017      	beq.n	800383a <HAL_SPI_TransmitReceive+0x274>
 800380a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380c:	2b01      	cmp	r3, #1
 800380e:	d114      	bne.n	800383a <HAL_SPI_TransmitReceive+0x274>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	7812      	ldrb	r2, [r2, #0]
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800382c:	b29b      	uxth	r3, r3
 800382e:	3b01      	subs	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	86da      	strh	r2, [r3, #54]	; 0x36
 8003836:	2300      	movs	r3, #0
 8003838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b01      	cmp	r3, #1
 8003846:	d119      	bne.n	800387c <HAL_SPI_TransmitReceive+0x2b6>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d014      	beq.n	800387c <HAL_SPI_TransmitReceive+0x2b6>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	639a      	str	r2, [r3, #56]	; 0x38
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003878:	2301      	movs	r3, #1
 800387a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800387c:	f7fe fce2 	bl	8002244 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003888:	429a      	cmp	r2, r3
 800388a:	d803      	bhi.n	8003894 <HAL_SPI_TransmitReceive+0x2ce>
 800388c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003892:	d102      	bne.n	800389a <HAL_SPI_TransmitReceive+0x2d4>
 8003894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003896:	2b00      	cmp	r3, #0
 8003898:	d107      	bne.n	80038aa <HAL_SPI_TransmitReceive+0x2e4>
 800389a:	2303      	movs	r3, #3
 800389c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80038a8:	e033      	b.n	8003912 <HAL_SPI_TransmitReceive+0x34c>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d19e      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x22c>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d199      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x22c>
 80038be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 f90a 	bl	8003adc <SPI_EndRxTxTransaction>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d006      	beq.n	80038dc <HAL_SPI_TransmitReceive+0x316>
 80038ce:	2301      	movs	r3, #1
 80038d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	655a      	str	r2, [r3, #84]	; 0x54
 80038da:	e01a      	b.n	8003912 <HAL_SPI_TransmitReceive+0x34c>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <HAL_SPI_TransmitReceive+0x334>
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_SPI_TransmitReceive+0x344>
 8003902:	2301      	movs	r3, #1
 8003904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003908:	e003      	b.n	8003912 <HAL_SPI_TransmitReceive+0x34c>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800391a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800391e:	4618      	mov	r0, r3
 8003920:	3730      	adds	r7, #48	; 0x30
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <SPI_WaitFlagStateUntilTimeout>:
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	4613      	mov	r3, r2
 8003936:	71fb      	strb	r3, [r7, #7]
 8003938:	f7fe fc84 	bl	8002244 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	4413      	add	r3, r2
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	f7fe fc7c 	bl	8002244 <HAL_GetTick>
 800394c:	61b8      	str	r0, [r7, #24]
 800394e:	4b39      	ldr	r3, [pc, #228]	; (8003a34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	015b      	lsls	r3, r3, #5
 8003954:	0d1b      	lsrs	r3, r3, #20
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	fb02 f303 	mul.w	r3, r2, r3
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	e054      	b.n	8003a0a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003966:	d050      	beq.n	8003a0a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8003968:	f7fe fc6c 	bl	8002244 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	429a      	cmp	r2, r3
 8003976:	d902      	bls.n	800397e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d13d      	bne.n	80039fa <SPI_WaitFlagStateUntilTimeout+0xd2>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003996:	d111      	bne.n	80039bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a0:	d004      	beq.n	80039ac <SPI_WaitFlagStateUntilTimeout+0x84>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039aa:	d107      	bne.n	80039bc <SPI_WaitFlagStateUntilTimeout+0x94>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c4:	d10f      	bne.n	80039e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80039f6:	2303      	movs	r3, #3
 80039f8:	e017      	b.n	8003a2a <SPI_WaitFlagStateUntilTimeout+0x102>
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8003a00:	2300      	movs	r3, #0
 8003a02:	61fb      	str	r3, [r7, #28]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4013      	ands	r3, r2
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	bf0c      	ite	eq
 8003a1a:	2301      	moveq	r3, #1
 8003a1c:	2300      	movne	r3, #0
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	461a      	mov	r2, r3
 8003a22:	79fb      	ldrb	r3, [r7, #7]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d19b      	bne.n	8003960 <SPI_WaitFlagStateUntilTimeout+0x38>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3720      	adds	r7, #32
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000018 	.word	0x20000018

08003a38 <SPI_EndRxTransaction>:
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a4c:	d111      	bne.n	8003a72 <SPI_EndRxTransaction+0x3a>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a56:	d004      	beq.n	8003a62 <SPI_EndRxTransaction+0x2a>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a60:	d107      	bne.n	8003a72 <SPI_EndRxTransaction+0x3a>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a7a:	d117      	bne.n	8003aac <SPI_EndRxTransaction+0x74>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a84:	d112      	bne.n	8003aac <SPI_EndRxTransaction+0x74>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2101      	movs	r1, #1
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f7ff ff49 	bl	8003928 <SPI_WaitFlagStateUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d01a      	beq.n	8003ad2 <SPI_EndRxTransaction+0x9a>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa0:	f043 0220 	orr.w	r2, r3, #32
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e013      	b.n	8003ad4 <SPI_EndRxTransaction+0x9c>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2180      	movs	r1, #128	; 0x80
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f7ff ff36 	bl	8003928 <SPI_WaitFlagStateUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <SPI_EndRxTransaction+0x9a>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	f043 0220 	orr.w	r2, r3, #32
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	655a      	str	r2, [r3, #84]	; 0x54
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e000      	b.n	8003ad4 <SPI_EndRxTransaction+0x9c>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <SPI_EndRxTxTransaction>:
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2200      	movs	r2, #0
 8003af0:	2180      	movs	r1, #128	; 0x80
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f7ff ff18 	bl	8003928 <SPI_WaitFlagStateUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <SPI_EndRxTxTransaction+0x32>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b02:	f043 0220 	orr.w	r2, r3, #32
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	655a      	str	r2, [r3, #84]	; 0x54
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e000      	b.n	8003b10 <SPI_EndRxTxTransaction+0x34>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f103 0208 	add.w	r2, r3, #8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f103 0208 	add.w	r2, r3, #8
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f103 0208 	add.w	r2, r3, #8
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr

08003b6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	601a      	str	r2, [r3, #0]
}
 8003baa:	bf00      	nop
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bca:	d103      	bne.n	8003bd4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	e00c      	b.n	8003bee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	e002      	b.n	8003be2 <vListInsert+0x2e>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d2f6      	bcs.n	8003bdc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	601a      	str	r2, [r3, #0]
}
 8003c1a:	bf00      	nop
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6892      	ldr	r2, [r2, #8]
 8003c3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6852      	ldr	r2, [r2, #4]
 8003c44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d103      	bne.n	8003c58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	1e5a      	subs	r2, r3, #1
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr

08003c76 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b08e      	sub	sp, #56	; 0x38
 8003c7a:	af04      	add	r7, sp, #16
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
 8003c82:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10a      	bne.n	8003ca0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c9c:	bf00      	nop
 8003c9e:	e7fe      	b.n	8003c9e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10a      	bne.n	8003cbc <xTaskCreateStatic+0x46>
	__asm volatile
 8003ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	61fb      	str	r3, [r7, #28]
}
 8003cb8:	bf00      	nop
 8003cba:	e7fe      	b.n	8003cba <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003cbc:	23a0      	movs	r3, #160	; 0xa0
 8003cbe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	2ba0      	cmp	r3, #160	; 0xa0
 8003cc4:	d00a      	beq.n	8003cdc <xTaskCreateStatic+0x66>
	__asm volatile
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	61bb      	str	r3, [r7, #24]
}
 8003cd8:	bf00      	nop
 8003cda:	e7fe      	b.n	8003cda <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d01e      	beq.n	8003d20 <xTaskCreateStatic+0xaa>
 8003ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01b      	beq.n	8003d20 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	9303      	str	r3, [sp, #12]
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	9302      	str	r3, [sp, #8]
 8003d02:	f107 0314 	add.w	r3, r7, #20
 8003d06:	9301      	str	r3, [sp, #4]
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f850 	bl	8003db8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d1a:	f000 f8e3 	bl	8003ee4 <prvAddNewTaskToReadyList>
 8003d1e:	e001      	b.n	8003d24 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d24:	697b      	ldr	r3, [r7, #20]
	}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3728      	adds	r7, #40	; 0x28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b08c      	sub	sp, #48	; 0x30
 8003d32:	af04      	add	r7, sp, #16
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	603b      	str	r3, [r7, #0]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 feb4 	bl	8004ab0 <pvPortMalloc>
 8003d48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00e      	beq.n	8003d6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003d50:	20a0      	movs	r0, #160	; 0xa0
 8003d52:	f000 fead 	bl	8004ab0 <pvPortMalloc>
 8003d56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30
 8003d64:	e005      	b.n	8003d72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d66:	6978      	ldr	r0, [r7, #20]
 8003d68:	f000 ff66 	bl	8004c38 <vPortFree>
 8003d6c:	e001      	b.n	8003d72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d017      	beq.n	8003da8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d80:	88fa      	ldrh	r2, [r7, #6]
 8003d82:	2300      	movs	r3, #0
 8003d84:	9303      	str	r3, [sp, #12]
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	9302      	str	r3, [sp, #8]
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 f80e 	bl	8003db8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d9c:	69f8      	ldr	r0, [r7, #28]
 8003d9e:	f000 f8a1 	bl	8003ee4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003da2:	2301      	movs	r3, #1
 8003da4:	61bb      	str	r3, [r7, #24]
 8003da6:	e002      	b.n	8003dae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003da8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003dae:	69bb      	ldr	r3, [r7, #24]
	}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3720      	adds	r7, #32
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f023 0307 	bic.w	r3, r3, #7
 8003dde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	617b      	str	r3, [r7, #20]
}
 8003dfc:	bf00      	nop
 8003dfe:	e7fe      	b.n	8003dfe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e00:	2300      	movs	r3, #0
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	e012      	b.n	8003e2c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	7819      	ldrb	r1, [r3, #0]
 8003e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	4413      	add	r3, r2
 8003e14:	3334      	adds	r3, #52	; 0x34
 8003e16:	460a      	mov	r2, r1
 8003e18:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	4413      	add	r3, r2
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d006      	beq.n	8003e34 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	61fb      	str	r3, [r7, #28]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	2b0f      	cmp	r3, #15
 8003e30:	d9e9      	bls.n	8003e06 <prvInitialiseNewTask+0x4e>
 8003e32:	e000      	b.n	8003e36 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003e34:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e40:	2b06      	cmp	r3, #6
 8003e42:	d901      	bls.n	8003e48 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e44:	2306      	movs	r3, #6
 8003e46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e52:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e56:	2200      	movs	r2, #0
 8003e58:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fe79 	bl	8003b56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	3318      	adds	r3, #24
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fe74 	bl	8003b56 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	f1c3 0207 	rsb	r2, r3, #7
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	334c      	adds	r3, #76	; 0x4c
 8003e98:	224c      	movs	r2, #76	; 0x4c
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 ffdf 	bl	8004e60 <memset>
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea4:	4a0c      	ldr	r2, [pc, #48]	; (8003ed8 <prvInitialiseNewTask+0x120>)
 8003ea6:	651a      	str	r2, [r3, #80]	; 0x50
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	4a0c      	ldr	r2, [pc, #48]	; (8003edc <prvInitialiseNewTask+0x124>)
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	4a0b      	ldr	r2, [pc, #44]	; (8003ee0 <prvInitialiseNewTask+0x128>)
 8003eb2:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	68f9      	ldr	r1, [r7, #12]
 8003eb8:	69b8      	ldr	r0, [r7, #24]
 8003eba:	f000 fc47 	bl	800474c <pxPortInitialiseStack>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ece:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ed0:	bf00      	nop
 8003ed2:	3720      	adds	r7, #32
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20001534 	.word	0x20001534
 8003edc:	2000159c 	.word	0x2000159c
 8003ee0:	20001604 	.word	0x20001604

08003ee4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003eec:	f000 fd1e 	bl	800492c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ef0:	4b2a      	ldr	r3, [pc, #168]	; (8003f9c <prvAddNewTaskToReadyList+0xb8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	4a29      	ldr	r2, [pc, #164]	; (8003f9c <prvAddNewTaskToReadyList+0xb8>)
 8003ef8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003efa:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <prvAddNewTaskToReadyList+0xbc>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f02:	4a27      	ldr	r2, [pc, #156]	; (8003fa0 <prvAddNewTaskToReadyList+0xbc>)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f08:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <prvAddNewTaskToReadyList+0xb8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d110      	bne.n	8003f32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f10:	f000 fad2 	bl	80044b8 <prvInitialiseTaskLists>
 8003f14:	e00d      	b.n	8003f32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f16:	4b23      	ldr	r3, [pc, #140]	; (8003fa4 <prvAddNewTaskToReadyList+0xc0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d109      	bne.n	8003f32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f1e:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <prvAddNewTaskToReadyList+0xbc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d802      	bhi.n	8003f32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f2c:	4a1c      	ldr	r2, [pc, #112]	; (8003fa0 <prvAddNewTaskToReadyList+0xbc>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f32:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <prvAddNewTaskToReadyList+0xc4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3301      	adds	r3, #1
 8003f38:	4a1b      	ldr	r2, [pc, #108]	; (8003fa8 <prvAddNewTaskToReadyList+0xc4>)
 8003f3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	2201      	movs	r2, #1
 8003f42:	409a      	lsls	r2, r3
 8003f44:	4b19      	ldr	r3, [pc, #100]	; (8003fac <prvAddNewTaskToReadyList+0xc8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	4a18      	ldr	r2, [pc, #96]	; (8003fac <prvAddNewTaskToReadyList+0xc8>)
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4a15      	ldr	r2, [pc, #84]	; (8003fb0 <prvAddNewTaskToReadyList+0xcc>)
 8003f5c:	441a      	add	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3304      	adds	r3, #4
 8003f62:	4619      	mov	r1, r3
 8003f64:	4610      	mov	r0, r2
 8003f66:	f7ff fe02 	bl	8003b6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f6a:	f000 fd0f 	bl	800498c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <prvAddNewTaskToReadyList+0xc0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00e      	beq.n	8003f94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <prvAddNewTaskToReadyList+0xbc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d207      	bcs.n	8003f94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <prvAddNewTaskToReadyList+0xd0>)
 8003f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f94:	bf00      	nop
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	200008e8 	.word	0x200008e8
 8003fa0:	200007e8 	.word	0x200007e8
 8003fa4:	200008f4 	.word	0x200008f4
 8003fa8:	20000904 	.word	0x20000904
 8003fac:	200008f0 	.word	0x200008f0
 8003fb0:	200007ec 	.word	0x200007ec
 8003fb4:	e000ed04 	.word	0xe000ed04

08003fb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d017      	beq.n	8003ffa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003fca:	4b13      	ldr	r3, [pc, #76]	; (8004018 <vTaskDelay+0x60>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <vTaskDelay+0x30>
	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	60bb      	str	r3, [r7, #8]
}
 8003fe4:	bf00      	nop
 8003fe6:	e7fe      	b.n	8003fe6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003fe8:	f000 f884 	bl	80040f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fec:	2100      	movs	r1, #0
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fb46 	bl	8004680 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ff4:	f000 f88c 	bl	8004110 <xTaskResumeAll>
 8003ff8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d107      	bne.n	8004010 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <vTaskDelay+0x64>)
 8004002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20000910 	.word	0x20000910
 800401c:	e000ed04 	.word	0xe000ed04

08004020 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08a      	sub	sp, #40	; 0x28
 8004024:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800402a:	2300      	movs	r3, #0
 800402c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800402e:	463a      	mov	r2, r7
 8004030:	1d39      	adds	r1, r7, #4
 8004032:	f107 0308 	add.w	r3, r7, #8
 8004036:	4618      	mov	r0, r3
 8004038:	f7fc f892 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800403c:	6839      	ldr	r1, [r7, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	9202      	str	r2, [sp, #8]
 8004044:	9301      	str	r3, [sp, #4]
 8004046:	2300      	movs	r3, #0
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	2300      	movs	r3, #0
 800404c:	460a      	mov	r2, r1
 800404e:	4921      	ldr	r1, [pc, #132]	; (80040d4 <vTaskStartScheduler+0xb4>)
 8004050:	4821      	ldr	r0, [pc, #132]	; (80040d8 <vTaskStartScheduler+0xb8>)
 8004052:	f7ff fe10 	bl	8003c76 <xTaskCreateStatic>
 8004056:	4603      	mov	r3, r0
 8004058:	4a20      	ldr	r2, [pc, #128]	; (80040dc <vTaskStartScheduler+0xbc>)
 800405a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800405c:	4b1f      	ldr	r3, [pc, #124]	; (80040dc <vTaskStartScheduler+0xbc>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004064:	2301      	movs	r3, #1
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	e001      	b.n	800406e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d11b      	bne.n	80040ac <vTaskStartScheduler+0x8c>
	__asm volatile
 8004074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	613b      	str	r3, [r7, #16]
}
 8004086:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <vTaskStartScheduler+0xc0>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	334c      	adds	r3, #76	; 0x4c
 800408e:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <vTaskStartScheduler+0xc4>)
 8004090:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004092:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <vTaskStartScheduler+0xc8>)
 8004094:	f04f 32ff 	mov.w	r2, #4294967295
 8004098:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800409a:	4b14      	ldr	r3, [pc, #80]	; (80040ec <vTaskStartScheduler+0xcc>)
 800409c:	2201      	movs	r2, #1
 800409e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80040a0:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <vTaskStartScheduler+0xd0>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040a6:	f000 fbcf 	bl	8004848 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040aa:	e00e      	b.n	80040ca <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d10a      	bne.n	80040ca <vTaskStartScheduler+0xaa>
	__asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	60fb      	str	r3, [r7, #12]
}
 80040c6:	bf00      	nop
 80040c8:	e7fe      	b.n	80040c8 <vTaskStartScheduler+0xa8>
}
 80040ca:	bf00      	nop
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	08005204 	.word	0x08005204
 80040d8:	08004489 	.word	0x08004489
 80040dc:	2000090c 	.word	0x2000090c
 80040e0:	200007e8 	.word	0x200007e8
 80040e4:	200000a4 	.word	0x200000a4
 80040e8:	20000908 	.word	0x20000908
 80040ec:	200008f4 	.word	0x200008f4
 80040f0:	200008ec 	.word	0x200008ec

080040f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <vTaskSuspendAll+0x18>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3301      	adds	r3, #1
 80040fe:	4a03      	ldr	r2, [pc, #12]	; (800410c <vTaskSuspendAll+0x18>)
 8004100:	6013      	str	r3, [r2, #0]
}
 8004102:	bf00      	nop
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	20000910 	.word	0x20000910

08004110 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800411e:	4b41      	ldr	r3, [pc, #260]	; (8004224 <xTaskResumeAll+0x114>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10a      	bne.n	800413c <xTaskResumeAll+0x2c>
	__asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	603b      	str	r3, [r7, #0]
}
 8004138:	bf00      	nop
 800413a:	e7fe      	b.n	800413a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800413c:	f000 fbf6 	bl	800492c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004140:	4b38      	ldr	r3, [pc, #224]	; (8004224 <xTaskResumeAll+0x114>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3b01      	subs	r3, #1
 8004146:	4a37      	ldr	r2, [pc, #220]	; (8004224 <xTaskResumeAll+0x114>)
 8004148:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800414a:	4b36      	ldr	r3, [pc, #216]	; (8004224 <xTaskResumeAll+0x114>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d161      	bne.n	8004216 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004152:	4b35      	ldr	r3, [pc, #212]	; (8004228 <xTaskResumeAll+0x118>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d05d      	beq.n	8004216 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800415a:	e02e      	b.n	80041ba <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800415c:	4b33      	ldr	r3, [pc, #204]	; (800422c <xTaskResumeAll+0x11c>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	3318      	adds	r3, #24
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fd5b 	bl	8003c24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3304      	adds	r3, #4
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fd56 	bl	8003c24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	2201      	movs	r2, #1
 800417e:	409a      	lsls	r2, r3
 8004180:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <xTaskResumeAll+0x120>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4313      	orrs	r3, r2
 8004186:	4a2a      	ldr	r2, [pc, #168]	; (8004230 <xTaskResumeAll+0x120>)
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4a27      	ldr	r2, [pc, #156]	; (8004234 <xTaskResumeAll+0x124>)
 8004198:	441a      	add	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3304      	adds	r3, #4
 800419e:	4619      	mov	r1, r3
 80041a0:	4610      	mov	r0, r2
 80041a2:	f7ff fce4 	bl	8003b6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041aa:	4b23      	ldr	r3, [pc, #140]	; (8004238 <xTaskResumeAll+0x128>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d302      	bcc.n	80041ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80041b4:	4b21      	ldr	r3, [pc, #132]	; (800423c <xTaskResumeAll+0x12c>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041ba:	4b1c      	ldr	r3, [pc, #112]	; (800422c <xTaskResumeAll+0x11c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1cc      	bne.n	800415c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80041c8:	f000 fa18 	bl	80045fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80041cc:	4b1c      	ldr	r3, [pc, #112]	; (8004240 <xTaskResumeAll+0x130>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d010      	beq.n	80041fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041d8:	f000 f836 	bl	8004248 <xTaskIncrementTick>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80041e2:	4b16      	ldr	r3, [pc, #88]	; (800423c <xTaskResumeAll+0x12c>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f1      	bne.n	80041d8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80041f4:	4b12      	ldr	r3, [pc, #72]	; (8004240 <xTaskResumeAll+0x130>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041fa:	4b10      	ldr	r3, [pc, #64]	; (800423c <xTaskResumeAll+0x12c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d009      	beq.n	8004216 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004202:	2301      	movs	r3, #1
 8004204:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004206:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <xTaskResumeAll+0x134>)
 8004208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004216:	f000 fbb9 	bl	800498c <vPortExitCritical>

	return xAlreadyYielded;
 800421a:	68bb      	ldr	r3, [r7, #8]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20000910 	.word	0x20000910
 8004228:	200008e8 	.word	0x200008e8
 800422c:	200008a8 	.word	0x200008a8
 8004230:	200008f0 	.word	0x200008f0
 8004234:	200007ec 	.word	0x200007ec
 8004238:	200007e8 	.word	0x200007e8
 800423c:	200008fc 	.word	0x200008fc
 8004240:	200008f8 	.word	0x200008f8
 8004244:	e000ed04 	.word	0xe000ed04

08004248 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004252:	4b51      	ldr	r3, [pc, #324]	; (8004398 <xTaskIncrementTick+0x150>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f040 808d 	bne.w	8004376 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800425c:	4b4f      	ldr	r3, [pc, #316]	; (800439c <xTaskIncrementTick+0x154>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3301      	adds	r3, #1
 8004262:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004264:	4a4d      	ldr	r2, [pc, #308]	; (800439c <xTaskIncrementTick+0x154>)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d120      	bne.n	80042b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004270:	4b4b      	ldr	r3, [pc, #300]	; (80043a0 <xTaskIncrementTick+0x158>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <xTaskIncrementTick+0x48>
	__asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	603b      	str	r3, [r7, #0]
}
 800428c:	bf00      	nop
 800428e:	e7fe      	b.n	800428e <xTaskIncrementTick+0x46>
 8004290:	4b43      	ldr	r3, [pc, #268]	; (80043a0 <xTaskIncrementTick+0x158>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	4b43      	ldr	r3, [pc, #268]	; (80043a4 <xTaskIncrementTick+0x15c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a41      	ldr	r2, [pc, #260]	; (80043a0 <xTaskIncrementTick+0x158>)
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	4a41      	ldr	r2, [pc, #260]	; (80043a4 <xTaskIncrementTick+0x15c>)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	4b40      	ldr	r3, [pc, #256]	; (80043a8 <xTaskIncrementTick+0x160>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3301      	adds	r3, #1
 80042aa:	4a3f      	ldr	r2, [pc, #252]	; (80043a8 <xTaskIncrementTick+0x160>)
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	f000 f9a5 	bl	80045fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80042b2:	4b3e      	ldr	r3, [pc, #248]	; (80043ac <xTaskIncrementTick+0x164>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d34d      	bcc.n	8004358 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042bc:	4b38      	ldr	r3, [pc, #224]	; (80043a0 <xTaskIncrementTick+0x158>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <xTaskIncrementTick+0x82>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <xTaskIncrementTick+0x84>
 80042ca:	2300      	movs	r3, #0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d004      	beq.n	80042da <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042d0:	4b36      	ldr	r3, [pc, #216]	; (80043ac <xTaskIncrementTick+0x164>)
 80042d2:	f04f 32ff 	mov.w	r2, #4294967295
 80042d6:	601a      	str	r2, [r3, #0]
					break;
 80042d8:	e03e      	b.n	8004358 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042da:	4b31      	ldr	r3, [pc, #196]	; (80043a0 <xTaskIncrementTick+0x158>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d203      	bcs.n	80042fa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80042f2:	4a2e      	ldr	r2, [pc, #184]	; (80043ac <xTaskIncrementTick+0x164>)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6013      	str	r3, [r2, #0]
						break;
 80042f8:	e02e      	b.n	8004358 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	3304      	adds	r3, #4
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fc90 	bl	8003c24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004308:	2b00      	cmp	r3, #0
 800430a:	d004      	beq.n	8004316 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	3318      	adds	r3, #24
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fc87 	bl	8003c24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	2201      	movs	r2, #1
 800431c:	409a      	lsls	r2, r3
 800431e:	4b24      	ldr	r3, [pc, #144]	; (80043b0 <xTaskIncrementTick+0x168>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4313      	orrs	r3, r2
 8004324:	4a22      	ldr	r2, [pc, #136]	; (80043b0 <xTaskIncrementTick+0x168>)
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432c:	4613      	mov	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4a1f      	ldr	r2, [pc, #124]	; (80043b4 <xTaskIncrementTick+0x16c>)
 8004336:	441a      	add	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	3304      	adds	r3, #4
 800433c:	4619      	mov	r1, r3
 800433e:	4610      	mov	r0, r2
 8004340:	f7ff fc15 	bl	8003b6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004348:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <xTaskIncrementTick+0x170>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434e:	429a      	cmp	r2, r3
 8004350:	d3b4      	bcc.n	80042bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004352:	2301      	movs	r3, #1
 8004354:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004356:	e7b1      	b.n	80042bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004358:	4b17      	ldr	r3, [pc, #92]	; (80043b8 <xTaskIncrementTick+0x170>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435e:	4915      	ldr	r1, [pc, #84]	; (80043b4 <xTaskIncrementTick+0x16c>)
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d907      	bls.n	8004380 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004370:	2301      	movs	r3, #1
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	e004      	b.n	8004380 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004376:	4b11      	ldr	r3, [pc, #68]	; (80043bc <xTaskIncrementTick+0x174>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3301      	adds	r3, #1
 800437c:	4a0f      	ldr	r2, [pc, #60]	; (80043bc <xTaskIncrementTick+0x174>)
 800437e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004380:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <xTaskIncrementTick+0x178>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004388:	2301      	movs	r3, #1
 800438a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800438c:	697b      	ldr	r3, [r7, #20]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20000910 	.word	0x20000910
 800439c:	200008ec 	.word	0x200008ec
 80043a0:	200008a0 	.word	0x200008a0
 80043a4:	200008a4 	.word	0x200008a4
 80043a8:	20000900 	.word	0x20000900
 80043ac:	20000908 	.word	0x20000908
 80043b0:	200008f0 	.word	0x200008f0
 80043b4:	200007ec 	.word	0x200007ec
 80043b8:	200007e8 	.word	0x200007e8
 80043bc:	200008f8 	.word	0x200008f8
 80043c0:	200008fc 	.word	0x200008fc

080043c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043ca:	4b29      	ldr	r3, [pc, #164]	; (8004470 <vTaskSwitchContext+0xac>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043d2:	4b28      	ldr	r3, [pc, #160]	; (8004474 <vTaskSwitchContext+0xb0>)
 80043d4:	2201      	movs	r2, #1
 80043d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043d8:	e044      	b.n	8004464 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80043da:	4b26      	ldr	r3, [pc, #152]	; (8004474 <vTaskSwitchContext+0xb0>)
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80043e0:	4b25      	ldr	r3, [pc, #148]	; (8004478 <vTaskSwitchContext+0xb4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	fab3 f383 	clz	r3, r3
 80043ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80043ee:	7afb      	ldrb	r3, [r7, #11]
 80043f0:	f1c3 031f 	rsb	r3, r3, #31
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	4921      	ldr	r1, [pc, #132]	; (800447c <vTaskSwitchContext+0xb8>)
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	4613      	mov	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <vTaskSwitchContext+0x5c>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	607b      	str	r3, [r7, #4]
}
 800441c:	bf00      	nop
 800441e:	e7fe      	b.n	800441e <vTaskSwitchContext+0x5a>
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4a14      	ldr	r2, [pc, #80]	; (800447c <vTaskSwitchContext+0xb8>)
 800442c:	4413      	add	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	3308      	adds	r3, #8
 8004442:	429a      	cmp	r2, r3
 8004444:	d104      	bne.n	8004450 <vTaskSwitchContext+0x8c>
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	605a      	str	r2, [r3, #4]
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	4a0a      	ldr	r2, [pc, #40]	; (8004480 <vTaskSwitchContext+0xbc>)
 8004458:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <vTaskSwitchContext+0xbc>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	334c      	adds	r3, #76	; 0x4c
 8004460:	4a08      	ldr	r2, [pc, #32]	; (8004484 <vTaskSwitchContext+0xc0>)
 8004462:	6013      	str	r3, [r2, #0]
}
 8004464:	bf00      	nop
 8004466:	371c      	adds	r7, #28
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000910 	.word	0x20000910
 8004474:	200008fc 	.word	0x200008fc
 8004478:	200008f0 	.word	0x200008f0
 800447c:	200007ec 	.word	0x200007ec
 8004480:	200007e8 	.word	0x200007e8
 8004484:	200000a4 	.word	0x200000a4

08004488 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004490:	f000 f852 	bl	8004538 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004494:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <prvIdleTask+0x28>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d9f9      	bls.n	8004490 <prvIdleTask+0x8>
			{
				taskYIELD();
 800449c:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <prvIdleTask+0x2c>)
 800449e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044ac:	e7f0      	b.n	8004490 <prvIdleTask+0x8>
 80044ae:	bf00      	nop
 80044b0:	200007ec 	.word	0x200007ec
 80044b4:	e000ed04 	.word	0xe000ed04

080044b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044be:	2300      	movs	r3, #0
 80044c0:	607b      	str	r3, [r7, #4]
 80044c2:	e00c      	b.n	80044de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4a12      	ldr	r2, [pc, #72]	; (8004518 <prvInitialiseTaskLists+0x60>)
 80044d0:	4413      	add	r3, r2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fb20 	bl	8003b18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3301      	adds	r3, #1
 80044dc:	607b      	str	r3, [r7, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b06      	cmp	r3, #6
 80044e2:	d9ef      	bls.n	80044c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044e4:	480d      	ldr	r0, [pc, #52]	; (800451c <prvInitialiseTaskLists+0x64>)
 80044e6:	f7ff fb17 	bl	8003b18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044ea:	480d      	ldr	r0, [pc, #52]	; (8004520 <prvInitialiseTaskLists+0x68>)
 80044ec:	f7ff fb14 	bl	8003b18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044f0:	480c      	ldr	r0, [pc, #48]	; (8004524 <prvInitialiseTaskLists+0x6c>)
 80044f2:	f7ff fb11 	bl	8003b18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044f6:	480c      	ldr	r0, [pc, #48]	; (8004528 <prvInitialiseTaskLists+0x70>)
 80044f8:	f7ff fb0e 	bl	8003b18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044fc:	480b      	ldr	r0, [pc, #44]	; (800452c <prvInitialiseTaskLists+0x74>)
 80044fe:	f7ff fb0b 	bl	8003b18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004502:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <prvInitialiseTaskLists+0x78>)
 8004504:	4a05      	ldr	r2, [pc, #20]	; (800451c <prvInitialiseTaskLists+0x64>)
 8004506:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004508:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <prvInitialiseTaskLists+0x7c>)
 800450a:	4a05      	ldr	r2, [pc, #20]	; (8004520 <prvInitialiseTaskLists+0x68>)
 800450c:	601a      	str	r2, [r3, #0]
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	200007ec 	.word	0x200007ec
 800451c:	20000878 	.word	0x20000878
 8004520:	2000088c 	.word	0x2000088c
 8004524:	200008a8 	.word	0x200008a8
 8004528:	200008bc 	.word	0x200008bc
 800452c:	200008d4 	.word	0x200008d4
 8004530:	200008a0 	.word	0x200008a0
 8004534:	200008a4 	.word	0x200008a4

08004538 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800453e:	e019      	b.n	8004574 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004540:	f000 f9f4 	bl	800492c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004544:	4b10      	ldr	r3, [pc, #64]	; (8004588 <prvCheckTasksWaitingTermination+0x50>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3304      	adds	r3, #4
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff fb67 	bl	8003c24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004556:	4b0d      	ldr	r3, [pc, #52]	; (800458c <prvCheckTasksWaitingTermination+0x54>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3b01      	subs	r3, #1
 800455c:	4a0b      	ldr	r2, [pc, #44]	; (800458c <prvCheckTasksWaitingTermination+0x54>)
 800455e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <prvCheckTasksWaitingTermination+0x58>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3b01      	subs	r3, #1
 8004566:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <prvCheckTasksWaitingTermination+0x58>)
 8004568:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800456a:	f000 fa0f 	bl	800498c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f810 	bl	8004594 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004574:	4b06      	ldr	r3, [pc, #24]	; (8004590 <prvCheckTasksWaitingTermination+0x58>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e1      	bne.n	8004540 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800457c:	bf00      	nop
 800457e:	bf00      	nop
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	200008bc 	.word	0x200008bc
 800458c:	200008e8 	.word	0x200008e8
 8004590:	200008d0 	.word	0x200008d0

08004594 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	334c      	adds	r3, #76	; 0x4c
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fc65 	bl	8004e70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d108      	bne.n	80045c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fb3f 	bl	8004c38 <vPortFree>
				vPortFree( pxTCB );
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fb3c 	bl	8004c38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045c0:	e018      	b.n	80045f4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d103      	bne.n	80045d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fb33 	bl	8004c38 <vPortFree>
	}
 80045d2:	e00f      	b.n	80045f4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d00a      	beq.n	80045f4 <prvDeleteTCB+0x60>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	60fb      	str	r3, [r7, #12]
}
 80045f0:	bf00      	nop
 80045f2:	e7fe      	b.n	80045f2 <prvDeleteTCB+0x5e>
	}
 80045f4:	bf00      	nop
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004602:	4b0e      	ldr	r3, [pc, #56]	; (800463c <prvResetNextTaskUnblockTime+0x40>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <prvResetNextTaskUnblockTime+0x14>
 800460c:	2301      	movs	r3, #1
 800460e:	e000      	b.n	8004612 <prvResetNextTaskUnblockTime+0x16>
 8004610:	2300      	movs	r3, #0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d004      	beq.n	8004620 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004616:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <prvResetNextTaskUnblockTime+0x44>)
 8004618:	f04f 32ff 	mov.w	r2, #4294967295
 800461c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800461e:	e008      	b.n	8004632 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004620:	4b06      	ldr	r3, [pc, #24]	; (800463c <prvResetNextTaskUnblockTime+0x40>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	4a04      	ldr	r2, [pc, #16]	; (8004640 <prvResetNextTaskUnblockTime+0x44>)
 8004630:	6013      	str	r3, [r2, #0]
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr
 800463c:	200008a0 	.word	0x200008a0
 8004640:	20000908 	.word	0x20000908

08004644 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800464a:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <xTaskGetSchedulerState+0x34>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d102      	bne.n	8004658 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004652:	2301      	movs	r3, #1
 8004654:	607b      	str	r3, [r7, #4]
 8004656:	e008      	b.n	800466a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004658:	4b08      	ldr	r3, [pc, #32]	; (800467c <xTaskGetSchedulerState+0x38>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d102      	bne.n	8004666 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004660:	2302      	movs	r3, #2
 8004662:	607b      	str	r3, [r7, #4]
 8004664:	e001      	b.n	800466a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004666:	2300      	movs	r3, #0
 8004668:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800466a:	687b      	ldr	r3, [r7, #4]
	}
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	200008f4 	.word	0x200008f4
 800467c:	20000910 	.word	0x20000910

08004680 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800468a:	4b29      	ldr	r3, [pc, #164]	; (8004730 <prvAddCurrentTaskToDelayedList+0xb0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004690:	4b28      	ldr	r3, [pc, #160]	; (8004734 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3304      	adds	r3, #4
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff fac4 	bl	8003c24 <uxListRemove>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10b      	bne.n	80046ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80046a2:	4b24      	ldr	r3, [pc, #144]	; (8004734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	2201      	movs	r2, #1
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43da      	mvns	r2, r3
 80046b0:	4b21      	ldr	r3, [pc, #132]	; (8004738 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4013      	ands	r3, r2
 80046b6:	4a20      	ldr	r2, [pc, #128]	; (8004738 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c0:	d10a      	bne.n	80046d8 <prvAddCurrentTaskToDelayedList+0x58>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d007      	beq.n	80046d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046c8:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3304      	adds	r3, #4
 80046ce:	4619      	mov	r1, r3
 80046d0:	481a      	ldr	r0, [pc, #104]	; (800473c <prvAddCurrentTaskToDelayedList+0xbc>)
 80046d2:	f7ff fa4c 	bl	8003b6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046d6:	e026      	b.n	8004726 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4413      	add	r3, r2
 80046de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046e0:	4b14      	ldr	r3, [pc, #80]	; (8004734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d209      	bcs.n	8004704 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046f0:	4b13      	ldr	r3, [pc, #76]	; (8004740 <prvAddCurrentTaskToDelayedList+0xc0>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3304      	adds	r3, #4
 80046fa:	4619      	mov	r1, r3
 80046fc:	4610      	mov	r0, r2
 80046fe:	f7ff fa59 	bl	8003bb4 <vListInsert>
}
 8004702:	e010      	b.n	8004726 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004704:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <prvAddCurrentTaskToDelayedList+0xb4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3304      	adds	r3, #4
 800470e:	4619      	mov	r1, r3
 8004710:	4610      	mov	r0, r2
 8004712:	f7ff fa4f 	bl	8003bb4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004716:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	429a      	cmp	r2, r3
 800471e:	d202      	bcs.n	8004726 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004720:	4a09      	ldr	r2, [pc, #36]	; (8004748 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	6013      	str	r3, [r2, #0]
}
 8004726:	bf00      	nop
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	200008ec 	.word	0x200008ec
 8004734:	200007e8 	.word	0x200007e8
 8004738:	200008f0 	.word	0x200008f0
 800473c:	200008d4 	.word	0x200008d4
 8004740:	200008a4 	.word	0x200008a4
 8004744:	200008a0 	.word	0x200008a0
 8004748:	20000908 	.word	0x20000908

0800474c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3b04      	subs	r3, #4
 800475c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3b04      	subs	r3, #4
 800476a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f023 0201 	bic.w	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3b04      	subs	r3, #4
 800477a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800477c:	4a08      	ldr	r2, [pc, #32]	; (80047a0 <pxPortInitialiseStack+0x54>)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3b14      	subs	r3, #20
 8004786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3b20      	subs	r3, #32
 8004792:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004794:	68fb      	ldr	r3, [r7, #12]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr
 80047a0:	080047a5 	.word	0x080047a5

080047a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047ae:	4b12      	ldr	r3, [pc, #72]	; (80047f8 <prvTaskExitError+0x54>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b6:	d00a      	beq.n	80047ce <prvTaskExitError+0x2a>
	__asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	60fb      	str	r3, [r7, #12]
}
 80047ca:	bf00      	nop
 80047cc:	e7fe      	b.n	80047cc <prvTaskExitError+0x28>
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	60bb      	str	r3, [r7, #8]
}
 80047e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047e2:	bf00      	nop
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0fc      	beq.n	80047e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047ea:	bf00      	nop
 80047ec:	bf00      	nop
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000054 	.word	0x20000054
 80047fc:	00000000 	.word	0x00000000

08004800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004800:	4b07      	ldr	r3, [pc, #28]	; (8004820 <pxCurrentTCBConst2>)
 8004802:	6819      	ldr	r1, [r3, #0]
 8004804:	6808      	ldr	r0, [r1, #0]
 8004806:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800480a:	f380 8809 	msr	PSP, r0
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f04f 0000 	mov.w	r0, #0
 8004816:	f380 8811 	msr	BASEPRI, r0
 800481a:	f04e 0e0d 	orr.w	lr, lr, #13
 800481e:	4770      	bx	lr

08004820 <pxCurrentTCBConst2>:
 8004820:	200007e8 	.word	0x200007e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop

08004828 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004828:	4806      	ldr	r0, [pc, #24]	; (8004844 <prvPortStartFirstTask+0x1c>)
 800482a:	6800      	ldr	r0, [r0, #0]
 800482c:	6800      	ldr	r0, [r0, #0]
 800482e:	f380 8808 	msr	MSP, r0
 8004832:	b662      	cpsie	i
 8004834:	b661      	cpsie	f
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	df00      	svc	0
 8004840:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004842:	bf00      	nop
 8004844:	e000ed08 	.word	0xe000ed08

08004848 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800484e:	4b32      	ldr	r3, [pc, #200]	; (8004918 <xPortStartScheduler+0xd0>)
 8004850:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	b2db      	uxtb	r3, r3
 8004858:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	22ff      	movs	r2, #255	; 0xff
 800485e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004870:	b2da      	uxtb	r2, r3
 8004872:	4b2a      	ldr	r3, [pc, #168]	; (800491c <xPortStartScheduler+0xd4>)
 8004874:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004876:	4b2a      	ldr	r3, [pc, #168]	; (8004920 <xPortStartScheduler+0xd8>)
 8004878:	2207      	movs	r2, #7
 800487a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800487c:	e009      	b.n	8004892 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800487e:	4b28      	ldr	r3, [pc, #160]	; (8004920 <xPortStartScheduler+0xd8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3b01      	subs	r3, #1
 8004884:	4a26      	ldr	r2, [pc, #152]	; (8004920 <xPortStartScheduler+0xd8>)
 8004886:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004888:	78fb      	ldrb	r3, [r7, #3]
 800488a:	b2db      	uxtb	r3, r3
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	b2db      	uxtb	r3, r3
 8004890:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489a:	2b80      	cmp	r3, #128	; 0x80
 800489c:	d0ef      	beq.n	800487e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800489e:	4b20      	ldr	r3, [pc, #128]	; (8004920 <xPortStartScheduler+0xd8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f1c3 0307 	rsb	r3, r3, #7
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d00a      	beq.n	80048c0 <xPortStartScheduler+0x78>
	__asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	60bb      	str	r3, [r7, #8]
}
 80048bc:	bf00      	nop
 80048be:	e7fe      	b.n	80048be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048c0:	4b17      	ldr	r3, [pc, #92]	; (8004920 <xPortStartScheduler+0xd8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	4a16      	ldr	r2, [pc, #88]	; (8004920 <xPortStartScheduler+0xd8>)
 80048c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048ca:	4b15      	ldr	r3, [pc, #84]	; (8004920 <xPortStartScheduler+0xd8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048d2:	4a13      	ldr	r2, [pc, #76]	; (8004920 <xPortStartScheduler+0xd8>)
 80048d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048de:	4b11      	ldr	r3, [pc, #68]	; (8004924 <xPortStartScheduler+0xdc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a10      	ldr	r2, [pc, #64]	; (8004924 <xPortStartScheduler+0xdc>)
 80048e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048ea:	4b0e      	ldr	r3, [pc, #56]	; (8004924 <xPortStartScheduler+0xdc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a0d      	ldr	r2, [pc, #52]	; (8004924 <xPortStartScheduler+0xdc>)
 80048f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80048f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80048f6:	f000 f8b9 	bl	8004a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80048fa:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <xPortStartScheduler+0xe0>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004900:	f7ff ff92 	bl	8004828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004904:	f7ff fd5e 	bl	80043c4 <vTaskSwitchContext>
	prvTaskExitError();
 8004908:	f7ff ff4c 	bl	80047a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	e000e400 	.word	0xe000e400
 800491c:	20000914 	.word	0x20000914
 8004920:	20000918 	.word	0x20000918
 8004924:	e000ed20 	.word	0xe000ed20
 8004928:	20000054 	.word	0x20000054

0800492c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	607b      	str	r3, [r7, #4]
}
 8004944:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004946:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <vPortEnterCritical+0x58>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3301      	adds	r3, #1
 800494c:	4a0d      	ldr	r2, [pc, #52]	; (8004984 <vPortEnterCritical+0x58>)
 800494e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <vPortEnterCritical+0x58>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d10f      	bne.n	8004978 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004958:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <vPortEnterCritical+0x5c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <vPortEnterCritical+0x4c>
	__asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	603b      	str	r3, [r7, #0]
}
 8004974:	bf00      	nop
 8004976:	e7fe      	b.n	8004976 <vPortEnterCritical+0x4a>
	}
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20000054 	.word	0x20000054
 8004988:	e000ed04 	.word	0xe000ed04

0800498c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004992:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <vPortExitCritical+0x4c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10a      	bne.n	80049b0 <vPortExitCritical+0x24>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	607b      	str	r3, [r7, #4]
}
 80049ac:	bf00      	nop
 80049ae:	e7fe      	b.n	80049ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <vPortExitCritical+0x4c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <vPortExitCritical+0x4c>)
 80049b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80049ba:	4b07      	ldr	r3, [pc, #28]	; (80049d8 <vPortExitCritical+0x4c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d105      	bne.n	80049ce <vPortExitCritical+0x42>
 80049c2:	2300      	movs	r3, #0
 80049c4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr
 80049d8:	20000054 	.word	0x20000054
 80049dc:	00000000 	.word	0x00000000

080049e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049e0:	f3ef 8009 	mrs	r0, PSP
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	4b0d      	ldr	r3, [pc, #52]	; (8004a20 <pxCurrentTCBConst>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80049f0:	6010      	str	r0, [r2, #0]
 80049f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80049f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049fa:	f380 8811 	msr	BASEPRI, r0
 80049fe:	f7ff fce1 	bl	80043c4 <vTaskSwitchContext>
 8004a02:	f04f 0000 	mov.w	r0, #0
 8004a06:	f380 8811 	msr	BASEPRI, r0
 8004a0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004a0e:	6819      	ldr	r1, [r3, #0]
 8004a10:	6808      	ldr	r0, [r1, #0]
 8004a12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a16:	f380 8809 	msr	PSP, r0
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	4770      	bx	lr

08004a20 <pxCurrentTCBConst>:
 8004a20:	200007e8 	.word	0x200007e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop

08004a28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	607b      	str	r3, [r7, #4]
}
 8004a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a42:	f7ff fc01 	bl	8004248 <xTaskIncrementTick>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a4c:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <xPortSysTickHandler+0x40>)
 8004a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	2300      	movs	r3, #0
 8004a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	f383 8811 	msr	BASEPRI, r3
}
 8004a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	e000ed04 	.word	0xe000ed04

08004a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a70:	4b0a      	ldr	r3, [pc, #40]	; (8004a9c <vPortSetupTimerInterrupt+0x30>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a76:	4b0a      	ldr	r3, [pc, #40]	; (8004aa0 <vPortSetupTimerInterrupt+0x34>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a7c:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <vPortSetupTimerInterrupt+0x38>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <vPortSetupTimerInterrupt+0x3c>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	099b      	lsrs	r3, r3, #6
 8004a88:	4a08      	ldr	r2, [pc, #32]	; (8004aac <vPortSetupTimerInterrupt+0x40>)
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a8e:	4b03      	ldr	r3, [pc, #12]	; (8004a9c <vPortSetupTimerInterrupt+0x30>)
 8004a90:	2207      	movs	r2, #7
 8004a92:	601a      	str	r2, [r3, #0]
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr
 8004a9c:	e000e010 	.word	0xe000e010
 8004aa0:	e000e018 	.word	0xe000e018
 8004aa4:	20000018 	.word	0x20000018
 8004aa8:	10624dd3 	.word	0x10624dd3
 8004aac:	e000e014 	.word	0xe000e014

08004ab0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08a      	sub	sp, #40	; 0x28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004abc:	f7ff fb1a 	bl	80040f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ac0:	4b58      	ldr	r3, [pc, #352]	; (8004c24 <pvPortMalloc+0x174>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ac8:	f000 f910 	bl	8004cec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004acc:	4b56      	ldr	r3, [pc, #344]	; (8004c28 <pvPortMalloc+0x178>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f040 808e 	bne.w	8004bf6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01d      	beq.n	8004b1c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004ae0:	2208      	movs	r2, #8
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d014      	beq.n	8004b1c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f023 0307 	bic.w	r3, r3, #7
 8004af8:	3308      	adds	r3, #8
 8004afa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <pvPortMalloc+0x6c>
	__asm volatile
 8004b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	617b      	str	r3, [r7, #20]
}
 8004b18:	bf00      	nop
 8004b1a:	e7fe      	b.n	8004b1a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d069      	beq.n	8004bf6 <pvPortMalloc+0x146>
 8004b22:	4b42      	ldr	r3, [pc, #264]	; (8004c2c <pvPortMalloc+0x17c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d864      	bhi.n	8004bf6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b2c:	4b40      	ldr	r3, [pc, #256]	; (8004c30 <pvPortMalloc+0x180>)
 8004b2e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b30:	4b3f      	ldr	r3, [pc, #252]	; (8004c30 <pvPortMalloc+0x180>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b36:	e004      	b.n	8004b42 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d903      	bls.n	8004b54 <pvPortMalloc+0xa4>
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1f1      	bne.n	8004b38 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b54:	4b33      	ldr	r3, [pc, #204]	; (8004c24 <pvPortMalloc+0x174>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d04b      	beq.n	8004bf6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2208      	movs	r2, #8
 8004b64:	4413      	add	r3, r2
 8004b66:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	1ad2      	subs	r2, r2, r3
 8004b78:	2308      	movs	r3, #8
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d91f      	bls.n	8004bc0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4413      	add	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <pvPortMalloc+0xf8>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	613b      	str	r3, [r7, #16]
}
 8004ba4:	bf00      	nop
 8004ba6:	e7fe      	b.n	8004ba6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	1ad2      	subs	r2, r2, r3
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bba:	69b8      	ldr	r0, [r7, #24]
 8004bbc:	f000 f8f8 	bl	8004db0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bc0:	4b1a      	ldr	r3, [pc, #104]	; (8004c2c <pvPortMalloc+0x17c>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	4a18      	ldr	r2, [pc, #96]	; (8004c2c <pvPortMalloc+0x17c>)
 8004bcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bce:	4b17      	ldr	r3, [pc, #92]	; (8004c2c <pvPortMalloc+0x17c>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	4b18      	ldr	r3, [pc, #96]	; (8004c34 <pvPortMalloc+0x184>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d203      	bcs.n	8004be2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bda:	4b14      	ldr	r3, [pc, #80]	; (8004c2c <pvPortMalloc+0x17c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a15      	ldr	r2, [pc, #84]	; (8004c34 <pvPortMalloc+0x184>)
 8004be0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <pvPortMalloc+0x178>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004bf6:	f7ff fa8b 	bl	8004110 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <pvPortMalloc+0x16a>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	60fb      	str	r3, [r7, #12]
}
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <pvPortMalloc+0x168>
	return pvReturn;
 8004c1a:	69fb      	ldr	r3, [r7, #28]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3728      	adds	r7, #40	; 0x28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	20001524 	.word	0x20001524
 8004c28:	20001530 	.word	0x20001530
 8004c2c:	20001528 	.word	0x20001528
 8004c30:	2000151c 	.word	0x2000151c
 8004c34:	2000152c 	.word	0x2000152c

08004c38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d048      	beq.n	8004cdc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c4a:	2308      	movs	r3, #8
 8004c4c:	425b      	negs	r3, r3
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4413      	add	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	4b21      	ldr	r3, [pc, #132]	; (8004ce4 <vPortFree+0xac>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4013      	ands	r3, r2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10a      	bne.n	8004c7c <vPortFree+0x44>
	__asm volatile
 8004c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	60fb      	str	r3, [r7, #12]
}
 8004c78:	bf00      	nop
 8004c7a:	e7fe      	b.n	8004c7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <vPortFree+0x62>
	__asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	60bb      	str	r3, [r7, #8]
}
 8004c96:	bf00      	nop
 8004c98:	e7fe      	b.n	8004c98 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	4b11      	ldr	r3, [pc, #68]	; (8004ce4 <vPortFree+0xac>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d019      	beq.n	8004cdc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d115      	bne.n	8004cdc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <vPortFree+0xac>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	401a      	ands	r2, r3
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004cc0:	f7ff fa18 	bl	80040f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <vPortFree+0xb0>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4413      	add	r3, r2
 8004cce:	4a06      	ldr	r2, [pc, #24]	; (8004ce8 <vPortFree+0xb0>)
 8004cd0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cd2:	6938      	ldr	r0, [r7, #16]
 8004cd4:	f000 f86c 	bl	8004db0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004cd8:	f7ff fa1a 	bl	8004110 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004cdc:	bf00      	nop
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20001530 	.word	0x20001530
 8004ce8:	20001528 	.word	0x20001528

08004cec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cf2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004cf6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cf8:	4b27      	ldr	r3, [pc, #156]	; (8004d98 <prvHeapInit+0xac>)
 8004cfa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00c      	beq.n	8004d20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3307      	adds	r3, #7
 8004d0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0307 	bic.w	r3, r3, #7
 8004d12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	4a1f      	ldr	r2, [pc, #124]	; (8004d98 <prvHeapInit+0xac>)
 8004d1c:	4413      	add	r3, r2
 8004d1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d24:	4a1d      	ldr	r2, [pc, #116]	; (8004d9c <prvHeapInit+0xb0>)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d2a:	4b1c      	ldr	r3, [pc, #112]	; (8004d9c <prvHeapInit+0xb0>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	4413      	add	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d38:	2208      	movs	r2, #8
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0307 	bic.w	r3, r3, #7
 8004d46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4a15      	ldr	r2, [pc, #84]	; (8004da0 <prvHeapInit+0xb4>)
 8004d4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d4e:	4b14      	ldr	r3, [pc, #80]	; (8004da0 <prvHeapInit+0xb4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2200      	movs	r2, #0
 8004d54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d56:	4b12      	ldr	r3, [pc, #72]	; (8004da0 <prvHeapInit+0xb4>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	1ad2      	subs	r2, r2, r3
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d6c:	4b0c      	ldr	r3, [pc, #48]	; (8004da0 <prvHeapInit+0xb4>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	4a0a      	ldr	r2, [pc, #40]	; (8004da4 <prvHeapInit+0xb8>)
 8004d7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	4a09      	ldr	r2, [pc, #36]	; (8004da8 <prvHeapInit+0xbc>)
 8004d82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d84:	4b09      	ldr	r3, [pc, #36]	; (8004dac <prvHeapInit+0xc0>)
 8004d86:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d8a:	601a      	str	r2, [r3, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc80      	pop	{r7}
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	2000091c 	.word	0x2000091c
 8004d9c:	2000151c 	.word	0x2000151c
 8004da0:	20001524 	.word	0x20001524
 8004da4:	2000152c 	.word	0x2000152c
 8004da8:	20001528 	.word	0x20001528
 8004dac:	20001530 	.word	0x20001530

08004db0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004db8:	4b27      	ldr	r3, [pc, #156]	; (8004e58 <prvInsertBlockIntoFreeList+0xa8>)
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	e002      	b.n	8004dc4 <prvInsertBlockIntoFreeList+0x14>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d8f7      	bhi.n	8004dbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	4413      	add	r3, r2
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d108      	bne.n	8004df2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	441a      	add	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	441a      	add	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d118      	bne.n	8004e38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	4b14      	ldr	r3, [pc, #80]	; (8004e5c <prvInsertBlockIntoFreeList+0xac>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d00d      	beq.n	8004e2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	441a      	add	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	e008      	b.n	8004e40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e2e:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <prvInsertBlockIntoFreeList+0xac>)
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	e003      	b.n	8004e40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d002      	beq.n	8004e4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e4e:	bf00      	nop
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr
 8004e58:	2000151c 	.word	0x2000151c
 8004e5c:	20001524 	.word	0x20001524

08004e60 <memset>:
 8004e60:	4603      	mov	r3, r0
 8004e62:	4402      	add	r2, r0
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d100      	bne.n	8004e6a <memset+0xa>
 8004e68:	4770      	bx	lr
 8004e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e6e:	e7f9      	b.n	8004e64 <memset+0x4>

08004e70 <_reclaim_reent>:
 8004e70:	4b29      	ldr	r3, [pc, #164]	; (8004f18 <_reclaim_reent+0xa8>)
 8004e72:	b570      	push	{r4, r5, r6, lr}
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4604      	mov	r4, r0
 8004e78:	4283      	cmp	r3, r0
 8004e7a:	d04b      	beq.n	8004f14 <_reclaim_reent+0xa4>
 8004e7c:	69c3      	ldr	r3, [r0, #28]
 8004e7e:	b143      	cbz	r3, 8004e92 <_reclaim_reent+0x22>
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d144      	bne.n	8004f10 <_reclaim_reent+0xa0>
 8004e86:	69e3      	ldr	r3, [r4, #28]
 8004e88:	6819      	ldr	r1, [r3, #0]
 8004e8a:	b111      	cbz	r1, 8004e92 <_reclaim_reent+0x22>
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f000 f86b 	bl	8004f68 <_free_r>
 8004e92:	6961      	ldr	r1, [r4, #20]
 8004e94:	b111      	cbz	r1, 8004e9c <_reclaim_reent+0x2c>
 8004e96:	4620      	mov	r0, r4
 8004e98:	f000 f866 	bl	8004f68 <_free_r>
 8004e9c:	69e1      	ldr	r1, [r4, #28]
 8004e9e:	b111      	cbz	r1, 8004ea6 <_reclaim_reent+0x36>
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	f000 f861 	bl	8004f68 <_free_r>
 8004ea6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004ea8:	b111      	cbz	r1, 8004eb0 <_reclaim_reent+0x40>
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f000 f85c 	bl	8004f68 <_free_r>
 8004eb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004eb2:	b111      	cbz	r1, 8004eba <_reclaim_reent+0x4a>
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	f000 f857 	bl	8004f68 <_free_r>
 8004eba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ebc:	b111      	cbz	r1, 8004ec4 <_reclaim_reent+0x54>
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f000 f852 	bl	8004f68 <_free_r>
 8004ec4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004ec6:	b111      	cbz	r1, 8004ece <_reclaim_reent+0x5e>
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f000 f84d 	bl	8004f68 <_free_r>
 8004ece:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004ed0:	b111      	cbz	r1, 8004ed8 <_reclaim_reent+0x68>
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f000 f848 	bl	8004f68 <_free_r>
 8004ed8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004eda:	b111      	cbz	r1, 8004ee2 <_reclaim_reent+0x72>
 8004edc:	4620      	mov	r0, r4
 8004ede:	f000 f843 	bl	8004f68 <_free_r>
 8004ee2:	6a23      	ldr	r3, [r4, #32]
 8004ee4:	b1b3      	cbz	r3, 8004f14 <_reclaim_reent+0xa4>
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004eec:	4718      	bx	r3
 8004eee:	5949      	ldr	r1, [r1, r5]
 8004ef0:	b941      	cbnz	r1, 8004f04 <_reclaim_reent+0x94>
 8004ef2:	3504      	adds	r5, #4
 8004ef4:	69e3      	ldr	r3, [r4, #28]
 8004ef6:	2d80      	cmp	r5, #128	; 0x80
 8004ef8:	68d9      	ldr	r1, [r3, #12]
 8004efa:	d1f8      	bne.n	8004eee <_reclaim_reent+0x7e>
 8004efc:	4620      	mov	r0, r4
 8004efe:	f000 f833 	bl	8004f68 <_free_r>
 8004f02:	e7c0      	b.n	8004e86 <_reclaim_reent+0x16>
 8004f04:	680e      	ldr	r6, [r1, #0]
 8004f06:	4620      	mov	r0, r4
 8004f08:	f000 f82e 	bl	8004f68 <_free_r>
 8004f0c:	4631      	mov	r1, r6
 8004f0e:	e7ef      	b.n	8004ef0 <_reclaim_reent+0x80>
 8004f10:	2500      	movs	r5, #0
 8004f12:	e7ef      	b.n	8004ef4 <_reclaim_reent+0x84>
 8004f14:	bd70      	pop	{r4, r5, r6, pc}
 8004f16:	bf00      	nop
 8004f18:	200000a4 	.word	0x200000a4

08004f1c <__libc_init_array>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	2600      	movs	r6, #0
 8004f20:	4d0c      	ldr	r5, [pc, #48]	; (8004f54 <__libc_init_array+0x38>)
 8004f22:	4c0d      	ldr	r4, [pc, #52]	; (8004f58 <__libc_init_array+0x3c>)
 8004f24:	1b64      	subs	r4, r4, r5
 8004f26:	10a4      	asrs	r4, r4, #2
 8004f28:	42a6      	cmp	r6, r4
 8004f2a:	d109      	bne.n	8004f40 <__libc_init_array+0x24>
 8004f2c:	f000 f870 	bl	8005010 <_init>
 8004f30:	2600      	movs	r6, #0
 8004f32:	4d0a      	ldr	r5, [pc, #40]	; (8004f5c <__libc_init_array+0x40>)
 8004f34:	4c0a      	ldr	r4, [pc, #40]	; (8004f60 <__libc_init_array+0x44>)
 8004f36:	1b64      	subs	r4, r4, r5
 8004f38:	10a4      	asrs	r4, r4, #2
 8004f3a:	42a6      	cmp	r6, r4
 8004f3c:	d105      	bne.n	8004f4a <__libc_init_array+0x2e>
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
 8004f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f44:	4798      	blx	r3
 8004f46:	3601      	adds	r6, #1
 8004f48:	e7ee      	b.n	8004f28 <__libc_init_array+0xc>
 8004f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f4e:	4798      	blx	r3
 8004f50:	3601      	adds	r6, #1
 8004f52:	e7f2      	b.n	8004f3a <__libc_init_array+0x1e>
 8004f54:	08005230 	.word	0x08005230
 8004f58:	08005230 	.word	0x08005230
 8004f5c:	08005230 	.word	0x08005230
 8004f60:	08005234 	.word	0x08005234

08004f64 <__retarget_lock_acquire_recursive>:
 8004f64:	4770      	bx	lr

08004f66 <__retarget_lock_release_recursive>:
 8004f66:	4770      	bx	lr

08004f68 <_free_r>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	4605      	mov	r5, r0
 8004f6c:	2900      	cmp	r1, #0
 8004f6e:	d040      	beq.n	8004ff2 <_free_r+0x8a>
 8004f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f74:	1f0c      	subs	r4, r1, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bfb8      	it	lt
 8004f7a:	18e4      	addlt	r4, r4, r3
 8004f7c:	f000 f83c 	bl	8004ff8 <__malloc_lock>
 8004f80:	4a1c      	ldr	r2, [pc, #112]	; (8004ff4 <_free_r+0x8c>)
 8004f82:	6813      	ldr	r3, [r2, #0]
 8004f84:	b933      	cbnz	r3, 8004f94 <_free_r+0x2c>
 8004f86:	6063      	str	r3, [r4, #4]
 8004f88:	6014      	str	r4, [r2, #0]
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f90:	f000 b838 	b.w	8005004 <__malloc_unlock>
 8004f94:	42a3      	cmp	r3, r4
 8004f96:	d908      	bls.n	8004faa <_free_r+0x42>
 8004f98:	6820      	ldr	r0, [r4, #0]
 8004f9a:	1821      	adds	r1, r4, r0
 8004f9c:	428b      	cmp	r3, r1
 8004f9e:	bf01      	itttt	eq
 8004fa0:	6819      	ldreq	r1, [r3, #0]
 8004fa2:	685b      	ldreq	r3, [r3, #4]
 8004fa4:	1809      	addeq	r1, r1, r0
 8004fa6:	6021      	streq	r1, [r4, #0]
 8004fa8:	e7ed      	b.n	8004f86 <_free_r+0x1e>
 8004faa:	461a      	mov	r2, r3
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	b10b      	cbz	r3, 8004fb4 <_free_r+0x4c>
 8004fb0:	42a3      	cmp	r3, r4
 8004fb2:	d9fa      	bls.n	8004faa <_free_r+0x42>
 8004fb4:	6811      	ldr	r1, [r2, #0]
 8004fb6:	1850      	adds	r0, r2, r1
 8004fb8:	42a0      	cmp	r0, r4
 8004fba:	d10b      	bne.n	8004fd4 <_free_r+0x6c>
 8004fbc:	6820      	ldr	r0, [r4, #0]
 8004fbe:	4401      	add	r1, r0
 8004fc0:	1850      	adds	r0, r2, r1
 8004fc2:	4283      	cmp	r3, r0
 8004fc4:	6011      	str	r1, [r2, #0]
 8004fc6:	d1e0      	bne.n	8004f8a <_free_r+0x22>
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	4408      	add	r0, r1
 8004fce:	6010      	str	r0, [r2, #0]
 8004fd0:	6053      	str	r3, [r2, #4]
 8004fd2:	e7da      	b.n	8004f8a <_free_r+0x22>
 8004fd4:	d902      	bls.n	8004fdc <_free_r+0x74>
 8004fd6:	230c      	movs	r3, #12
 8004fd8:	602b      	str	r3, [r5, #0]
 8004fda:	e7d6      	b.n	8004f8a <_free_r+0x22>
 8004fdc:	6820      	ldr	r0, [r4, #0]
 8004fde:	1821      	adds	r1, r4, r0
 8004fe0:	428b      	cmp	r3, r1
 8004fe2:	bf01      	itttt	eq
 8004fe4:	6819      	ldreq	r1, [r3, #0]
 8004fe6:	685b      	ldreq	r3, [r3, #4]
 8004fe8:	1809      	addeq	r1, r1, r0
 8004fea:	6021      	streq	r1, [r4, #0]
 8004fec:	6063      	str	r3, [r4, #4]
 8004fee:	6054      	str	r4, [r2, #4]
 8004ff0:	e7cb      	b.n	8004f8a <_free_r+0x22>
 8004ff2:	bd38      	pop	{r3, r4, r5, pc}
 8004ff4:	20001670 	.word	0x20001670

08004ff8 <__malloc_lock>:
 8004ff8:	4801      	ldr	r0, [pc, #4]	; (8005000 <__malloc_lock+0x8>)
 8004ffa:	f7ff bfb3 	b.w	8004f64 <__retarget_lock_acquire_recursive>
 8004ffe:	bf00      	nop
 8005000:	2000166c 	.word	0x2000166c

08005004 <__malloc_unlock>:
 8005004:	4801      	ldr	r0, [pc, #4]	; (800500c <__malloc_unlock+0x8>)
 8005006:	f7ff bfae 	b.w	8004f66 <__retarget_lock_release_recursive>
 800500a:	bf00      	nop
 800500c:	2000166c 	.word	0x2000166c

08005010 <_init>:
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005012:	bf00      	nop
 8005014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005016:	bc08      	pop	{r3}
 8005018:	469e      	mov	lr, r3
 800501a:	4770      	bx	lr

0800501c <_fini>:
 800501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501e:	bf00      	nop
 8005020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005022:	bc08      	pop	{r3}
 8005024:	469e      	mov	lr, r3
 8005026:	4770      	bx	lr
