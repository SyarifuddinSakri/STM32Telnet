
ModbusTelnet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e08  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004f18  08004f18  00014f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fa8  08004fa8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08004fa8  08004fa8  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fa8  08004fa8  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fa8  08004fa8  00014fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fac  08004fac  00014fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08004fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015cc  200000a8  08005058  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001674  08005058  00021674  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a992  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002808  00000000  00000000  0002aaa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b28  00000000  00000000  0002d2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000866  00000000  00000000  0002ddd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b7c  00000000  00000000  0002e63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db5c  00000000  00000000  000471ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b0f0  00000000  00000000  00054d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002db0  00000000  00000000  000dfe08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e2bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a8 	.word	0x200000a8
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f00 	.word	0x08004f00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000ac 	.word	0x200000ac
 800014c:	08004f00 	.word	0x08004f00

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	200000c4 	.word	0x200000c4
 800018c:	20000164 	.word	0x20000164

08000190 <TaskFunction>:
		.dhcp = NETINFO_STATIC
};
netmode_type gNetMode = {
		NM_FORCEARP | NM_WAKEONLAN | NM_PPPOE | 128
};
void TaskFunction(void *pvParameters) {
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
    for (;;) {
        // Task code here
    	startTelnet();
 8000198:	f000 fa80 	bl	800069c <startTelnet>
        vTaskDelay(pdMS_TO_TICKS(1));  // Delay for 1000 milliseconds
 800019c:	2001      	movs	r0, #1
 800019e:	f003 fe81 	bl	8003ea4 <vTaskDelay>
    	startTelnet();
 80001a2:	e7f9      	b.n	8000198 <TaskFunction+0x8>

080001a4 <Task2Function>:
    }
}
void Task2Function(void *pvParameters) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
    for (;;) {
        // Task 2 code here
  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 80001ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <Task2Function+0x1c>)
 80001b2:	f002 fa81 	bl	80026b8 <HAL_GPIO_TogglePin>
        vTaskDelay(pdMS_TO_TICKS(500));  // Delay for 500 milliseconds
 80001b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001ba:	f003 fe73 	bl	8003ea4 <vTaskDelay>
  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 80001be:	e7f5      	b.n	80001ac <Task2Function+0x8>
 80001c0:	40010c00 	.word	0x40010c00

080001c4 <main>:
    }
}
int main(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af02      	add	r7, sp, #8

  HAL_Init();
 80001ca:	f001 ff6f 	bl	80020ac <HAL_Init>

  SystemClock_Config();
 80001ce:	f000 f82b 	bl	8000228 <SystemClock_Config>

  MX_GPIO_Init();
 80001d2:	f000 f8a5 	bl	8000320 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001d6:	f000 f86d 	bl	80002b4 <MX_SPI1_Init>

  /* Start scheduler */
  W5500Init();
 80001da:	f000 feaf 	bl	8000f3c <W5500Init>
  ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO2);
 80001de:	490d      	ldr	r1, [pc, #52]	; (8000214 <main+0x50>)
 80001e0:	2000      	movs	r0, #0
 80001e2:	f001 f8ad 	bl	8001340 <ctlnetwork>
//  ctlnetwork(CN_SET_NETMODE, (void*) &gNetMode);
  xTaskCreate(TaskFunction, "Task1", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 80001e6:	2300      	movs	r3, #0
 80001e8:	9301      	str	r3, [sp, #4]
 80001ea:	2301      	movs	r3, #1
 80001ec:	9300      	str	r3, [sp, #0]
 80001ee:	2300      	movs	r3, #0
 80001f0:	2280      	movs	r2, #128	; 0x80
 80001f2:	4909      	ldr	r1, [pc, #36]	; (8000218 <main+0x54>)
 80001f4:	4809      	ldr	r0, [pc, #36]	; (800021c <main+0x58>)
 80001f6:	f003 fd10 	bl	8003c1a <xTaskCreate>
  xTaskCreate(Task2Function, "Task2", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
 80001fa:	2300      	movs	r3, #0
 80001fc:	9301      	str	r3, [sp, #4]
 80001fe:	2302      	movs	r3, #2
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2300      	movs	r3, #0
 8000204:	2280      	movs	r2, #128	; 0x80
 8000206:	4906      	ldr	r1, [pc, #24]	; (8000220 <main+0x5c>)
 8000208:	4806      	ldr	r0, [pc, #24]	; (8000224 <main+0x60>)
 800020a:	f003 fd06 	bl	8003c1a <xTaskCreate>

  vTaskStartScheduler();
 800020e:	f003 fe7d 	bl	8003f0c <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000212:	e7fe      	b.n	8000212 <main+0x4e>
 8000214:	20000000 	.word	0x20000000
 8000218:	08004f18 	.word	0x08004f18
 800021c:	08000191 	.word	0x08000191
 8000220:	08004f20 	.word	0x08004f20
 8000224:	080001a5 	.word	0x080001a5

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b090      	sub	sp, #64	; 0x40
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f004 fd8a 	bl	8004d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024a:	2301      	movs	r3, #1
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000252:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025c:	2302      	movs	r3, #2
 800025e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000264:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000266:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800026a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026c:	f107 0318 	add.w	r3, r7, #24
 8000270:	4618      	mov	r0, r3
 8000272:	f002 fa3b 	bl	80026ec <HAL_RCC_OscConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800027c:	f000 f8e0 	bl	8000440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000280:	230f      	movs	r3, #15
 8000282:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000284:	2302      	movs	r3, #2
 8000286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2100      	movs	r1, #0
 8000298:	4618      	mov	r0, r3
 800029a:	f002 fca9 	bl	8002bf0 <HAL_RCC_ClockConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002a4:	f000 f8cc 	bl	8000440 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80002a8:	f002 fd8c 	bl	8002dc4 <HAL_RCC_EnableCSS>
}
 80002ac:	bf00      	nop
 80002ae:	3740      	adds	r7, #64	; 0x40
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002b8:	4b17      	ldr	r3, [pc, #92]	; (8000318 <MX_SPI1_Init+0x64>)
 80002ba:	4a18      	ldr	r2, [pc, #96]	; (800031c <MX_SPI1_Init+0x68>)
 80002bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002be:	4b16      	ldr	r3, [pc, #88]	; (8000318 <MX_SPI1_Init+0x64>)
 80002c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002c6:	4b14      	ldr	r3, [pc, #80]	; (8000318 <MX_SPI1_Init+0x64>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002cc:	4b12      	ldr	r3, [pc, #72]	; (8000318 <MX_SPI1_Init+0x64>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80002d2:	4b11      	ldr	r3, [pc, #68]	; (8000318 <MX_SPI1_Init+0x64>)
 80002d4:	2202      	movs	r2, #2
 80002d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <MX_SPI1_Init+0x64>)
 80002da:	2201      	movs	r2, #1
 80002dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <MX_SPI1_Init+0x64>)
 80002e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80002e6:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <MX_SPI1_Init+0x64>)
 80002e8:	2220      	movs	r2, #32
 80002ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002ec:	4b0a      	ldr	r3, [pc, #40]	; (8000318 <MX_SPI1_Init+0x64>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002f2:	4b09      	ldr	r3, [pc, #36]	; (8000318 <MX_SPI1_Init+0x64>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <MX_SPI1_Init+0x64>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <MX_SPI1_Init+0x64>)
 8000300:	220a      	movs	r2, #10
 8000302:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000304:	4804      	ldr	r0, [pc, #16]	; (8000318 <MX_SPI1_Init+0x64>)
 8000306:	f002 fdf5 	bl	8002ef4 <HAL_SPI_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000310:	f000 f896 	bl	8000440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000364 	.word	0x20000364
 800031c:	40013000 	.word	0x40013000

08000320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000326:	f107 0310 	add.w	r3, r7, #16
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000334:	4b3e      	ldr	r3, [pc, #248]	; (8000430 <MX_GPIO_Init+0x110>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a3d      	ldr	r2, [pc, #244]	; (8000430 <MX_GPIO_Init+0x110>)
 800033a:	f043 0310 	orr.w	r3, r3, #16
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b3b      	ldr	r3, [pc, #236]	; (8000430 <MX_GPIO_Init+0x110>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0310 	and.w	r3, r3, #16
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800034c:	4b38      	ldr	r3, [pc, #224]	; (8000430 <MX_GPIO_Init+0x110>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a37      	ldr	r2, [pc, #220]	; (8000430 <MX_GPIO_Init+0x110>)
 8000352:	f043 0320 	orr.w	r3, r3, #32
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b35      	ldr	r3, [pc, #212]	; (8000430 <MX_GPIO_Init+0x110>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0320 	and.w	r3, r3, #32
 8000360:	60bb      	str	r3, [r7, #8]
 8000362:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000364:	4b32      	ldr	r3, [pc, #200]	; (8000430 <MX_GPIO_Init+0x110>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a31      	ldr	r2, [pc, #196]	; (8000430 <MX_GPIO_Init+0x110>)
 800036a:	f043 0304 	orr.w	r3, r3, #4
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b2f      	ldr	r3, [pc, #188]	; (8000430 <MX_GPIO_Init+0x110>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0304 	and.w	r3, r3, #4
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800037c:	4b2c      	ldr	r3, [pc, #176]	; (8000430 <MX_GPIO_Init+0x110>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a2b      	ldr	r2, [pc, #172]	; (8000430 <MX_GPIO_Init+0x110>)
 8000382:	f043 0308 	orr.w	r3, r3, #8
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b29      	ldr	r3, [pc, #164]	; (8000430 <MX_GPIO_Init+0x110>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0308 	and.w	r3, r3, #8
 8000390:	603b      	str	r3, [r7, #0]
 8000392:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000394:	2201      	movs	r2, #1
 8000396:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800039a:	4826      	ldr	r0, [pc, #152]	; (8000434 <MX_GPIO_Init+0x114>)
 800039c:	f002 f974 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2103      	movs	r1, #3
 80003a4:	4824      	ldr	r0, [pc, #144]	; (8000438 <MX_GPIO_Init+0x118>)
 80003a6:	f002 f96f 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b0:	4822      	ldr	r0, [pc, #136]	; (800043c <MX_GPIO_Init+0x11c>)
 80003b2:	f002 f969 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003bc:	2301      	movs	r3, #1
 80003be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c4:	2302      	movs	r3, #2
 80003c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	4619      	mov	r1, r3
 80003ce:	4819      	ldr	r0, [pc, #100]	; (8000434 <MX_GPIO_Init+0x114>)
 80003d0:	f001 ffd6 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80003d4:	2303      	movs	r3, #3
 80003d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d8:	2301      	movs	r3, #1
 80003da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e0:	2302      	movs	r3, #2
 80003e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e4:	f107 0310 	add.w	r3, r7, #16
 80003e8:	4619      	mov	r1, r3
 80003ea:	4813      	ldr	r0, [pc, #76]	; (8000438 <MX_GPIO_Init+0x118>)
 80003ec:	f001 ffc8 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f6:	2301      	movs	r3, #1
 80003f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fe:	2302      	movs	r3, #2
 8000400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000402:	f107 0310 	add.w	r3, r7, #16
 8000406:	4619      	mov	r1, r3
 8000408:	480c      	ldr	r0, [pc, #48]	; (800043c <MX_GPIO_Init+0x11c>)
 800040a:	f001 ffb9 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800040e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000412:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000418:	2300      	movs	r3, #0
 800041a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800041c:	f107 0310 	add.w	r3, r7, #16
 8000420:	4619      	mov	r1, r3
 8000422:	4806      	ldr	r0, [pc, #24]	; (800043c <MX_GPIO_Init+0x11c>)
 8000424:	f001 ffac 	bl	8002380 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000428:	bf00      	nop
 800042a:	3720      	adds	r7, #32
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40021000 	.word	0x40021000
 8000434:	40011000 	.word	0x40011000
 8000438:	40010800 	.word	0x40010800
 800043c:	40010c00 	.word	0x40010c00

08000440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000444:	b672      	cpsid	i
}
 8000446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000448:	e7fe      	b.n	8000448 <Error_Handler+0x8>
	...

0800044c <HAL_MspInit>:
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <HAL_MspInit+0x68>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4a17      	ldr	r2, [pc, #92]	; (80004b4 <HAL_MspInit+0x68>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <HAL_MspInit+0x68>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	60bb      	str	r3, [r7, #8]
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <HAL_MspInit+0x68>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a11      	ldr	r2, [pc, #68]	; (80004b4 <HAL_MspInit+0x68>)
 8000470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <HAL_MspInit+0x68>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	2200      	movs	r2, #0
 8000484:	210f      	movs	r1, #15
 8000486:	f06f 0001 	mvn.w	r0, #1
 800048a:	f001 ff50 	bl	800232e <HAL_NVIC_SetPriority>
 800048e:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <HAL_MspInit+0x6c>)
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <HAL_MspInit+0x6c>)
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	6053      	str	r3, [r2, #4]
 80004aa:	bf00      	nop
 80004ac:	3710      	adds	r7, #16
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40010000 	.word	0x40010000

080004bc <HAL_SPI_MspInit>:
 80004bc:	b580      	push	{r7, lr}
 80004be:	b088      	sub	sp, #32
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	f107 0310 	add.w	r3, r7, #16
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a1b      	ldr	r2, [pc, #108]	; (8000544 <HAL_SPI_MspInit+0x88>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d12f      	bne.n	800053c <HAL_SPI_MspInit+0x80>
 80004dc:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <HAL_SPI_MspInit+0x8c>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a19      	ldr	r2, [pc, #100]	; (8000548 <HAL_SPI_MspInit+0x8c>)
 80004e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b17      	ldr	r3, [pc, #92]	; (8000548 <HAL_SPI_MspInit+0x8c>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <HAL_SPI_MspInit+0x8c>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a13      	ldr	r2, [pc, #76]	; (8000548 <HAL_SPI_MspInit+0x8c>)
 80004fa:	f043 0304 	orr.w	r3, r3, #4
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b11      	ldr	r3, [pc, #68]	; (8000548 <HAL_SPI_MspInit+0x8c>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f003 0304 	and.w	r3, r3, #4
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	23a0      	movs	r3, #160	; 0xa0
 800050e:	613b      	str	r3, [r7, #16]
 8000510:	2302      	movs	r3, #2
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	2303      	movs	r3, #3
 8000516:	61fb      	str	r3, [r7, #28]
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	4619      	mov	r1, r3
 800051e:	480b      	ldr	r0, [pc, #44]	; (800054c <HAL_SPI_MspInit+0x90>)
 8000520:	f001 ff2e 	bl	8002380 <HAL_GPIO_Init>
 8000524:	2340      	movs	r3, #64	; 0x40
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	2300      	movs	r3, #0
 800052e:	61bb      	str	r3, [r7, #24]
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	4619      	mov	r1, r3
 8000536:	4805      	ldr	r0, [pc, #20]	; (800054c <HAL_SPI_MspInit+0x90>)
 8000538:	f001 ff22 	bl	8002380 <HAL_GPIO_Init>
 800053c:	bf00      	nop
 800053e:	3720      	adds	r7, #32
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40013000 	.word	0x40013000
 8000548:	40021000 	.word	0x40021000
 800054c:	40010800 	.word	0x40010800

08000550 <NMI_Handler>:
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
 8000554:	f002 fc96 	bl	8002e84 <HAL_RCC_NMI_IRQHandler>
 8000558:	e7fe      	b.n	8000558 <NMI_Handler+0x8>

0800055a <HardFault_Handler>:
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
 800055e:	e7fe      	b.n	800055e <HardFault_Handler+0x4>

08000560 <MemManage_Handler>:
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
 8000564:	e7fe      	b.n	8000564 <MemManage_Handler+0x4>

08000566 <BusFault_Handler>:
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
 800056a:	e7fe      	b.n	800056a <BusFault_Handler+0x4>

0800056c <UsageFault_Handler>:
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
 8000570:	e7fe      	b.n	8000570 <UsageFault_Handler+0x4>

08000572 <DebugMon_Handler>:
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr

0800057e <SysTick_Handler>:
 800057e:	b580      	push	{r7, lr}
 8000580:	af00      	add	r7, sp, #0
 8000582:	f001 fdd9 	bl	8002138 <HAL_IncTick>
 8000586:	f003 ffd3 	bl	8004530 <xTaskGetSchedulerState>
 800058a:	4603      	mov	r3, r0
 800058c:	2b01      	cmp	r3, #1
 800058e:	d001      	beq.n	8000594 <SysTick_Handler+0x16>
 8000590:	f004 f9c2 	bl	8004918 <xPortSysTickHandler>
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}

08000598 <SystemInit>:
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <writeMessage>:
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <writeMessage+0x28>)
 80005ae:	781c      	ldrb	r4, [r3, #0]
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff fdcd 	bl	8000150 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	461a      	mov	r2, r3
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	4620      	mov	r0, r4
 80005c0:	f000 fa98 	bl	8000af4 <send>
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd90      	pop	{r4, r7, pc}
 80005cc:	200007bc 	.word	0x200007bc

080005d0 <readMessage>:
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <readMessage+0x70>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	1df9      	adds	r1, r7, #7
 80005e4:	2201      	movs	r2, #1
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fb7e 	bl	8000ce8 <recv>
 80005ec:	60b8      	str	r0, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	dd17      	ble.n	8000624 <readMessage+0x54>
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	2b0a      	cmp	r3, #10
 80005f8:	d105      	bne.n	8000606 <readMessage+0x36>
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <readMessage+0x74>)
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4413      	add	r3, r2
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
 8000604:	e011      	b.n	800062a <readMessage+0x5a>
 8000606:	79f9      	ldrb	r1, [r7, #7]
 8000608:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <readMessage+0x74>)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	460a      	mov	r2, r1
 8000610:	701a      	strb	r2, [r3, #0]
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	3301      	adds	r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800061e:	4293      	cmp	r3, r2
 8000620:	dc02      	bgt.n	8000628 <readMessage+0x58>
 8000622:	e7dc      	b.n	80005de <readMessage+0xe>
 8000624:	bf00      	nop
 8000626:	e000      	b.n	800062a <readMessage+0x5a>
 8000628:	bf00      	nop
 800062a:	4a06      	ldr	r2, [pc, #24]	; (8000644 <readMessage+0x74>)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4413      	add	r3, r2
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <readMessage+0x74>)
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200007bc 	.word	0x200007bc
 8000644:	200003bc 	.word	0x200003bc

08000648 <toggleLeds>:
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b6c      	cmp	r3, #108	; 0x6c
 8000656:	d10a      	bne.n	800066e <toggleLeds+0x26>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3301      	adds	r3, #1
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b31      	cmp	r3, #49	; 0x31
 8000660:	d105      	bne.n	800066e <toggleLeds+0x26>
 8000662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000666:	480b      	ldr	r0, [pc, #44]	; (8000694 <toggleLeds+0x4c>)
 8000668:	f002 f826 	bl	80026b8 <HAL_GPIO_TogglePin>
 800066c:	e00d      	b.n	800068a <toggleLeds+0x42>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b6c      	cmp	r3, #108	; 0x6c
 8000674:	d109      	bne.n	800068a <toggleLeds+0x42>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3301      	adds	r3, #1
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b32      	cmp	r3, #50	; 0x32
 800067e:	d104      	bne.n	800068a <toggleLeds+0x42>
 8000680:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <toggleLeds+0x50>)
 8000686:	f002 f817 	bl	80026b8 <HAL_GPIO_TogglePin>
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40011000 	.word	0x40011000
 8000698:	40010c00 	.word	0x40010c00

0800069c <startTelnet>:
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <startTelnet+0x98>)
 80006a2:	7818      	ldrb	r0, [r3, #0]
 80006a4:	2300      	movs	r3, #0
 80006a6:	2217      	movs	r2, #23
 80006a8:	2101      	movs	r1, #1
 80006aa:	f000 f847 	bl	800073c <socket>
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <startTelnet+0x98>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f9c4 	bl	8000a40 <listen>
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <startTelnet+0x98>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	3301      	adds	r3, #1
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fa22 	bl	8001b10 <WIZCHIP_READ>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b17      	cmp	r3, #23
 80006d0:	d116      	bne.n	8000700 <startTelnet+0x64>
 80006d2:	4819      	ldr	r0, [pc, #100]	; (8000738 <startTelnet+0x9c>)
 80006d4:	f7ff ff66 	bl	80005a4 <writeMessage>
 80006d8:	f7ff ff7a 	bl	80005d0 <readMessage>
 80006dc:	4603      	mov	r3, r0
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ffb2 	bl	8000648 <toggleLeds>
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <startTelnet+0x98>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	3301      	adds	r3, #1
 80006ec:	00db      	lsls	r3, r3, #3
 80006ee:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fa0c 	bl	8001b10 <WIZCHIP_READ>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b17      	cmp	r3, #23
 80006fc:	d0dc      	beq.n	80006b8 <startTelnet+0x1c>
 80006fe:	e016      	b.n	800072e <startTelnet+0x92>
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <startTelnet+0x98>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f92d 	bl	8000964 <close>
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <startTelnet+0x98>)
 800070c:	7818      	ldrb	r0, [r3, #0]
 800070e:	2300      	movs	r3, #0
 8000710:	2217      	movs	r2, #23
 8000712:	2101      	movs	r1, #1
 8000714:	f000 f812 	bl	800073c <socket>
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <startTelnet+0x98>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f98f 	bl	8000a40 <listen>
 8000722:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000726:	f001 fd23 	bl	8002170 <HAL_Delay>
 800072a:	bf00      	nop
 800072c:	e7c4      	b.n	80006b8 <startTelnet+0x1c>
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200007bc 	.word	0x200007bc
 8000738:	08004f40 	.word	0x08004f40

0800073c <socket>:
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	4604      	mov	r4, r0
 8000744:	4608      	mov	r0, r1
 8000746:	4611      	mov	r1, r2
 8000748:	461a      	mov	r2, r3
 800074a:	4623      	mov	r3, r4
 800074c:	71fb      	strb	r3, [r7, #7]
 800074e:	4603      	mov	r3, r0
 8000750:	71bb      	strb	r3, [r7, #6]
 8000752:	460b      	mov	r3, r1
 8000754:	80bb      	strh	r3, [r7, #4]
 8000756:	4613      	mov	r3, r2
 8000758:	70fb      	strb	r3, [r7, #3]
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2b08      	cmp	r3, #8
 800075e:	d902      	bls.n	8000766 <socket+0x2a>
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	e0f0      	b.n	8000948 <socket+0x20c>
 8000766:	79bb      	ldrb	r3, [r7, #6]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d005      	beq.n	8000778 <socket+0x3c>
 800076c:	2b00      	cmp	r3, #0
 800076e:	dd11      	ble.n	8000794 <socket+0x58>
 8000770:	3b02      	subs	r3, #2
 8000772:	2b02      	cmp	r3, #2
 8000774:	d80e      	bhi.n	8000794 <socket+0x58>
 8000776:	e011      	b.n	800079c <socket+0x60>
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2204      	movs	r2, #4
 800077e:	4619      	mov	r1, r3
 8000780:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000784:	f001 fa5e 	bl	8001c44 <WIZCHIP_READ_BUF>
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d105      	bne.n	800079a <socket+0x5e>
 800078e:	f06f 0302 	mvn.w	r3, #2
 8000792:	e0d9      	b.n	8000948 <socket+0x20c>
 8000794:	f06f 0304 	mvn.w	r3, #4
 8000798:	e0d6      	b.n	8000948 <socket+0x20c>
 800079a:	bf00      	nop
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <socket+0x70>
 80007a6:	f06f 0305 	mvn.w	r3, #5
 80007aa:	e0cd      	b.n	8000948 <socket+0x20c>
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d028      	beq.n	8000804 <socket+0xc8>
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d002      	beq.n	80007be <socket+0x82>
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d008      	beq.n	80007ce <socket+0x92>
 80007bc:	e022      	b.n	8000804 <socket+0xc8>
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d11a      	bne.n	80007fe <socket+0xc2>
 80007c8:	f06f 0305 	mvn.w	r3, #5
 80007cc:	e0bc      	b.n	8000948 <socket+0x20c>
 80007ce:	78fb      	ldrb	r3, [r7, #3]
 80007d0:	f003 0320 	and.w	r3, r3, #32
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d006      	beq.n	80007e6 <socket+0xaa>
 80007d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	db02      	blt.n	80007e6 <socket+0xaa>
 80007e0:	f06f 0305 	mvn.w	r3, #5
 80007e4:	e0b0      	b.n	8000948 <socket+0x20c>
 80007e6:	78fb      	ldrb	r3, [r7, #3]
 80007e8:	f003 0310 	and.w	r3, r3, #16
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d008      	beq.n	8000802 <socket+0xc6>
 80007f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	db04      	blt.n	8000802 <socket+0xc6>
 80007f8:	f06f 0305 	mvn.w	r3, #5
 80007fc:	e0a4      	b.n	8000948 <socket+0x20c>
 80007fe:	bf00      	nop
 8000800:	e000      	b.n	8000804 <socket+0xc8>
 8000802:	bf00      	nop
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f8ac 	bl	8000964 <close>
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	3301      	adds	r3, #1
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	4618      	mov	r0, r3
 8000816:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800081a:	f023 030f 	bic.w	r3, r3, #15
 800081e:	b25a      	sxtb	r2, r3
 8000820:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000824:	4313      	orrs	r3, r2
 8000826:	b25b      	sxtb	r3, r3
 8000828:	b2db      	uxtb	r3, r3
 800082a:	4619      	mov	r1, r3
 800082c:	f001 f9bc 	bl	8001ba8 <WIZCHIP_WRITE>
 8000830:	88bb      	ldrh	r3, [r7, #4]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d110      	bne.n	8000858 <socket+0x11c>
 8000836:	4b46      	ldr	r3, [pc, #280]	; (8000950 <socket+0x214>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	b291      	uxth	r1, r2
 800083e:	4a44      	ldr	r2, [pc, #272]	; (8000950 <socket+0x214>)
 8000840:	8011      	strh	r1, [r2, #0]
 8000842:	80bb      	strh	r3, [r7, #4]
 8000844:	4b42      	ldr	r3, [pc, #264]	; (8000950 <socket+0x214>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800084c:	4293      	cmp	r3, r2
 800084e:	d103      	bne.n	8000858 <socket+0x11c>
 8000850:	4b3f      	ldr	r3, [pc, #252]	; (8000950 <socket+0x214>)
 8000852:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000856:	801a      	strh	r2, [r3, #0]
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	3301      	adds	r3, #1
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000864:	461a      	mov	r2, r3
 8000866:	88bb      	ldrh	r3, [r7, #4]
 8000868:	0a1b      	lsrs	r3, r3, #8
 800086a:	b29b      	uxth	r3, r3
 800086c:	b2db      	uxtb	r3, r3
 800086e:	4619      	mov	r1, r3
 8000870:	4610      	mov	r0, r2
 8000872:	f001 f999 	bl	8001ba8 <WIZCHIP_WRITE>
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	3301      	adds	r3, #1
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000882:	461a      	mov	r2, r3
 8000884:	88bb      	ldrh	r3, [r7, #4]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4619      	mov	r1, r3
 800088a:	4610      	mov	r0, r2
 800088c:	f001 f98c 	bl	8001ba8 <WIZCHIP_WRITE>
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	3301      	adds	r3, #1
 8000896:	00db      	lsls	r3, r3, #3
 8000898:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800089c:	2101      	movs	r1, #1
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 f982 	bl	8001ba8 <WIZCHIP_WRITE>
 80008a4:	bf00      	nop
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	3301      	adds	r3, #1
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 f92c 	bl	8001b10 <WIZCHIP_READ>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1f3      	bne.n	80008a6 <socket+0x16a>
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2201      	movs	r2, #1
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	4b21      	ldr	r3, [pc, #132]	; (8000954 <socket+0x218>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	4013      	ands	r3, r2
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <socket+0x218>)
 80008da:	801a      	strh	r2, [r3, #0]
 80008dc:	78fb      	ldrb	r3, [r7, #3]
 80008de:	f003 0201 	and.w	r2, r3, #1
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <socket+0x218>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b21b      	sxth	r3, r3
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <socket+0x218>)
 80008f8:	801a      	strh	r2, [r3, #0]
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2201      	movs	r2, #1
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	b21b      	sxth	r3, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	b21a      	sxth	r2, r3
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <socket+0x21c>)
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	b21b      	sxth	r3, r3
 800090e:	4013      	ands	r3, r2
 8000910:	b21b      	sxth	r3, r3
 8000912:	b29a      	uxth	r2, r3
 8000914:	4b10      	ldr	r3, [pc, #64]	; (8000958 <socket+0x21c>)
 8000916:	801a      	strh	r2, [r3, #0]
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a10      	ldr	r2, [pc, #64]	; (800095c <socket+0x220>)
 800091c:	2100      	movs	r1, #0
 800091e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <socket+0x224>)
 8000926:	2100      	movs	r1, #0
 8000928:	54d1      	strb	r1, [r2, r3]
 800092a:	bf00      	nop
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	3301      	adds	r3, #1
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000938:	4618      	mov	r0, r3
 800093a:	f001 f8e9 	bl	8001b10 <WIZCHIP_READ>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0f3      	beq.n	800092c <socket+0x1f0>
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	4618      	mov	r0, r3
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bd90      	pop	{r4, r7, pc}
 8000950:	2000001c 	.word	0x2000001c
 8000954:	200007be 	.word	0x200007be
 8000958:	200007c0 	.word	0x200007c0
 800095c:	200007c4 	.word	0x200007c4
 8000960:	200007d4 	.word	0x200007d4

08000964 <close>:
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b08      	cmp	r3, #8
 8000972:	d902      	bls.n	800097a <close+0x16>
 8000974:	f04f 33ff 	mov.w	r3, #4294967295
 8000978:	e055      	b.n	8000a26 <close+0xc2>
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	3301      	adds	r3, #1
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000986:	2110      	movs	r1, #16
 8000988:	4618      	mov	r0, r3
 800098a:	f001 f90d 	bl	8001ba8 <WIZCHIP_WRITE>
 800098e:	bf00      	nop
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	3301      	adds	r3, #1
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800099c:	4618      	mov	r0, r3
 800099e:	f001 f8b7 	bl	8001b10 <WIZCHIP_READ>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1f3      	bne.n	8000990 <close+0x2c>
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	3301      	adds	r3, #1
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80009b4:	211f      	movs	r1, #31
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 f8f6 	bl	8001ba8 <WIZCHIP_WRITE>
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	2201      	movs	r2, #1
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	b21a      	sxth	r2, r3
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <close+0xcc>)
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	b21b      	sxth	r3, r3
 80009d0:	4013      	ands	r3, r2
 80009d2:	b21b      	sxth	r3, r3
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <close+0xcc>)
 80009d8:	801a      	strh	r2, [r3, #0]
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2201      	movs	r2, #1
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	b21b      	sxth	r3, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	b21a      	sxth	r2, r3
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <close+0xd0>)
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	b21b      	sxth	r3, r3
 80009ee:	4013      	ands	r3, r2
 80009f0:	b21b      	sxth	r3, r3
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <close+0xd0>)
 80009f6:	801a      	strh	r2, [r3, #0]
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <close+0xd4>)
 80009fc:	2100      	movs	r1, #0
 80009fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <close+0xd8>)
 8000a06:	2100      	movs	r1, #0
 8000a08:	54d1      	strb	r1, [r2, r3]
 8000a0a:	bf00      	nop
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	3301      	adds	r3, #1
 8000a12:	00db      	lsls	r3, r3, #3
 8000a14:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 f879 	bl	8001b10 <WIZCHIP_READ>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1f3      	bne.n	8000a0c <close+0xa8>
 8000a24:	2301      	movs	r3, #1
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200007be 	.word	0x200007be
 8000a34:	200007c0 	.word	0x200007c0
 8000a38:	200007c4 	.word	0x200007c4
 8000a3c:	200007d4 	.word	0x200007d4

08000a40 <listen>:
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b08      	cmp	r3, #8
 8000a4e:	d902      	bls.n	8000a56 <listen+0x16>
 8000a50:	f04f 33ff 	mov.w	r3, #4294967295
 8000a54:	e049      	b.n	8000aea <listen+0xaa>
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	00db      	lsls	r3, r3, #3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 f856 	bl	8001b10 <WIZCHIP_READ>
 8000a64:	4603      	mov	r3, r0
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d002      	beq.n	8000a74 <listen+0x34>
 8000a6e:	f06f 0304 	mvn.w	r3, #4
 8000a72:	e03a      	b.n	8000aea <listen+0xaa>
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	3301      	adds	r3, #1
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 f845 	bl	8001b10 <WIZCHIP_READ>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b13      	cmp	r3, #19
 8000a8a:	d002      	beq.n	8000a92 <listen+0x52>
 8000a8c:	f06f 0302 	mvn.w	r3, #2
 8000a90:	e02b      	b.n	8000aea <listen+0xaa>
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	3301      	adds	r3, #1
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 f881 	bl	8001ba8 <WIZCHIP_WRITE>
 8000aa6:	bf00      	nop
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	3301      	adds	r3, #1
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 f82b 	bl	8001b10 <WIZCHIP_READ>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d1f3      	bne.n	8000aa8 <listen+0x68>
 8000ac0:	e006      	b.n	8000ad0 <listen+0x90>
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff4d 	bl	8000964 <close>
 8000aca:	f06f 0303 	mvn.w	r3, #3
 8000ace:	e00c      	b.n	8000aea <listen+0xaa>
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000adc:	4618      	mov	r0, r3
 8000ade:	f001 f817 	bl	8001b10 <WIZCHIP_READ>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b14      	cmp	r3, #20
 8000ae6:	d1ec      	bne.n	8000ac2 <listen+0x82>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <send>:
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
 8000b00:	4613      	mov	r3, r2
 8000b02:	80bb      	strh	r3, [r7, #4]
 8000b04:	2300      	movs	r3, #0
 8000b06:	73fb      	strb	r3, [r7, #15]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	81bb      	strh	r3, [r7, #12]
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	2b08      	cmp	r3, #8
 8000b10:	d902      	bls.n	8000b18 <send+0x24>
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295
 8000b16:	e0de      	b.n	8000cd6 <send+0x1e2>
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 fff5 	bl	8001b10 <WIZCHIP_READ>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f003 030f 	and.w	r3, r3, #15
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d002      	beq.n	8000b36 <send+0x42>
 8000b30:	f06f 0304 	mvn.w	r3, #4
 8000b34:	e0cf      	b.n	8000cd6 <send+0x1e2>
 8000b36:	88bb      	ldrh	r3, [r7, #4]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <send+0x4e>
 8000b3c:	f06f 030d 	mvn.w	r3, #13
 8000b40:	e0c9      	b.n	8000cd6 <send+0x1e2>
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	3301      	adds	r3, #1
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 ffde 	bl	8001b10 <WIZCHIP_READ>
 8000b54:	4603      	mov	r3, r0
 8000b56:	73fb      	strb	r3, [r7, #15]
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	2b17      	cmp	r3, #23
 8000b5c:	d005      	beq.n	8000b6a <send+0x76>
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
 8000b60:	2b1c      	cmp	r3, #28
 8000b62:	d002      	beq.n	8000b6a <send+0x76>
 8000b64:	f06f 0306 	mvn.w	r3, #6
 8000b68:	e0b5      	b.n	8000cd6 <send+0x1e2>
 8000b6a:	4b5d      	ldr	r3, [pc, #372]	; (8000ce0 <send+0x1ec>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	fa42 f303 	asr.w	r3, r2, r3
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d039      	beq.n	8000bf2 <send+0xfe>
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	3301      	adds	r3, #1
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 ffc0 	bl	8001b10 <WIZCHIP_READ>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f003 031f 	and.w	r3, r3, #31
 8000b96:	73fb      	strb	r3, [r7, #15]
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	f003 0310 	and.w	r3, r3, #16
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d019      	beq.n	8000bd6 <send+0xe2>
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bae:	2110      	movs	r1, #16
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fff9 	bl	8001ba8 <WIZCHIP_WRITE>
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	b21b      	sxth	r3, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	b21a      	sxth	r2, r3
 8000bc4:	4b46      	ldr	r3, [pc, #280]	; (8000ce0 <send+0x1ec>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	4013      	ands	r3, r2
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	4b43      	ldr	r3, [pc, #268]	; (8000ce0 <send+0x1ec>)
 8000bd2:	801a      	strh	r2, [r3, #0]
 8000bd4:	e00d      	b.n	8000bf2 <send+0xfe>
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	f003 0308 	and.w	r3, r3, #8
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d006      	beq.n	8000bee <send+0xfa>
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff febe 	bl	8000964 <close>
 8000be8:	f06f 030c 	mvn.w	r3, #12
 8000bec:	e073      	b.n	8000cd6 <send+0x1e2>
 8000bee:	2300      	movs	r3, #0
 8000bf0:	e071      	b.n	8000cd6 <send+0x1e2>
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 ff86 	bl	8001b10 <WIZCHIP_READ>
 8000c04:	4603      	mov	r3, r0
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	029b      	lsls	r3, r3, #10
 8000c0a:	81bb      	strh	r3, [r7, #12]
 8000c0c:	88ba      	ldrh	r2, [r7, #4]
 8000c0e:	89bb      	ldrh	r3, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d901      	bls.n	8000c18 <send+0x124>
 8000c14:	89bb      	ldrh	r3, [r7, #12]
 8000c16:	80bb      	strh	r3, [r7, #4]
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 f8d2 	bl	8001dc4 <getSn_TX_FSR>
 8000c20:	4603      	mov	r3, r0
 8000c22:	81bb      	strh	r3, [r7, #12]
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	3301      	adds	r3, #1
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 ff6d 	bl	8001b10 <WIZCHIP_READ>
 8000c36:	4603      	mov	r3, r0
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
 8000c3c:	2b17      	cmp	r3, #23
 8000c3e:	d009      	beq.n	8000c54 <send+0x160>
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	2b1c      	cmp	r3, #28
 8000c44:	d006      	beq.n	8000c54 <send+0x160>
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fe8b 	bl	8000964 <close>
 8000c4e:	f06f 0306 	mvn.w	r3, #6
 8000c52:	e040      	b.n	8000cd6 <send+0x1e2>
 8000c54:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <send+0x1f0>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	fa42 f303 	asr.w	r3, r2, r3
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d005      	beq.n	8000c74 <send+0x180>
 8000c68:	88ba      	ldrh	r2, [r7, #4]
 8000c6a:	89bb      	ldrh	r3, [r7, #12]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d901      	bls.n	8000c74 <send+0x180>
 8000c70:	2300      	movs	r3, #0
 8000c72:	e030      	b.n	8000cd6 <send+0x1e2>
 8000c74:	88ba      	ldrh	r2, [r7, #4]
 8000c76:	89bb      	ldrh	r3, [r7, #12]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d900      	bls.n	8000c7e <send+0x18a>
 8000c7c:	e7cc      	b.n	8000c18 <send+0x124>
 8000c7e:	bf00      	nop
 8000c80:	88ba      	ldrh	r2, [r7, #4]
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	6839      	ldr	r1, [r7, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 f932 	bl	8001ef0 <wiz_send_data>
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	3301      	adds	r3, #1
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c98:	2120      	movs	r1, #32
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 ff84 	bl	8001ba8 <WIZCHIP_WRITE>
 8000ca0:	bf00      	nop
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 ff2e 	bl	8001b10 <WIZCHIP_READ>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1f3      	bne.n	8000ca2 <send+0x1ae>
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <send+0x1ec>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <send+0x1ec>)
 8000cd2:	801a      	strh	r2, [r3, #0]
 8000cd4:	88bb      	ldrh	r3, [r7, #4]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200007c0 	.word	0x200007c0
 8000ce4:	200007be 	.word	0x200007be

08000ce8 <recv>:
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	80bb      	strh	r3, [r7, #4]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	81bb      	strh	r3, [r7, #12]
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	2b08      	cmp	r3, #8
 8000d04:	d902      	bls.n	8000d0c <recv+0x24>
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e09c      	b.n	8000e46 <recv+0x15e>
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	3301      	adds	r3, #1
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 fefb 	bl	8001b10 <WIZCHIP_READ>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f003 030f 	and.w	r3, r3, #15
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d002      	beq.n	8000d2a <recv+0x42>
 8000d24:	f06f 0304 	mvn.w	r3, #4
 8000d28:	e08d      	b.n	8000e46 <recv+0x15e>
 8000d2a:	88bb      	ldrh	r3, [r7, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <recv+0x4e>
 8000d30:	f06f 030d 	mvn.w	r3, #13
 8000d34:	e087      	b.n	8000e46 <recv+0x15e>
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 fee4 	bl	8001b10 <WIZCHIP_READ>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	029b      	lsls	r3, r3, #10
 8000d4e:	81bb      	strh	r3, [r7, #12]
 8000d50:	89ba      	ldrh	r2, [r7, #12]
 8000d52:	88bb      	ldrh	r3, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d201      	bcs.n	8000d5c <recv+0x74>
 8000d58:	89bb      	ldrh	r3, [r7, #12]
 8000d5a:	80bb      	strh	r3, [r7, #4]
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f001 f87b 	bl	8001e5a <getSn_RX_RSR>
 8000d64:	4603      	mov	r3, r0
 8000d66:	81bb      	strh	r3, [r7, #12]
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 fecb 	bl	8001b10 <WIZCHIP_READ>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	2b17      	cmp	r3, #23
 8000d82:	d026      	beq.n	8000dd2 <recv+0xea>
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	2b1c      	cmp	r3, #28
 8000d88:	d11c      	bne.n	8000dc4 <recv+0xdc>
 8000d8a:	89bb      	ldrh	r3, [r7, #12]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d133      	bne.n	8000df8 <recv+0x110>
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 f816 	bl	8001dc4 <getSn_TX_FSR>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461c      	mov	r4, r3
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	3301      	adds	r3, #1
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 feb1 	bl	8001b10 <WIZCHIP_READ>
 8000dae:	4603      	mov	r3, r0
 8000db0:	029b      	lsls	r3, r3, #10
 8000db2:	429c      	cmp	r4, r3
 8000db4:	d10d      	bne.n	8000dd2 <recv+0xea>
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fdd3 	bl	8000964 <close>
 8000dbe:	f06f 0306 	mvn.w	r3, #6
 8000dc2:	e040      	b.n	8000e46 <recv+0x15e>
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fdcc 	bl	8000964 <close>
 8000dcc:	f06f 0306 	mvn.w	r3, #6
 8000dd0:	e039      	b.n	8000e46 <recv+0x15e>
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <recv+0x168>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	fa42 f303 	asr.w	r3, r2, r3
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d004      	beq.n	8000df0 <recv+0x108>
 8000de6:	89bb      	ldrh	r3, [r7, #12]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d101      	bne.n	8000df0 <recv+0x108>
 8000dec:	2300      	movs	r3, #0
 8000dee:	e02a      	b.n	8000e46 <recv+0x15e>
 8000df0:	89bb      	ldrh	r3, [r7, #12]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d102      	bne.n	8000dfc <recv+0x114>
 8000df6:	e7b1      	b.n	8000d5c <recv+0x74>
 8000df8:	bf00      	nop
 8000dfa:	e000      	b.n	8000dfe <recv+0x116>
 8000dfc:	bf00      	nop
 8000dfe:	89ba      	ldrh	r2, [r7, #12]
 8000e00:	88bb      	ldrh	r3, [r7, #4]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d201      	bcs.n	8000e0a <recv+0x122>
 8000e06:	89bb      	ldrh	r3, [r7, #12]
 8000e08:	80bb      	strh	r3, [r7, #4]
 8000e0a:	88ba      	ldrh	r2, [r7, #4]
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	6839      	ldr	r1, [r7, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 f8c9 	bl	8001fa8 <wiz_recv_data>
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e22:	2140      	movs	r1, #64	; 0x40
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 febf 	bl	8001ba8 <WIZCHIP_WRITE>
 8000e2a:	bf00      	nop
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	3301      	adds	r3, #1
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fe69 	bl	8001b10 <WIZCHIP_READ>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1f3      	bne.n	8000e2c <recv+0x144>
 8000e44:	88bb      	ldrh	r3, [r7, #4]
 8000e46:	4618      	mov	r0, r3
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd90      	pop	{r4, r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200007be 	.word	0x200007be

08000e54 <wizchip_select>:
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <wizchip_select+0x14>)
 8000e5e:	f001 fc13 	bl	8002688 <HAL_GPIO_WritePin>
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40010800 	.word	0x40010800

08000e6c <wizchip_deselect>:
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	2201      	movs	r2, #1
 8000e72:	2102      	movs	r1, #2
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <wizchip_deselect+0x14>)
 8000e76:	f001 fc07 	bl	8002688 <HAL_GPIO_WritePin>
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40010800 	.word	0x40010800

08000e84 <wizchip_read>:
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	1df9      	adds	r1, r7, #7
 8000e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e90:	2201      	movs	r2, #1
 8000e92:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <wizchip_read+0x20>)
 8000e94:	f002 f9f5 	bl	8003282 <HAL_SPI_Receive>
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000364 	.word	0x20000364

08000ea8 <wizchip_write>:
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	1df9      	adds	r1, r7, #7
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <wizchip_write+0x20>)
 8000ebc:	f002 f89e 	bl	8002ffc <HAL_SPI_Transmit>
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000364 	.word	0x20000364

08000ecc <wizchip_read_burst>:
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	807b      	strh	r3, [r7, #2]
 8000ed8:	2300      	movs	r3, #0
 8000eda:	81fb      	strh	r3, [r7, #14]
 8000edc:	e009      	b.n	8000ef2 <wizchip_read_burst+0x26>
 8000ede:	89fb      	ldrh	r3, [r7, #14]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	18d4      	adds	r4, r2, r3
 8000ee4:	f7ff ffce 	bl	8000e84 <wizchip_read>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	7023      	strb	r3, [r4, #0]
 8000eec:	89fb      	ldrh	r3, [r7, #14]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	81fb      	strh	r3, [r7, #14]
 8000ef2:	89fa      	ldrh	r2, [r7, #14]
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d3f1      	bcc.n	8000ede <wizchip_read_burst+0x12>
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd90      	pop	{r4, r7, pc}

08000f04 <wizchip_write_burst>:
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	807b      	strh	r3, [r7, #2]
 8000f10:	2300      	movs	r3, #0
 8000f12:	81fb      	strh	r3, [r7, #14]
 8000f14:	e009      	b.n	8000f2a <wizchip_write_burst+0x26>
 8000f16:	89fb      	ldrh	r3, [r7, #14]
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ffc2 	bl	8000ea8 <wizchip_write>
 8000f24:	89fb      	ldrh	r3, [r7, #14]
 8000f26:	3301      	adds	r3, #1
 8000f28:	81fb      	strh	r3, [r7, #14]
 8000f2a:	89fa      	ldrh	r2, [r7, #14]
 8000f2c:	887b      	ldrh	r3, [r7, #2]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d3f1      	bcc.n	8000f16 <wizchip_write_burst+0x12>
 8000f32:	bf00      	nop
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <W5500Init>:
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <W5500Init+0x74>)
 8000f44:	1d3c      	adds	r4, r7, #4
 8000f46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2102      	movs	r1, #2
 8000f50:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <W5500Init+0x78>)
 8000f52:	f001 fb99 	bl	8002688 <HAL_GPIO_WritePin>
 8000f56:	2200      	movs	r2, #0
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <W5500Init+0x78>)
 8000f5c:	f001 fb94 	bl	8002688 <HAL_GPIO_WritePin>
 8000f60:	23ff      	movs	r3, #255	; 0xff
 8000f62:	75fb      	strb	r3, [r7, #23]
 8000f64:	bf00      	nop
 8000f66:	7dfb      	ldrb	r3, [r7, #23]
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	75fa      	strb	r2, [r7, #23]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1fa      	bne.n	8000f66 <W5500Init+0x2a>
 8000f70:	2201      	movs	r2, #1
 8000f72:	2101      	movs	r1, #1
 8000f74:	480f      	ldr	r0, [pc, #60]	; (8000fb4 <W5500Init+0x78>)
 8000f76:	f001 fb87 	bl	8002688 <HAL_GPIO_WritePin>
 8000f7a:	490f      	ldr	r1, [pc, #60]	; (8000fb8 <W5500Init+0x7c>)
 8000f7c:	480f      	ldr	r0, [pc, #60]	; (8000fbc <W5500Init+0x80>)
 8000f7e:	f000 f881 	bl	8001084 <reg_wizchip_cs_cbfunc>
 8000f82:	490f      	ldr	r1, [pc, #60]	; (8000fc0 <W5500Init+0x84>)
 8000f84:	480f      	ldr	r0, [pc, #60]	; (8000fc4 <W5500Init+0x88>)
 8000f86:	f000 f8a1 	bl	80010cc <reg_wizchip_spi_cbfunc>
 8000f8a:	490f      	ldr	r1, [pc, #60]	; (8000fc8 <W5500Init+0x8c>)
 8000f8c:	480f      	ldr	r0, [pc, #60]	; (8000fcc <W5500Init+0x90>)
 8000f8e:	f000 f8c9 	bl	8001124 <reg_wizchip_spiburst_cbfunc>
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	4619      	mov	r1, r3
 8000f96:	2001      	movs	r0, #1
 8000f98:	f000 f8f0 	bl	800117c <ctlwizchip>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa2:	d100      	bne.n	8000fa6 <W5500Init+0x6a>
 8000fa4:	e7fe      	b.n	8000fa4 <W5500Init+0x68>
 8000fa6:	bf00      	nop
 8000fa8:	371c      	adds	r7, #28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd90      	pop	{r4, r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	08004f6c 	.word	0x08004f6c
 8000fb4:	40010800 	.word	0x40010800
 8000fb8:	08000e6d 	.word	0x08000e6d
 8000fbc:	08000e55 	.word	0x08000e55
 8000fc0:	08000ea9 	.word	0x08000ea9
 8000fc4:	08000e85 	.word	0x08000e85
 8000fc8:	08000f05 	.word	0x08000f05
 8000fcc:	08000ecd 	.word	0x08000ecd

08000fd0 <wizchip_cris_enter>:
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <wizchip_cris_exit>:
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <wizchip_cs_select>:
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <wizchip_cs_deselect>:
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <wizchip_bus_readdata>:
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <wizchip_bus_writedata>:
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	78fa      	ldrb	r2, [r7, #3]
 8001028:	701a      	strb	r2, [r3, #0]
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <wizchip_spi_readbyte>:
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
 8001038:	2300      	movs	r3, #0
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <wizchip_spi_writebyte>:
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <wizchip_spi_readburst>:
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	460b      	mov	r3, r1
 8001060:	807b      	strh	r3, [r7, #2]
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <wizchip_spi_writeburst>:
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
	...

08001084 <reg_wizchip_cs_cbfunc>:
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <reg_wizchip_cs_cbfunc+0x16>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d106      	bne.n	80010a8 <reg_wizchip_cs_cbfunc+0x24>
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <reg_wizchip_cs_cbfunc+0x3c>)
 800109c:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <reg_wizchip_cs_cbfunc+0x40>)
 800109e:	615a      	str	r2, [r3, #20]
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <reg_wizchip_cs_cbfunc+0x3c>)
 80010a2:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <reg_wizchip_cs_cbfunc+0x44>)
 80010a4:	619a      	str	r2, [r3, #24]
 80010a6:	e006      	b.n	80010b6 <reg_wizchip_cs_cbfunc+0x32>
 80010a8:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <reg_wizchip_cs_cbfunc+0x3c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6153      	str	r3, [r2, #20]
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <reg_wizchip_cs_cbfunc+0x3c>)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	20000020 	.word	0x20000020
 80010c4:	08000fe9 	.word	0x08000fe9
 80010c8:	08000ff5 	.word	0x08000ff5

080010cc <reg_wizchip_spi_cbfunc>:
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	bf00      	nop
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <reg_wizchip_spi_cbfunc+0x4c>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d0f9      	beq.n	80010d8 <reg_wizchip_spi_cbfunc+0xc>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d002      	beq.n	80010f0 <reg_wizchip_spi_cbfunc+0x24>
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d106      	bne.n	80010fe <reg_wizchip_spi_cbfunc+0x32>
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <reg_wizchip_spi_cbfunc+0x4c>)
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <reg_wizchip_spi_cbfunc+0x50>)
 80010f4:	61da      	str	r2, [r3, #28]
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <reg_wizchip_spi_cbfunc+0x4c>)
 80010f8:	4a09      	ldr	r2, [pc, #36]	; (8001120 <reg_wizchip_spi_cbfunc+0x54>)
 80010fa:	621a      	str	r2, [r3, #32]
 80010fc:	e006      	b.n	800110c <reg_wizchip_spi_cbfunc+0x40>
 80010fe:	4a06      	ldr	r2, [pc, #24]	; (8001118 <reg_wizchip_spi_cbfunc+0x4c>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	61d3      	str	r3, [r2, #28]
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <reg_wizchip_spi_cbfunc+0x4c>)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	6213      	str	r3, [r2, #32]
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000020 	.word	0x20000020
 800111c:	08001035 	.word	0x08001035
 8001120:	08001043 	.word	0x08001043

08001124 <reg_wizchip_spiburst_cbfunc>:
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	bf00      	nop
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f9      	beq.n	8001130 <reg_wizchip_spiburst_cbfunc+0xc>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <reg_wizchip_spiburst_cbfunc+0x24>
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d106      	bne.n	8001156 <reg_wizchip_spiburst_cbfunc+0x32>
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <reg_wizchip_spiburst_cbfunc+0x50>)
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001150:	4a09      	ldr	r2, [pc, #36]	; (8001178 <reg_wizchip_spiburst_cbfunc+0x54>)
 8001152:	629a      	str	r2, [r3, #40]	; 0x28
 8001154:	e006      	b.n	8001164 <reg_wizchip_spiburst_cbfunc+0x40>
 8001156:	4a06      	ldr	r2, [pc, #24]	; (8001170 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6253      	str	r3, [r2, #36]	; 0x24
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	6293      	str	r3, [r2, #40]	; 0x28
 8001162:	bf00      	nop
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000020 	.word	0x20000020
 8001174:	08001057 	.word	0x08001057
 8001178:	0800106d 	.word	0x0800106d

0800117c <ctlwizchip>:
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b087      	sub	sp, #28
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	2300      	movs	r3, #0
 800118a:	75fb      	strb	r3, [r7, #23]
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	2b0f      	cmp	r3, #15
 8001198:	f200 80c7 	bhi.w	800132a <ctlwizchip+0x1ae>
 800119c:	a201      	add	r2, pc, #4	; (adr r2, 80011a4 <ctlwizchip+0x28>)
 800119e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a2:	bf00      	nop
 80011a4:	080011e5 	.word	0x080011e5
 80011a8:	080011eb 	.word	0x080011eb
 80011ac:	08001217 	.word	0x08001217
 80011b0:	0800120b 	.word	0x0800120b
 80011b4:	08001225 	.word	0x08001225
 80011b8:	08001231 	.word	0x08001231
 80011bc:	0800123f 	.word	0x0800123f
 80011c0:	08001265 	.word	0x08001265
 80011c4:	0800128b 	.word	0x0800128b
 80011c8:	080012cf 	.word	0x080012cf
 80011cc:	080012d5 	.word	0x080012d5
 80011d0:	080012dd 	.word	0x080012dd
 80011d4:	08001331 	.word	0x08001331
 80011d8:	080012e5 	.word	0x080012e5
 80011dc:	080012f3 	.word	0x080012f3
 80011e0:	0800130f 	.word	0x0800130f
 80011e4:	f000 f8ea 	bl	80013bc <wizchip_sw_reset>
 80011e8:	e0a3      	b.n	8001332 <ctlwizchip+0x1b6>
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d004      	beq.n	80011fa <ctlwizchip+0x7e>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3308      	adds	r3, #8
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f000 f927 	bl	8001454 <wizchip_init>
 8001206:	4603      	mov	r3, r0
 8001208:	e094      	b.n	8001334 <ctlwizchip+0x1b8>
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f9ac 	bl	800156c <wizchip_clrinterrupt>
 8001214:	e08d      	b.n	8001332 <ctlwizchip+0x1b6>
 8001216:	f000 f9dd 	bl	80015d4 <wizchip_getinterrupt>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	801a      	strh	r2, [r3, #0]
 8001222:	e086      	b.n	8001332 <ctlwizchip+0x1b6>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f000 f9f8 	bl	800161e <wizchip_setinterruptmask>
 800122e:	e080      	b.n	8001332 <ctlwizchip+0x1b6>
 8001230:	f000 fa10 	bl	8001654 <wizchip_getinterruptmask>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	801a      	strh	r2, [r3, #0]
 800123c:	e079      	b.n	8001332 <ctlwizchip+0x1b6>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	0a1b      	lsrs	r3, r3, #8
 8001244:	b29b      	uxth	r3, r3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800124e:	f000 fcab 	bl	8001ba8 <WIZCHIP_WRITE>
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800125e:	f000 fca3 	bl	8001ba8 <WIZCHIP_WRITE>
 8001262:	e066      	b.n	8001332 <ctlwizchip+0x1b6>
 8001264:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8001268:	f000 fc52 	bl	8001b10 <WIZCHIP_READ>
 800126c:	4603      	mov	r3, r0
 800126e:	b29b      	uxth	r3, r3
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b29c      	uxth	r4, r3
 8001274:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001278:	f000 fc4a 	bl	8001b10 <WIZCHIP_READ>
 800127c:	4603      	mov	r3, r0
 800127e:	b29b      	uxth	r3, r3
 8001280:	4423      	add	r3, r4
 8001282:	b29a      	uxth	r2, r3
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	801a      	strh	r2, [r3, #0]
 8001288:	e053      	b.n	8001332 <ctlwizchip+0x1b6>
 800128a:	4b2c      	ldr	r3, [pc, #176]	; (800133c <ctlwizchip+0x1c0>)
 800128c:	789a      	ldrb	r2, [r3, #2]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	701a      	strb	r2, [r3, #0]
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	3301      	adds	r3, #1
 8001296:	4a29      	ldr	r2, [pc, #164]	; (800133c <ctlwizchip+0x1c0>)
 8001298:	78d2      	ldrb	r2, [r2, #3]
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	3302      	adds	r3, #2
 80012a0:	4a26      	ldr	r2, [pc, #152]	; (800133c <ctlwizchip+0x1c0>)
 80012a2:	7912      	ldrb	r2, [r2, #4]
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	3303      	adds	r3, #3
 80012aa:	4a24      	ldr	r2, [pc, #144]	; (800133c <ctlwizchip+0x1c0>)
 80012ac:	7952      	ldrb	r2, [r2, #5]
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	3304      	adds	r3, #4
 80012b4:	4a21      	ldr	r2, [pc, #132]	; (800133c <ctlwizchip+0x1c0>)
 80012b6:	7992      	ldrb	r2, [r2, #6]
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	3305      	adds	r3, #5
 80012be:	4a1f      	ldr	r2, [pc, #124]	; (800133c <ctlwizchip+0x1c0>)
 80012c0:	79d2      	ldrb	r2, [r2, #7]
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	3306      	adds	r3, #6
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	e031      	b.n	8001332 <ctlwizchip+0x1b6>
 80012ce:	f000 fa13 	bl	80016f8 <wizphy_reset>
 80012d2:	e02e      	b.n	8001332 <ctlwizchip+0x1b6>
 80012d4:	6838      	ldr	r0, [r7, #0]
 80012d6:	f000 fa36 	bl	8001746 <wizphy_setphyconf>
 80012da:	e02a      	b.n	8001332 <ctlwizchip+0x1b6>
 80012dc:	6838      	ldr	r0, [r7, #0]
 80012de:	f000 fa75 	bl	80017cc <wizphy_getphyconf>
 80012e2:	e026      	b.n	8001332 <ctlwizchip+0x1b6>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fad9 	bl	80018a0 <wizphy_setphypmode>
 80012ee:	4603      	mov	r3, r0
 80012f0:	e020      	b.n	8001334 <ctlwizchip+0x1b8>
 80012f2:	f000 f9e8 	bl	80016c6 <wizphy_getphypmode>
 80012f6:	4603      	mov	r3, r0
 80012f8:	75fb      	strb	r3, [r7, #23]
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
 80012fc:	2bff      	cmp	r3, #255	; 0xff
 80012fe:	d102      	bne.n	8001306 <ctlwizchip+0x18a>
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	e016      	b.n	8001334 <ctlwizchip+0x1b8>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	7dfa      	ldrb	r2, [r7, #23]
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	e011      	b.n	8001332 <ctlwizchip+0x1b6>
 800130e:	f000 f9c4 	bl	800169a <wizphy_getphylink>
 8001312:	4603      	mov	r3, r0
 8001314:	75fb      	strb	r3, [r7, #23]
 8001316:	7dfb      	ldrb	r3, [r7, #23]
 8001318:	2bff      	cmp	r3, #255	; 0xff
 800131a:	d102      	bne.n	8001322 <ctlwizchip+0x1a6>
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	e008      	b.n	8001334 <ctlwizchip+0x1b8>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	7dfa      	ldrb	r2, [r7, #23]
 8001326:	701a      	strb	r2, [r3, #0]
 8001328:	e003      	b.n	8001332 <ctlwizchip+0x1b6>
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	e001      	b.n	8001334 <ctlwizchip+0x1b8>
 8001330:	bf00      	nop
 8001332:	2300      	movs	r3, #0
 8001334:	4618      	mov	r0, r3
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd90      	pop	{r4, r7, pc}
 800133c:	20000020 	.word	0x20000020

08001340 <ctlnetwork>:
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	2b05      	cmp	r3, #5
 8001350:	d82c      	bhi.n	80013ac <ctlnetwork+0x6c>
 8001352:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <ctlnetwork+0x18>)
 8001354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001358:	08001371 	.word	0x08001371
 800135c:	08001379 	.word	0x08001379
 8001360:	08001381 	.word	0x08001381
 8001364:	0800138f 	.word	0x0800138f
 8001368:	0800139d 	.word	0x0800139d
 800136c:	080013a5 	.word	0x080013a5
 8001370:	6838      	ldr	r0, [r7, #0]
 8001372:	f000 fadf 	bl	8001934 <wizchip_setnetinfo>
 8001376:	e01c      	b.n	80013b2 <ctlnetwork+0x72>
 8001378:	6838      	ldr	r0, [r7, #0]
 800137a:	f000 fb1b 	bl	80019b4 <wizchip_getnetinfo>
 800137e:	e018      	b.n	80013b2 <ctlnetwork+0x72>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fb55 	bl	8001a34 <wizchip_setnetmode>
 800138a:	4603      	mov	r3, r0
 800138c:	e012      	b.n	80013b4 <ctlnetwork+0x74>
 800138e:	f000 fb73 	bl	8001a78 <wizchip_getnetmode>
 8001392:	4603      	mov	r3, r0
 8001394:	461a      	mov	r2, r3
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	e00a      	b.n	80013b2 <ctlnetwork+0x72>
 800139c:	6838      	ldr	r0, [r7, #0]
 800139e:	f000 fb73 	bl	8001a88 <wizchip_settimeout>
 80013a2:	e006      	b.n	80013b2 <ctlnetwork+0x72>
 80013a4:	6838      	ldr	r0, [r7, #0]
 80013a6:	f000 fb90 	bl	8001aca <wizchip_gettimeout>
 80013aa:	e002      	b.n	80013b2 <ctlnetwork+0x72>
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	e000      	b.n	80013b4 <ctlnetwork+0x74>
 80013b2:	2300      	movs	r3, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <wizchip_sw_reset>:
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2206      	movs	r2, #6
 80013c6:	4619      	mov	r1, r3
 80013c8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80013cc:	f000 fc3a 	bl	8001c44 <WIZCHIP_READ_BUF>
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2204      	movs	r2, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013dc:	f000 fc32 	bl	8001c44 <WIZCHIP_READ_BUF>
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	2204      	movs	r2, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80013ec:	f000 fc2a 	bl	8001c44 <WIZCHIP_READ_BUF>
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	2204      	movs	r2, #4
 80013f6:	4619      	mov	r1, r3
 80013f8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80013fc:	f000 fc22 	bl	8001c44 <WIZCHIP_READ_BUF>
 8001400:	2180      	movs	r1, #128	; 0x80
 8001402:	2000      	movs	r0, #0
 8001404:	f000 fbd0 	bl	8001ba8 <WIZCHIP_WRITE>
 8001408:	2000      	movs	r0, #0
 800140a:	f000 fb81 	bl	8001b10 <WIZCHIP_READ>
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2206      	movs	r2, #6
 8001412:	4619      	mov	r1, r3
 8001414:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001418:	f000 fc74 	bl	8001d04 <WIZCHIP_WRITE_BUF>
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2204      	movs	r2, #4
 8001422:	4619      	mov	r1, r3
 8001424:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001428:	f000 fc6c 	bl	8001d04 <WIZCHIP_WRITE_BUF>
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	2204      	movs	r2, #4
 8001432:	4619      	mov	r1, r3
 8001434:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001438:	f000 fc64 	bl	8001d04 <WIZCHIP_WRITE_BUF>
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	2204      	movs	r2, #4
 8001442:	4619      	mov	r1, r3
 8001444:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001448:	f000 fc5c 	bl	8001d04 <WIZCHIP_WRITE_BUF>
 800144c:	bf00      	nop
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <wizchip_init>:
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	2300      	movs	r3, #0
 8001460:	73bb      	strb	r3, [r7, #14]
 8001462:	f7ff ffab 	bl	80013bc <wizchip_sw_reset>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d03b      	beq.n	80014e4 <wizchip_init+0x90>
 800146c:	2300      	movs	r3, #0
 800146e:	73bb      	strb	r3, [r7, #14]
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e015      	b.n	80014a2 <wizchip_init+0x4e>
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	781a      	ldrb	r2, [r3, #0]
 8001480:	7bbb      	ldrb	r3, [r7, #14]
 8001482:	4413      	add	r3, r2
 8001484:	b2db      	uxtb	r3, r3
 8001486:	73bb      	strb	r3, [r7, #14]
 8001488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800148c:	2b10      	cmp	r3, #16
 800148e:	dd02      	ble.n	8001496 <wizchip_init+0x42>
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
 8001494:	e066      	b.n	8001564 <wizchip_init+0x110>
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	3301      	adds	r3, #1
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	73fb      	strb	r3, [r7, #15]
 80014a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a6:	2b07      	cmp	r3, #7
 80014a8:	dde5      	ble.n	8001476 <wizchip_init+0x22>
 80014aa:	2300      	movs	r3, #0
 80014ac:	73fb      	strb	r3, [r7, #15]
 80014ae:	e015      	b.n	80014dc <wizchip_init+0x88>
 80014b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	3301      	adds	r3, #1
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80014be:	4618      	mov	r0, r3
 80014c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	4619      	mov	r1, r3
 80014cc:	f000 fb6c 	bl	8001ba8 <WIZCHIP_WRITE>
 80014d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e0:	2b07      	cmp	r3, #7
 80014e2:	dde5      	ble.n	80014b0 <wizchip_init+0x5c>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d03b      	beq.n	8001562 <wizchip_init+0x10e>
 80014ea:	2300      	movs	r3, #0
 80014ec:	73bb      	strb	r3, [r7, #14]
 80014ee:	2300      	movs	r3, #0
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	e015      	b.n	8001520 <wizchip_init+0xcc>
 80014f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	781a      	ldrb	r2, [r3, #0]
 80014fe:	7bbb      	ldrb	r3, [r7, #14]
 8001500:	4413      	add	r3, r2
 8001502:	b2db      	uxtb	r3, r3
 8001504:	73bb      	strb	r3, [r7, #14]
 8001506:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800150a:	2b10      	cmp	r3, #16
 800150c:	dd02      	ble.n	8001514 <wizchip_init+0xc0>
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	e027      	b.n	8001564 <wizchip_init+0x110>
 8001514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	3301      	adds	r3, #1
 800151c:	b2db      	uxtb	r3, r3
 800151e:	73fb      	strb	r3, [r7, #15]
 8001520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001524:	2b07      	cmp	r3, #7
 8001526:	dde5      	ble.n	80014f4 <wizchip_init+0xa0>
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e015      	b.n	800155a <wizchip_init+0x106>
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	3301      	adds	r3, #1
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800153c:	4618      	mov	r0, r3
 800153e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	4413      	add	r3, r2
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f000 fb2d 	bl	8001ba8 <WIZCHIP_WRITE>
 800154e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	3301      	adds	r3, #1
 8001556:	b2db      	uxtb	r3, r3
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155e:	2b07      	cmp	r3, #7
 8001560:	dde5      	ble.n	800152e <wizchip_init+0xda>
 8001562:	2300      	movs	r3, #0
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <wizchip_clrinterrupt>:
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	80fb      	strh	r3, [r7, #6]
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	73fb      	strb	r3, [r7, #15]
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	b29b      	uxth	r3, r3
 8001580:	73bb      	strb	r3, [r7, #14]
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	f023 030f 	bic.w	r3, r3, #15
 8001588:	b2db      	uxtb	r3, r3
 800158a:	4619      	mov	r1, r3
 800158c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001590:	f000 fb0a 	bl	8001ba8 <WIZCHIP_WRITE>
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	e014      	b.n	80015c4 <wizchip_clrinterrupt+0x58>
 800159a:	7bba      	ldrb	r2, [r7, #14]
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	fa42 f303 	asr.w	r3, r2, r3
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d009      	beq.n	80015be <wizchip_clrinterrupt+0x52>
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	3301      	adds	r3, #1
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015b6:	211f      	movs	r1, #31
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 faf5 	bl	8001ba8 <WIZCHIP_WRITE>
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	3301      	adds	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	2b07      	cmp	r3, #7
 80015c8:	d9e7      	bls.n	800159a <wizchip_clrinterrupt+0x2e>
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <wizchip_getinterrupt>:
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	2300      	movs	r3, #0
 80015dc:	71fb      	strb	r3, [r7, #7]
 80015de:	2300      	movs	r3, #0
 80015e0:	71bb      	strb	r3, [r7, #6]
 80015e2:	2300      	movs	r3, #0
 80015e4:	80bb      	strh	r3, [r7, #4]
 80015e6:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80015ea:	f000 fa91 	bl	8001b10 <WIZCHIP_READ>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f023 030f 	bic.w	r3, r3, #15
 80015f4:	71fb      	strb	r3, [r7, #7]
 80015f6:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80015fa:	f000 fa89 	bl	8001b10 <WIZCHIP_READ>
 80015fe:	4603      	mov	r3, r0
 8001600:	71bb      	strb	r3, [r7, #6]
 8001602:	79bb      	ldrb	r3, [r7, #6]
 8001604:	80bb      	strh	r3, [r7, #4]
 8001606:	88bb      	ldrh	r3, [r7, #4]
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	b29a      	uxth	r2, r3
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	b29b      	uxth	r3, r3
 8001610:	4413      	add	r3, r2
 8001612:	80bb      	strh	r3, [r7, #4]
 8001614:	88bb      	ldrh	r3, [r7, #4]
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <wizchip_setinterruptmask>:
 800161e:	b580      	push	{r7, lr}
 8001620:	b084      	sub	sp, #16
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	80fb      	strh	r3, [r7, #6]
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	b29b      	uxth	r3, r3
 8001632:	73bb      	strb	r3, [r7, #14]
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	4619      	mov	r1, r3
 8001638:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800163c:	f000 fab4 	bl	8001ba8 <WIZCHIP_WRITE>
 8001640:	7bbb      	ldrb	r3, [r7, #14]
 8001642:	4619      	mov	r1, r3
 8001644:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001648:	f000 faae 	bl	8001ba8 <WIZCHIP_WRITE>
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <wizchip_getinterruptmask>:
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	2300      	movs	r3, #0
 800165c:	71fb      	strb	r3, [r7, #7]
 800165e:	2300      	movs	r3, #0
 8001660:	71bb      	strb	r3, [r7, #6]
 8001662:	2300      	movs	r3, #0
 8001664:	80bb      	strh	r3, [r7, #4]
 8001666:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800166a:	f000 fa51 	bl	8001b10 <WIZCHIP_READ>
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
 8001672:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001676:	f000 fa4b 	bl	8001b10 <WIZCHIP_READ>
 800167a:	4603      	mov	r3, r0
 800167c:	71bb      	strb	r3, [r7, #6]
 800167e:	79bb      	ldrb	r3, [r7, #6]
 8001680:	80bb      	strh	r3, [r7, #4]
 8001682:	88bb      	ldrh	r3, [r7, #4]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	b29a      	uxth	r2, r3
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	b29b      	uxth	r3, r3
 800168c:	4413      	add	r3, r2
 800168e:	80bb      	strh	r3, [r7, #4]
 8001690:	88bb      	ldrh	r3, [r7, #4]
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <wizphy_getphylink>:
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	2300      	movs	r3, #0
 80016a2:	71fb      	strb	r3, [r7, #7]
 80016a4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80016a8:	f000 fa32 	bl	8001b10 <WIZCHIP_READ>
 80016ac:	4603      	mov	r3, r0
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <wizphy_getphylink+0x20>
 80016b6:	2301      	movs	r3, #1
 80016b8:	71fb      	strb	r3, [r7, #7]
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <wizphy_getphypmode>:
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	2300      	movs	r3, #0
 80016ce:	71fb      	strb	r3, [r7, #7]
 80016d0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80016d4:	f000 fa1c 	bl	8001b10 <WIZCHIP_READ>
 80016d8:	4603      	mov	r3, r0
 80016da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016de:	2b30      	cmp	r3, #48	; 0x30
 80016e0:	d102      	bne.n	80016e8 <wizphy_getphypmode+0x22>
 80016e2:	2301      	movs	r3, #1
 80016e4:	71fb      	strb	r3, [r7, #7]
 80016e6:	e001      	b.n	80016ec <wizphy_getphypmode+0x26>
 80016e8:	2300      	movs	r3, #0
 80016ea:	71fb      	strb	r3, [r7, #7]
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <wizphy_reset>:
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001702:	f000 fa05 	bl	8001b10 <WIZCHIP_READ>
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001710:	71fb      	strb	r3, [r7, #7]
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	4619      	mov	r1, r3
 8001716:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800171a:	f000 fa45 	bl	8001ba8 <WIZCHIP_WRITE>
 800171e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001722:	f000 f9f5 	bl	8001b10 <WIZCHIP_READ>
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001730:	71fb      	strb	r3, [r7, #7]
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800173a:	f000 fa35 	bl	8001ba8 <WIZCHIP_WRITE>
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <wizphy_setphyconf>:
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	2300      	movs	r3, #0
 8001750:	73fb      	strb	r3, [r7, #15]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d104      	bne.n	8001764 <wizphy_setphyconf+0x1e>
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001760:	73fb      	strb	r3, [r7, #15]
 8001762:	e003      	b.n	800176c <wizphy_setphyconf+0x26>
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800176a:	73fb      	strb	r3, [r7, #15]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	785b      	ldrb	r3, [r3, #1]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d104      	bne.n	800177e <wizphy_setphyconf+0x38>
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800177a:	73fb      	strb	r3, [r7, #15]
 800177c:	e019      	b.n	80017b2 <wizphy_setphyconf+0x6c>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	78db      	ldrb	r3, [r3, #3]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d10d      	bne.n	80017a2 <wizphy_setphyconf+0x5c>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	789b      	ldrb	r3, [r3, #2]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d104      	bne.n	8001798 <wizphy_setphyconf+0x52>
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	f043 0318 	orr.w	r3, r3, #24
 8001794:	73fb      	strb	r3, [r7, #15]
 8001796:	e00c      	b.n	80017b2 <wizphy_setphyconf+0x6c>
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	f043 0308 	orr.w	r3, r3, #8
 800179e:	73fb      	strb	r3, [r7, #15]
 80017a0:	e007      	b.n	80017b2 <wizphy_setphyconf+0x6c>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	789b      	ldrb	r3, [r3, #2]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d103      	bne.n	80017b2 <wizphy_setphyconf+0x6c>
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	f043 0310 	orr.w	r3, r3, #16
 80017b0:	73fb      	strb	r3, [r7, #15]
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	4619      	mov	r1, r3
 80017b6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80017ba:	f000 f9f5 	bl	8001ba8 <WIZCHIP_WRITE>
 80017be:	f7ff ff9b 	bl	80016f8 <wizphy_reset>
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <wizphy_getphyconf>:
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	2300      	movs	r3, #0
 80017d6:	73fb      	strb	r3, [r7, #15]
 80017d8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80017dc:	f000 f998 	bl	8001b10 <WIZCHIP_READ>
 80017e0:	4603      	mov	r3, r0
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	119b      	asrs	r3, r3, #6
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	701a      	strb	r2, [r3, #0]
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017fa:	2b20      	cmp	r3, #32
 80017fc:	d001      	beq.n	8001802 <wizphy_getphyconf+0x36>
 80017fe:	2b38      	cmp	r3, #56	; 0x38
 8001800:	d103      	bne.n	800180a <wizphy_getphyconf+0x3e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	705a      	strb	r2, [r3, #1]
 8001808:	e003      	b.n	8001812 <wizphy_getphyconf+0x46>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	705a      	strb	r2, [r3, #1]
 8001810:	bf00      	nop
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001818:	3b10      	subs	r3, #16
 800181a:	2b10      	cmp	r3, #16
 800181c:	bf8c      	ite	hi
 800181e:	2201      	movhi	r2, #1
 8001820:	2200      	movls	r2, #0
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	2a00      	cmp	r2, #0
 8001826:	d10f      	bne.n	8001848 <wizphy_getphyconf+0x7c>
 8001828:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <wizphy_getphyconf+0xcc>)
 800182a:	fa22 f303 	lsr.w	r3, r2, r3
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	bf14      	ite	ne
 8001836:	2301      	movne	r3, #1
 8001838:	2300      	moveq	r3, #0
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <wizphy_getphyconf+0x7c>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	709a      	strb	r2, [r3, #2]
 8001846:	e003      	b.n	8001850 <wizphy_getphyconf+0x84>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	709a      	strb	r2, [r3, #2]
 800184e:	bf00      	nop
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001856:	3b08      	subs	r3, #8
 8001858:	2b18      	cmp	r3, #24
 800185a:	bf8c      	ite	hi
 800185c:	2201      	movhi	r2, #1
 800185e:	2200      	movls	r2, #0
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	2a00      	cmp	r2, #0
 8001864:	d10f      	bne.n	8001886 <wizphy_getphyconf+0xba>
 8001866:	4a0d      	ldr	r2, [pc, #52]	; (800189c <wizphy_getphyconf+0xd0>)
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf14      	ite	ne
 8001874:	2301      	movne	r3, #1
 8001876:	2300      	moveq	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <wizphy_getphyconf+0xba>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	70da      	strb	r2, [r3, #3]
 8001884:	e003      	b.n	800188e <wizphy_getphyconf+0xc2>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	70da      	strb	r2, [r3, #3]
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	00010101 	.word	0x00010101
 800189c:	01010001 	.word	0x01010001

080018a0 <wizphy_setphypmode>:
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
 80018aa:	2300      	movs	r3, #0
 80018ac:	73fb      	strb	r3, [r7, #15]
 80018ae:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80018b2:	f000 f92d 	bl	8001b10 <WIZCHIP_READ>
 80018b6:	4603      	mov	r3, r0
 80018b8:	73fb      	strb	r3, [r7, #15]
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <wizphy_setphypmode+0x2a>
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295
 80018c8:	e030      	b.n	800192c <wizphy_setphypmode+0x8c>
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d104      	bne.n	80018e2 <wizphy_setphypmode+0x42>
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	e003      	b.n	80018ea <wizphy_setphypmode+0x4a>
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80018e8:	73fb      	strb	r3, [r7, #15]
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	4619      	mov	r1, r3
 80018ee:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80018f2:	f000 f959 	bl	8001ba8 <WIZCHIP_WRITE>
 80018f6:	f7ff feff 	bl	80016f8 <wizphy_reset>
 80018fa:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80018fe:	f000 f907 	bl	8001b10 <WIZCHIP_READ>
 8001902:	4603      	mov	r3, r0
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d106      	bne.n	800191a <wizphy_setphypmode+0x7a>
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001912:	2b00      	cmp	r3, #0
 8001914:	d008      	beq.n	8001928 <wizphy_setphypmode+0x88>
 8001916:	2300      	movs	r3, #0
 8001918:	e008      	b.n	800192c <wizphy_setphypmode+0x8c>
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <wizphy_setphypmode+0x88>
 8001924:	2300      	movs	r3, #0
 8001926:	e001      	b.n	800192c <wizphy_setphypmode+0x8c>
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <wizchip_setnetinfo>:
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2206      	movs	r2, #6
 8001940:	4619      	mov	r1, r3
 8001942:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001946:	f000 f9dd 	bl	8001d04 <WIZCHIP_WRITE_BUF>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	330e      	adds	r3, #14
 800194e:	2204      	movs	r2, #4
 8001950:	4619      	mov	r1, r3
 8001952:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001956:	f000 f9d5 	bl	8001d04 <WIZCHIP_WRITE_BUF>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	330a      	adds	r3, #10
 800195e:	2204      	movs	r2, #4
 8001960:	4619      	mov	r1, r3
 8001962:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001966:	f000 f9cd 	bl	8001d04 <WIZCHIP_WRITE_BUF>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3306      	adds	r3, #6
 800196e:	2204      	movs	r2, #4
 8001970:	4619      	mov	r1, r3
 8001972:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001976:	f000 f9c5 	bl	8001d04 <WIZCHIP_WRITE_BUF>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7c9a      	ldrb	r2, [r3, #18]
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <wizchip_setnetinfo+0x78>)
 8001980:	701a      	strb	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7cda      	ldrb	r2, [r3, #19]
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <wizchip_setnetinfo+0x78>)
 8001988:	705a      	strb	r2, [r3, #1]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7d1a      	ldrb	r2, [r3, #20]
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <wizchip_setnetinfo+0x78>)
 8001990:	709a      	strb	r2, [r3, #2]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7d5a      	ldrb	r2, [r3, #21]
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <wizchip_setnetinfo+0x78>)
 8001998:	70da      	strb	r2, [r3, #3]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7d9a      	ldrb	r2, [r3, #22]
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <wizchip_setnetinfo+0x7c>)
 80019a0:	701a      	strb	r2, [r3, #0]
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200007dc 	.word	0x200007dc
 80019b0:	200007e0 	.word	0x200007e0

080019b4 <wizchip_getnetinfo>:
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2206      	movs	r2, #6
 80019c0:	4619      	mov	r1, r3
 80019c2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80019c6:	f000 f93d 	bl	8001c44 <WIZCHIP_READ_BUF>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	330e      	adds	r3, #14
 80019ce:	2204      	movs	r2, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80019d6:	f000 f935 	bl	8001c44 <WIZCHIP_READ_BUF>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	330a      	adds	r3, #10
 80019de:	2204      	movs	r2, #4
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80019e6:	f000 f92d 	bl	8001c44 <WIZCHIP_READ_BUF>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3306      	adds	r3, #6
 80019ee:	2204      	movs	r2, #4
 80019f0:	4619      	mov	r1, r3
 80019f2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80019f6:	f000 f925 	bl	8001c44 <WIZCHIP_READ_BUF>
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <wizchip_getnetinfo+0x78>)
 80019fc:	781a      	ldrb	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	749a      	strb	r2, [r3, #18]
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <wizchip_getnetinfo+0x78>)
 8001a04:	785a      	ldrb	r2, [r3, #1]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	74da      	strb	r2, [r3, #19]
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <wizchip_getnetinfo+0x78>)
 8001a0c:	789a      	ldrb	r2, [r3, #2]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	751a      	strb	r2, [r3, #20]
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <wizchip_getnetinfo+0x78>)
 8001a14:	78da      	ldrb	r2, [r3, #3]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	755a      	strb	r2, [r3, #21]
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <wizchip_getnetinfo+0x7c>)
 8001a1c:	781a      	ldrb	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	759a      	strb	r2, [r3, #22]
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200007dc 	.word	0x200007dc
 8001a30:	200007e0 	.word	0x200007e0

08001a34 <wizchip_setnetmode>:
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73fb      	strb	r3, [r7, #15]
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <wizchip_setnetmode+0x1e>
 8001a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a50:	e00e      	b.n	8001a70 <wizchip_setnetmode+0x3c>
 8001a52:	2000      	movs	r0, #0
 8001a54:	f000 f85c 	bl	8001b10 <WIZCHIP_READ>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	7bfa      	ldrb	r2, [r7, #15]
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	4619      	mov	r1, r3
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f000 f89d 	bl	8001ba8 <WIZCHIP_WRITE>
 8001a6e:	2300      	movs	r3, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <wizchip_getnetmode>:
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f000 f847 	bl	8001b10 <WIZCHIP_READ>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4618      	mov	r0, r3
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <wizchip_settimeout>:
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001a9a:	f000 f885 	bl	8001ba8 <WIZCHIP_WRITE>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	885b      	ldrh	r3, [r3, #2]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001aae:	f000 f87b 	bl	8001ba8 <WIZCHIP_WRITE>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	885b      	ldrh	r3, [r3, #2]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001abe:	f000 f873 	bl	8001ba8 <WIZCHIP_WRITE>
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <wizchip_gettimeout>:
 8001aca:	b590      	push	{r4, r7, lr}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001ad6:	f000 f81b 	bl	8001b10 <WIZCHIP_READ>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001ae6:	f000 f813 	bl	8001b10 <WIZCHIP_READ>
 8001aea:	4603      	mov	r3, r0
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	b29c      	uxth	r4, r3
 8001af2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001af6:	f000 f80b 	bl	8001b10 <WIZCHIP_READ>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	4423      	add	r3, r4
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	805a      	strh	r2, [r3, #2]
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd90      	pop	{r4, r7, pc}
	...

08001b10 <WIZCHIP_READ>:
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <WIZCHIP_READ+0x94>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4798      	blx	r3
 8001b1e:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <WIZCHIP_READ+0x94>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	4798      	blx	r3
 8001b24:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <WIZCHIP_READ+0x94>)
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <WIZCHIP_READ+0x24>
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <WIZCHIP_READ+0x94>)
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d114      	bne.n	8001b5e <WIZCHIP_READ+0x4e>
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <WIZCHIP_READ+0x94>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	0c12      	lsrs	r2, r2, #16
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4798      	blx	r3
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <WIZCHIP_READ+0x94>)
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	0a12      	lsrs	r2, r2, #8
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4798      	blx	r3
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <WIZCHIP_READ+0x94>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4798      	blx	r3
 8001b5c:	e011      	b.n	8001b82 <WIZCHIP_READ+0x72>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	0c1b      	lsrs	r3, r3, #16
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	733b      	strb	r3, [r7, #12]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	737b      	strb	r3, [r7, #13]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	73bb      	strb	r3, [r7, #14]
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <WIZCHIP_READ+0x94>)
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	f107 020c 	add.w	r2, r7, #12
 8001b7c:	2103      	movs	r1, #3
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4798      	blx	r3
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <WIZCHIP_READ+0x94>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4798      	blx	r3
 8001b88:	4603      	mov	r3, r0
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <WIZCHIP_READ+0x94>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	4798      	blx	r3
 8001b92:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <WIZCHIP_READ+0x94>)
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	4798      	blx	r3
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000020 	.word	0x20000020

08001ba8 <WIZCHIP_WRITE>:
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	70fb      	strb	r3, [r7, #3]
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <WIZCHIP_WRITE+0x98>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4798      	blx	r3
 8001bba:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <WIZCHIP_WRITE+0x98>)
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	4798      	blx	r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <WIZCHIP_WRITE+0x98>)
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d119      	bne.n	8001c04 <WIZCHIP_WRITE+0x5c>
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <WIZCHIP_WRITE+0x98>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	0c12      	lsrs	r2, r2, #16
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4798      	blx	r3
 8001bde:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <WIZCHIP_WRITE+0x98>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	0a12      	lsrs	r2, r2, #8
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	4610      	mov	r0, r2
 8001bea:	4798      	blx	r3
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <WIZCHIP_WRITE+0x98>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4798      	blx	r3
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <WIZCHIP_WRITE+0x98>)
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4798      	blx	r3
 8001c02:	e013      	b.n	8001c2c <WIZCHIP_WRITE+0x84>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	0c1b      	lsrs	r3, r3, #16
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	733b      	strb	r3, [r7, #12]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	737b      	strb	r3, [r7, #13]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	73bb      	strb	r3, [r7, #14]
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <WIZCHIP_WRITE+0x98>)
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	f107 020c 	add.w	r2, r7, #12
 8001c26:	2104      	movs	r1, #4
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4798      	blx	r3
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <WIZCHIP_WRITE+0x98>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	4798      	blx	r3
 8001c32:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <WIZCHIP_WRITE+0x98>)
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	4798      	blx	r3
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000020 	.word	0x20000020

08001c44 <WIZCHIP_READ_BUF>:
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	80fb      	strh	r3, [r7, #6]
 8001c52:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <WIZCHIP_READ_BUF+0xbc>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	4798      	blx	r3
 8001c58:	4b29      	ldr	r3, [pc, #164]	; (8001d00 <WIZCHIP_READ_BUF+0xbc>)
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	4798      	blx	r3
 8001c5e:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <WIZCHIP_READ_BUF+0xbc>)
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <WIZCHIP_READ_BUF+0x2a>
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <WIZCHIP_READ_BUF+0xbc>)
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d126      	bne.n	8001cbc <WIZCHIP_READ_BUF+0x78>
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <WIZCHIP_READ_BUF+0xbc>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	0c12      	lsrs	r2, r2, #16
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4798      	blx	r3
 8001c7c:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <WIZCHIP_READ_BUF+0xbc>)
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	0a12      	lsrs	r2, r2, #8
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	4610      	mov	r0, r2
 8001c88:	4798      	blx	r3
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <WIZCHIP_READ_BUF+0xbc>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	4610      	mov	r0, r2
 8001c94:	4798      	blx	r3
 8001c96:	2300      	movs	r3, #0
 8001c98:	82fb      	strh	r3, [r7, #22]
 8001c9a:	e00a      	b.n	8001cb2 <WIZCHIP_READ_BUF+0x6e>
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <WIZCHIP_READ_BUF+0xbc>)
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	8afa      	ldrh	r2, [r7, #22]
 8001ca2:	68b9      	ldr	r1, [r7, #8]
 8001ca4:	188c      	adds	r4, r1, r2
 8001ca6:	4798      	blx	r3
 8001ca8:	4603      	mov	r3, r0
 8001caa:	7023      	strb	r3, [r4, #0]
 8001cac:	8afb      	ldrh	r3, [r7, #22]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	82fb      	strh	r3, [r7, #22]
 8001cb2:	8afa      	ldrh	r2, [r7, #22]
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d3f0      	bcc.n	8001c9c <WIZCHIP_READ_BUF+0x58>
 8001cba:	e017      	b.n	8001cec <WIZCHIP_READ_BUF+0xa8>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	0c1b      	lsrs	r3, r3, #16
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	743b      	strb	r3, [r7, #16]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	0a1b      	lsrs	r3, r3, #8
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	747b      	strb	r3, [r7, #17]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	74bb      	strb	r3, [r7, #18]
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <WIZCHIP_READ_BUF+0xbc>)
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	f107 0210 	add.w	r2, r7, #16
 8001cda:	2103      	movs	r1, #3
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4798      	blx	r3
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <WIZCHIP_READ_BUF+0xbc>)
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	88fa      	ldrh	r2, [r7, #6]
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	68b8      	ldr	r0, [r7, #8]
 8001cea:	4798      	blx	r3
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <WIZCHIP_READ_BUF+0xbc>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4798      	blx	r3
 8001cf2:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <WIZCHIP_READ_BUF+0xbc>)
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	4798      	blx	r3
 8001cf8:	bf00      	nop
 8001cfa:	371c      	adds	r7, #28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd90      	pop	{r4, r7, pc}
 8001d00:	20000020 	.word	0x20000020

08001d04 <WIZCHIP_WRITE_BUF>:
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	80fb      	strh	r3, [r7, #6]
 8001d12:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	4798      	blx	r3
 8001d18:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	4798      	blx	r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f043 0304 	orr.w	r3, r3, #4
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d126      	bne.n	8001d7c <WIZCHIP_WRITE_BUF+0x78>
 8001d2e:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	0c12      	lsrs	r2, r2, #16
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4798      	blx	r3
 8001d3c:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	0a12      	lsrs	r2, r2, #8
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	4610      	mov	r0, r2
 8001d48:	4798      	blx	r3
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	4610      	mov	r0, r2
 8001d54:	4798      	blx	r3
 8001d56:	2300      	movs	r3, #0
 8001d58:	82fb      	strh	r3, [r7, #22]
 8001d5a:	e00a      	b.n	8001d72 <WIZCHIP_WRITE_BUF+0x6e>
 8001d5c:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	8afa      	ldrh	r2, [r7, #22]
 8001d62:	68b9      	ldr	r1, [r7, #8]
 8001d64:	440a      	add	r2, r1
 8001d66:	7812      	ldrb	r2, [r2, #0]
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4798      	blx	r3
 8001d6c:	8afb      	ldrh	r3, [r7, #22]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	82fb      	strh	r3, [r7, #22]
 8001d72:	8afa      	ldrh	r2, [r7, #22]
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d3f0      	bcc.n	8001d5c <WIZCHIP_WRITE_BUF+0x58>
 8001d7a:	e017      	b.n	8001dac <WIZCHIP_WRITE_BUF+0xa8>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	0c1b      	lsrs	r3, r3, #16
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	743b      	strb	r3, [r7, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	747b      	strb	r3, [r7, #17]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	74bb      	strb	r3, [r7, #18]
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	f107 0210 	add.w	r2, r7, #16
 8001d9a:	2103      	movs	r1, #3
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4798      	blx	r3
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	88fa      	ldrh	r2, [r7, #6]
 8001da6:	4611      	mov	r1, r2
 8001da8:	68b8      	ldr	r0, [r7, #8]
 8001daa:	4798      	blx	r3
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4798      	blx	r3
 8001db2:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	4798      	blx	r3
 8001db8:	bf00      	nop
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000020 	.word	0x20000020

08001dc4 <getSn_TX_FSR>:
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	81fb      	strh	r3, [r7, #14]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	81bb      	strh	r3, [r7, #12]
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	3301      	adds	r3, #1
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fe94 	bl	8001b10 <WIZCHIP_READ>
 8001de8:	4603      	mov	r3, r0
 8001dea:	81bb      	strh	r3, [r7, #12]
 8001dec:	89bb      	ldrh	r3, [r7, #12]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	b29c      	uxth	r4, r3
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	3301      	adds	r3, #1
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fe86 	bl	8001b10 <WIZCHIP_READ>
 8001e04:	4603      	mov	r3, r0
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4423      	add	r3, r4
 8001e0a:	81bb      	strh	r3, [r7, #12]
 8001e0c:	89bb      	ldrh	r3, [r7, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d01a      	beq.n	8001e48 <getSn_TX_FSR+0x84>
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	3301      	adds	r3, #1
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fe76 	bl	8001b10 <WIZCHIP_READ>
 8001e24:	4603      	mov	r3, r0
 8001e26:	81fb      	strh	r3, [r7, #14]
 8001e28:	89fb      	ldrh	r3, [r7, #14]
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	b29c      	uxth	r4, r3
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	3301      	adds	r3, #1
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fe68 	bl	8001b10 <WIZCHIP_READ>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	4423      	add	r3, r4
 8001e46:	81fb      	strh	r3, [r7, #14]
 8001e48:	89fa      	ldrh	r2, [r7, #14]
 8001e4a:	89bb      	ldrh	r3, [r7, #12]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d1c2      	bne.n	8001dd6 <getSn_TX_FSR+0x12>
 8001e50:	89fb      	ldrh	r3, [r7, #14]
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd90      	pop	{r4, r7, pc}

08001e5a <getSn_RX_RSR>:
 8001e5a:	b590      	push	{r4, r7, lr}
 8001e5c:	b085      	sub	sp, #20
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	71fb      	strb	r3, [r7, #7]
 8001e64:	2300      	movs	r3, #0
 8001e66:	81fb      	strh	r3, [r7, #14]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	81bb      	strh	r3, [r7, #12]
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	3301      	adds	r3, #1
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fe49 	bl	8001b10 <WIZCHIP_READ>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	81bb      	strh	r3, [r7, #12]
 8001e82:	89bb      	ldrh	r3, [r7, #12]
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	b29c      	uxth	r4, r3
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fe3b 	bl	8001b10 <WIZCHIP_READ>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	4423      	add	r3, r4
 8001ea0:	81bb      	strh	r3, [r7, #12]
 8001ea2:	89bb      	ldrh	r3, [r7, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d01a      	beq.n	8001ede <getSn_RX_RSR+0x84>
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	3301      	adds	r3, #1
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fe2b 	bl	8001b10 <WIZCHIP_READ>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	81fb      	strh	r3, [r7, #14]
 8001ebe:	89fb      	ldrh	r3, [r7, #14]
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	b29c      	uxth	r4, r3
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	3301      	adds	r3, #1
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fe1d 	bl	8001b10 <WIZCHIP_READ>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	4423      	add	r3, r4
 8001edc:	81fb      	strh	r3, [r7, #14]
 8001ede:	89fa      	ldrh	r2, [r7, #14]
 8001ee0:	89bb      	ldrh	r3, [r7, #12]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d1c2      	bne.n	8001e6c <getSn_RX_RSR+0x12>
 8001ee6:	89fb      	ldrh	r3, [r7, #14]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd90      	pop	{r4, r7, pc}

08001ef0 <wiz_send_data>:
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	71fb      	strb	r3, [r7, #7]
 8001efc:	4613      	mov	r3, r2
 8001efe:	80bb      	strh	r3, [r7, #4]
 8001f00:	2300      	movs	r3, #0
 8001f02:	81fb      	strh	r3, [r7, #14]
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	88bb      	ldrh	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d048      	beq.n	8001fa0 <wiz_send_data+0xb0>
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	3301      	adds	r3, #1
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fdf8 	bl	8001b10 <WIZCHIP_READ>
 8001f20:	4603      	mov	r3, r0
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	b29c      	uxth	r4, r3
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fdeb 	bl	8001b10 <WIZCHIP_READ>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	4423      	add	r3, r4
 8001f40:	81fb      	strh	r3, [r7, #14]
 8001f42:	89fb      	ldrh	r3, [r7, #14]
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	79fa      	ldrb	r2, [r7, #7]
 8001f48:	0092      	lsls	r2, r2, #2
 8001f4a:	3202      	adds	r2, #2
 8001f4c:	00d2      	lsls	r2, r2, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	88bb      	ldrh	r3, [r7, #4]
 8001f54:	461a      	mov	r2, r3
 8001f56:	6839      	ldr	r1, [r7, #0]
 8001f58:	68b8      	ldr	r0, [r7, #8]
 8001f5a:	f7ff fed3 	bl	8001d04 <WIZCHIP_WRITE_BUF>
 8001f5e:	89fa      	ldrh	r2, [r7, #14]
 8001f60:	88bb      	ldrh	r3, [r7, #4]
 8001f62:	4413      	add	r3, r2
 8001f64:	81fb      	strh	r3, [r7, #14]
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001f72:	461a      	mov	r2, r3
 8001f74:	89fb      	ldrh	r3, [r7, #14]
 8001f76:	0a1b      	lsrs	r3, r3, #8
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4610      	mov	r0, r2
 8001f80:	f7ff fe12 	bl	8001ba8 <WIZCHIP_WRITE>
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	3301      	adds	r3, #1
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001f90:	461a      	mov	r2, r3
 8001f92:	89fb      	ldrh	r3, [r7, #14]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	4619      	mov	r1, r3
 8001f98:	4610      	mov	r0, r2
 8001f9a:	f7ff fe05 	bl	8001ba8 <WIZCHIP_WRITE>
 8001f9e:	e000      	b.n	8001fa2 <wiz_send_data+0xb2>
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd90      	pop	{r4, r7, pc}

08001fa8 <wiz_recv_data>:
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	80bb      	strh	r3, [r7, #4]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	81fb      	strh	r3, [r7, #14]
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	88bb      	ldrh	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d048      	beq.n	8002058 <wiz_recv_data+0xb0>
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	3301      	adds	r3, #1
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fd9c 	bl	8001b10 <WIZCHIP_READ>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	b29c      	uxth	r4, r3
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fd8f 	bl	8001b10 <WIZCHIP_READ>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	4423      	add	r3, r4
 8001ff8:	81fb      	strh	r3, [r7, #14]
 8001ffa:	89fb      	ldrh	r3, [r7, #14]
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	79fa      	ldrb	r2, [r7, #7]
 8002000:	0092      	lsls	r2, r2, #2
 8002002:	3203      	adds	r2, #3
 8002004:	00d2      	lsls	r2, r2, #3
 8002006:	4413      	add	r3, r2
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	88bb      	ldrh	r3, [r7, #4]
 800200c:	461a      	mov	r2, r3
 800200e:	6839      	ldr	r1, [r7, #0]
 8002010:	68b8      	ldr	r0, [r7, #8]
 8002012:	f7ff fe17 	bl	8001c44 <WIZCHIP_READ_BUF>
 8002016:	89fa      	ldrh	r2, [r7, #14]
 8002018:	88bb      	ldrh	r3, [r7, #4]
 800201a:	4413      	add	r3, r2
 800201c:	81fb      	strh	r3, [r7, #14]
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	3301      	adds	r3, #1
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800202a:	461a      	mov	r2, r3
 800202c:	89fb      	ldrh	r3, [r7, #14]
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	b29b      	uxth	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	4619      	mov	r1, r3
 8002036:	4610      	mov	r0, r2
 8002038:	f7ff fdb6 	bl	8001ba8 <WIZCHIP_WRITE>
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	3301      	adds	r3, #1
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002048:	461a      	mov	r2, r3
 800204a:	89fb      	ldrh	r3, [r7, #14]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	4619      	mov	r1, r3
 8002050:	4610      	mov	r0, r2
 8002052:	f7ff fda9 	bl	8001ba8 <WIZCHIP_WRITE>
 8002056:	e000      	b.n	800205a <wiz_recv_data+0xb2>
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	bd90      	pop	{r4, r7, pc}

08002060 <Reset_Handler>:
 8002060:	f7fe fa9a 	bl	8000598 <SystemInit>
 8002064:	480b      	ldr	r0, [pc, #44]	; (8002094 <LoopFillZerobss+0xe>)
 8002066:	490c      	ldr	r1, [pc, #48]	; (8002098 <LoopFillZerobss+0x12>)
 8002068:	4a0c      	ldr	r2, [pc, #48]	; (800209c <LoopFillZerobss+0x16>)
 800206a:	2300      	movs	r3, #0
 800206c:	e002      	b.n	8002074 <LoopCopyDataInit>

0800206e <CopyDataInit>:
 800206e:	58d4      	ldr	r4, [r2, r3]
 8002070:	50c4      	str	r4, [r0, r3]
 8002072:	3304      	adds	r3, #4

08002074 <LoopCopyDataInit>:
 8002074:	18c4      	adds	r4, r0, r3
 8002076:	428c      	cmp	r4, r1
 8002078:	d3f9      	bcc.n	800206e <CopyDataInit>
 800207a:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <LoopFillZerobss+0x1a>)
 800207c:	4c09      	ldr	r4, [pc, #36]	; (80020a4 <LoopFillZerobss+0x1e>)
 800207e:	2300      	movs	r3, #0
 8002080:	e001      	b.n	8002086 <LoopFillZerobss>

08002082 <FillZerobss>:
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	3204      	adds	r2, #4

08002086 <LoopFillZerobss>:
 8002086:	42a2      	cmp	r2, r4
 8002088:	d3fb      	bcc.n	8002082 <FillZerobss>
 800208a:	f002 febf 	bl	8004e0c <__libc_init_array>
 800208e:	f7fe f899 	bl	80001c4 <main>
 8002092:	4770      	bx	lr
 8002094:	20000000 	.word	0x20000000
 8002098:	200000a8 	.word	0x200000a8
 800209c:	08004fb0 	.word	0x08004fb0
 80020a0:	200000a8 	.word	0x200000a8
 80020a4:	20001674 	.word	0x20001674

080020a8 <ADC1_2_IRQHandler>:
 80020a8:	e7fe      	b.n	80020a8 <ADC1_2_IRQHandler>
	...

080020ac <HAL_Init>:
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <HAL_Init+0x28>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a07      	ldr	r2, [pc, #28]	; (80020d4 <HAL_Init+0x28>)
 80020b6:	f043 0310 	orr.w	r3, r3, #16
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	2003      	movs	r0, #3
 80020be:	f000 f92b 	bl	8002318 <HAL_NVIC_SetPriorityGrouping>
 80020c2:	200f      	movs	r0, #15
 80020c4:	f000 f808 	bl	80020d8 <HAL_InitTick>
 80020c8:	f7fe f9c0 	bl	800044c <HAL_MspInit>
 80020cc:	2300      	movs	r3, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40022000 	.word	0x40022000

080020d8 <HAL_InitTick>:
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_InitTick+0x54>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_InitTick+0x58>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4619      	mov	r1, r3
 80020ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80020f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 f935 	bl	8002366 <HAL_SYSTICK_Config>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_InitTick+0x2e>
 8002102:	2301      	movs	r3, #1
 8002104:	e00e      	b.n	8002124 <HAL_InitTick+0x4c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b0f      	cmp	r3, #15
 800210a:	d80a      	bhi.n	8002122 <HAL_InitTick+0x4a>
 800210c:	2200      	movs	r2, #0
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	f000 f90b 	bl	800232e <HAL_NVIC_SetPriority>
 8002118:	4a06      	ldr	r2, [pc, #24]	; (8002134 <HAL_InitTick+0x5c>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	2300      	movs	r3, #0
 8002120:	e000      	b.n	8002124 <HAL_InitTick+0x4c>
 8002122:	2301      	movs	r3, #1
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000018 	.word	0x20000018
 8002130:	20000050 	.word	0x20000050
 8002134:	2000004c 	.word	0x2000004c

08002138 <HAL_IncTick>:
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_IncTick+0x1c>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_IncTick+0x20>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4413      	add	r3, r2
 8002148:	4a03      	ldr	r2, [pc, #12]	; (8002158 <HAL_IncTick+0x20>)
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr
 8002154:	20000050 	.word	0x20000050
 8002158:	200007e4 	.word	0x200007e4

0800215c <HAL_GetTick>:
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
 8002160:	4b02      	ldr	r3, [pc, #8]	; (800216c <HAL_GetTick+0x10>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	200007e4 	.word	0x200007e4

08002170 <HAL_Delay>:
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	f7ff fff0 	bl	800215c <HAL_GetTick>
 800217c:	60b8      	str	r0, [r7, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d005      	beq.n	8002196 <HAL_Delay+0x26>
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_Delay+0x44>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	bf00      	nop
 8002198:	f7ff ffe0 	bl	800215c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d8f7      	bhi.n	8002198 <HAL_Delay+0x28>
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000050 	.word	0x20000050

080021b8 <__NVIC_SetPriorityGrouping>:
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	021a      	lsls	r2, r3, #8
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4313      	orrs	r3, r2
 80021e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	4a04      	ldr	r2, [pc, #16]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	60d3      	str	r3, [r2, #12]
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_GetPriorityGrouping>:
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <__NVIC_GetPriorityGrouping+0x18>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_SetPriority>:
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	db0a      	blt.n	8002246 <__NVIC_SetPriority+0x2a>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	490c      	ldr	r1, [pc, #48]	; (8002268 <__NVIC_SetPriority+0x4c>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	440b      	add	r3, r1
 8002240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002244:	e00a      	b.n	800225c <__NVIC_SetPriority+0x40>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4908      	ldr	r1, [pc, #32]	; (800226c <__NVIC_SetPriority+0x50>)
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	3b04      	subs	r3, #4
 8002254:	0112      	lsls	r2, r2, #4
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	440b      	add	r3, r1
 800225a:	761a      	strb	r2, [r3, #24]
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000e100 	.word	0xe000e100
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <NVIC_EncodePriority>:
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	; 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f1c3 0307 	rsb	r3, r3, #7
 800228a:	2b04      	cmp	r3, #4
 800228c:	bf28      	it	cs
 800228e:	2304      	movcs	r3, #4
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3304      	adds	r3, #4
 8002296:	2b06      	cmp	r3, #6
 8002298:	d902      	bls.n	80022a0 <NVIC_EncodePriority+0x30>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3b03      	subs	r3, #3
 800229e:	e000      	b.n	80022a2 <NVIC_EncodePriority+0x32>
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	401a      	ands	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	409a      	lsls	r2, r3
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	43d9      	mvns	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	400b      	ands	r3, r1
 80022c8:	4313      	orrs	r3, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	3724      	adds	r7, #36	; 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <SysTick_Config>:
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e4:	d301      	bcc.n	80022ea <SysTick_Config+0x16>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e00f      	b.n	800230a <SysTick_Config+0x36>
 80022ea:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <SysTick_Config+0x40>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	6053      	str	r3, [r2, #4]
 80022f2:	210f      	movs	r1, #15
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	f7ff ff90 	bl	800221c <__NVIC_SetPriority>
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <SysTick_Config+0x40>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	4b04      	ldr	r3, [pc, #16]	; (8002314 <SysTick_Config+0x40>)
 8002304:	2207      	movs	r2, #7
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	2300      	movs	r3, #0
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	e000e010 	.word	0xe000e010

08002318 <HAL_NVIC_SetPriorityGrouping>:
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ff49 	bl	80021b8 <__NVIC_SetPriorityGrouping>
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_SetPriority>:
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	f7ff ff5e 	bl	8002200 <__NVIC_GetPriorityGrouping>
 8002344:	6178      	str	r0, [r7, #20]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	6978      	ldr	r0, [r7, #20]
 800234c:	f7ff ff90 	bl	8002270 <NVIC_EncodePriority>
 8002350:	4602      	mov	r2, r0
 8002352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff5f 	bl	800221c <__NVIC_SetPriority>
 800235e:	bf00      	nop
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_SYSTICK_Config>:
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ffb0 	bl	80022d4 <SysTick_Config>
 8002374:	4603      	mov	r3, r0
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <HAL_GPIO_Init>:
 8002380:	b480      	push	{r7}
 8002382:	b08b      	sub	sp, #44	; 0x2c
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	2300      	movs	r3, #0
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
 800238e:	2300      	movs	r3, #0
 8002390:	623b      	str	r3, [r7, #32]
 8002392:	e169      	b.n	8002668 <HAL_GPIO_Init+0x2e8>
 8002394:	2201      	movs	r2, #1
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	f040 8158 	bne.w	8002662 <HAL_GPIO_Init+0x2e2>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4a9a      	ldr	r2, [pc, #616]	; (8002620 <HAL_GPIO_Init+0x2a0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d05e      	beq.n	800247a <HAL_GPIO_Init+0xfa>
 80023bc:	4a98      	ldr	r2, [pc, #608]	; (8002620 <HAL_GPIO_Init+0x2a0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d875      	bhi.n	80024ae <HAL_GPIO_Init+0x12e>
 80023c2:	4a98      	ldr	r2, [pc, #608]	; (8002624 <HAL_GPIO_Init+0x2a4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d058      	beq.n	800247a <HAL_GPIO_Init+0xfa>
 80023c8:	4a96      	ldr	r2, [pc, #600]	; (8002624 <HAL_GPIO_Init+0x2a4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d86f      	bhi.n	80024ae <HAL_GPIO_Init+0x12e>
 80023ce:	4a96      	ldr	r2, [pc, #600]	; (8002628 <HAL_GPIO_Init+0x2a8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d052      	beq.n	800247a <HAL_GPIO_Init+0xfa>
 80023d4:	4a94      	ldr	r2, [pc, #592]	; (8002628 <HAL_GPIO_Init+0x2a8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d869      	bhi.n	80024ae <HAL_GPIO_Init+0x12e>
 80023da:	4a94      	ldr	r2, [pc, #592]	; (800262c <HAL_GPIO_Init+0x2ac>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d04c      	beq.n	800247a <HAL_GPIO_Init+0xfa>
 80023e0:	4a92      	ldr	r2, [pc, #584]	; (800262c <HAL_GPIO_Init+0x2ac>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d863      	bhi.n	80024ae <HAL_GPIO_Init+0x12e>
 80023e6:	4a92      	ldr	r2, [pc, #584]	; (8002630 <HAL_GPIO_Init+0x2b0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d046      	beq.n	800247a <HAL_GPIO_Init+0xfa>
 80023ec:	4a90      	ldr	r2, [pc, #576]	; (8002630 <HAL_GPIO_Init+0x2b0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d85d      	bhi.n	80024ae <HAL_GPIO_Init+0x12e>
 80023f2:	2b12      	cmp	r3, #18
 80023f4:	d82a      	bhi.n	800244c <HAL_GPIO_Init+0xcc>
 80023f6:	2b12      	cmp	r3, #18
 80023f8:	d859      	bhi.n	80024ae <HAL_GPIO_Init+0x12e>
 80023fa:	a201      	add	r2, pc, #4	; (adr r2, 8002400 <HAL_GPIO_Init+0x80>)
 80023fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002400:	0800247b 	.word	0x0800247b
 8002404:	08002455 	.word	0x08002455
 8002408:	08002467 	.word	0x08002467
 800240c:	080024a9 	.word	0x080024a9
 8002410:	080024af 	.word	0x080024af
 8002414:	080024af 	.word	0x080024af
 8002418:	080024af 	.word	0x080024af
 800241c:	080024af 	.word	0x080024af
 8002420:	080024af 	.word	0x080024af
 8002424:	080024af 	.word	0x080024af
 8002428:	080024af 	.word	0x080024af
 800242c:	080024af 	.word	0x080024af
 8002430:	080024af 	.word	0x080024af
 8002434:	080024af 	.word	0x080024af
 8002438:	080024af 	.word	0x080024af
 800243c:	080024af 	.word	0x080024af
 8002440:	080024af 	.word	0x080024af
 8002444:	0800245d 	.word	0x0800245d
 8002448:	08002471 	.word	0x08002471
 800244c:	4a79      	ldr	r2, [pc, #484]	; (8002634 <HAL_GPIO_Init+0x2b4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d013      	beq.n	800247a <HAL_GPIO_Init+0xfa>
 8002452:	e02c      	b.n	80024ae <HAL_GPIO_Init+0x12e>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	623b      	str	r3, [r7, #32]
 800245a:	e029      	b.n	80024b0 <HAL_GPIO_Init+0x130>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	3304      	adds	r3, #4
 8002462:	623b      	str	r3, [r7, #32]
 8002464:	e024      	b.n	80024b0 <HAL_GPIO_Init+0x130>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	3308      	adds	r3, #8
 800246c:	623b      	str	r3, [r7, #32]
 800246e:	e01f      	b.n	80024b0 <HAL_GPIO_Init+0x130>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	330c      	adds	r3, #12
 8002476:	623b      	str	r3, [r7, #32]
 8002478:	e01a      	b.n	80024b0 <HAL_GPIO_Init+0x130>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d102      	bne.n	8002488 <HAL_GPIO_Init+0x108>
 8002482:	2304      	movs	r3, #4
 8002484:	623b      	str	r3, [r7, #32]
 8002486:	e013      	b.n	80024b0 <HAL_GPIO_Init+0x130>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d105      	bne.n	800249c <HAL_GPIO_Init+0x11c>
 8002490:	2308      	movs	r3, #8
 8002492:	623b      	str	r3, [r7, #32]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	611a      	str	r2, [r3, #16]
 800249a:	e009      	b.n	80024b0 <HAL_GPIO_Init+0x130>
 800249c:	2308      	movs	r3, #8
 800249e:	623b      	str	r3, [r7, #32]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	615a      	str	r2, [r3, #20]
 80024a6:	e003      	b.n	80024b0 <HAL_GPIO_Init+0x130>
 80024a8:	2300      	movs	r3, #0
 80024aa:	623b      	str	r3, [r7, #32]
 80024ac:	e000      	b.n	80024b0 <HAL_GPIO_Init+0x130>
 80024ae:	bf00      	nop
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2bff      	cmp	r3, #255	; 0xff
 80024b4:	d801      	bhi.n	80024ba <HAL_GPIO_Init+0x13a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	e001      	b.n	80024be <HAL_GPIO_Init+0x13e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3304      	adds	r3, #4
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2bff      	cmp	r3, #255	; 0xff
 80024c4:	d802      	bhi.n	80024cc <HAL_GPIO_Init+0x14c>
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	e002      	b.n	80024d2 <HAL_GPIO_Init+0x152>
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	3b08      	subs	r3, #8
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	210f      	movs	r1, #15
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	401a      	ands	r2, r3
 80024e4:	6a39      	ldr	r1, [r7, #32]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ec:	431a      	orrs	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 80b1 	beq.w	8002662 <HAL_GPIO_Init+0x2e2>
 8002500:	4b4d      	ldr	r3, [pc, #308]	; (8002638 <HAL_GPIO_Init+0x2b8>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	4a4c      	ldr	r2, [pc, #304]	; (8002638 <HAL_GPIO_Init+0x2b8>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6193      	str	r3, [r2, #24]
 800250c:	4b4a      	ldr	r3, [pc, #296]	; (8002638 <HAL_GPIO_Init+0x2b8>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	4a48      	ldr	r2, [pc, #288]	; (800263c <HAL_GPIO_Init+0x2bc>)
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3302      	adds	r3, #2
 8002520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	220f      	movs	r2, #15
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4013      	ands	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a40      	ldr	r2, [pc, #256]	; (8002640 <HAL_GPIO_Init+0x2c0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d013      	beq.n	800256c <HAL_GPIO_Init+0x1ec>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a3f      	ldr	r2, [pc, #252]	; (8002644 <HAL_GPIO_Init+0x2c4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00d      	beq.n	8002568 <HAL_GPIO_Init+0x1e8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a3e      	ldr	r2, [pc, #248]	; (8002648 <HAL_GPIO_Init+0x2c8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d007      	beq.n	8002564 <HAL_GPIO_Init+0x1e4>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a3d      	ldr	r2, [pc, #244]	; (800264c <HAL_GPIO_Init+0x2cc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_GPIO_Init+0x1e0>
 800255c:	2303      	movs	r3, #3
 800255e:	e006      	b.n	800256e <HAL_GPIO_Init+0x1ee>
 8002560:	2304      	movs	r3, #4
 8002562:	e004      	b.n	800256e <HAL_GPIO_Init+0x1ee>
 8002564:	2302      	movs	r3, #2
 8002566:	e002      	b.n	800256e <HAL_GPIO_Init+0x1ee>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <HAL_GPIO_Init+0x1ee>
 800256c:	2300      	movs	r3, #0
 800256e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002570:	f002 0203 	and.w	r2, r2, #3
 8002574:	0092      	lsls	r2, r2, #2
 8002576:	4093      	lsls	r3, r2
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	492f      	ldr	r1, [pc, #188]	; (800263c <HAL_GPIO_Init+0x2bc>)
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	089b      	lsrs	r3, r3, #2
 8002584:	3302      	adds	r3, #2
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d006      	beq.n	80025a6 <HAL_GPIO_Init+0x226>
 8002598:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <HAL_GPIO_Init+0x2d0>)
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	492c      	ldr	r1, [pc, #176]	; (8002650 <HAL_GPIO_Init+0x2d0>)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	608b      	str	r3, [r1, #8]
 80025a4:	e006      	b.n	80025b4 <HAL_GPIO_Init+0x234>
 80025a6:	4b2a      	ldr	r3, [pc, #168]	; (8002650 <HAL_GPIO_Init+0x2d0>)
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	4928      	ldr	r1, [pc, #160]	; (8002650 <HAL_GPIO_Init+0x2d0>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <HAL_GPIO_Init+0x24e>
 80025c0:	4b23      	ldr	r3, [pc, #140]	; (8002650 <HAL_GPIO_Init+0x2d0>)
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	4922      	ldr	r1, [pc, #136]	; (8002650 <HAL_GPIO_Init+0x2d0>)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60cb      	str	r3, [r1, #12]
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x25c>
 80025ce:	4b20      	ldr	r3, [pc, #128]	; (8002650 <HAL_GPIO_Init+0x2d0>)
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	491e      	ldr	r1, [pc, #120]	; (8002650 <HAL_GPIO_Init+0x2d0>)
 80025d8:	4013      	ands	r3, r2
 80025da:	60cb      	str	r3, [r1, #12]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d006      	beq.n	80025f6 <HAL_GPIO_Init+0x276>
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <HAL_GPIO_Init+0x2d0>)
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4918      	ldr	r1, [pc, #96]	; (8002650 <HAL_GPIO_Init+0x2d0>)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
 80025f4:	e006      	b.n	8002604 <HAL_GPIO_Init+0x284>
 80025f6:	4b16      	ldr	r3, [pc, #88]	; (8002650 <HAL_GPIO_Init+0x2d0>)
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	4914      	ldr	r1, [pc, #80]	; (8002650 <HAL_GPIO_Init+0x2d0>)
 8002600:	4013      	ands	r3, r2
 8002602:	604b      	str	r3, [r1, #4]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d021      	beq.n	8002654 <HAL_GPIO_Init+0x2d4>
 8002610:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <HAL_GPIO_Init+0x2d0>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	490e      	ldr	r1, [pc, #56]	; (8002650 <HAL_GPIO_Init+0x2d0>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	600b      	str	r3, [r1, #0]
 800261c:	e021      	b.n	8002662 <HAL_GPIO_Init+0x2e2>
 800261e:	bf00      	nop
 8002620:	10320000 	.word	0x10320000
 8002624:	10310000 	.word	0x10310000
 8002628:	10220000 	.word	0x10220000
 800262c:	10210000 	.word	0x10210000
 8002630:	10120000 	.word	0x10120000
 8002634:	10110000 	.word	0x10110000
 8002638:	40021000 	.word	0x40021000
 800263c:	40010000 	.word	0x40010000
 8002640:	40010800 	.word	0x40010800
 8002644:	40010c00 	.word	0x40010c00
 8002648:	40011000 	.word	0x40011000
 800264c:	40011400 	.word	0x40011400
 8002650:	40010400 	.word	0x40010400
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_GPIO_Init+0x304>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	43db      	mvns	r3, r3
 800265c:	4909      	ldr	r1, [pc, #36]	; (8002684 <HAL_GPIO_Init+0x304>)
 800265e:	4013      	ands	r3, r2
 8002660:	600b      	str	r3, [r1, #0]
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	3301      	adds	r3, #1
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	fa22 f303 	lsr.w	r3, r2, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	f47f ae8e 	bne.w	8002394 <HAL_GPIO_Init+0x14>
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	372c      	adds	r7, #44	; 0x2c
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	40010400 	.word	0x40010400

08002688 <HAL_GPIO_WritePin>:
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]
 8002694:	4613      	mov	r3, r2
 8002696:	707b      	strb	r3, [r7, #1]
 8002698:	787b      	ldrb	r3, [r7, #1]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_WritePin+0x1e>
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	611a      	str	r2, [r3, #16]
 80026a4:	e003      	b.n	80026ae <HAL_GPIO_WritePin+0x26>
 80026a6:	887b      	ldrh	r3, [r7, #2]
 80026a8:	041a      	lsls	r2, r3, #16
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	611a      	str	r2, [r3, #16]
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <HAL_GPIO_TogglePin>:
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	887a      	ldrh	r2, [r7, #2]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4013      	ands	r3, r2
 80026d0:	041a      	lsls	r2, r3, #16
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	43d9      	mvns	r1, r3
 80026d6:	887b      	ldrh	r3, [r7, #2]
 80026d8:	400b      	ands	r3, r1
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	611a      	str	r2, [r3, #16]
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
	...

080026ec <HAL_RCC_OscConfig>:
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_RCC_OscConfig+0x12>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e272      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 8087 	beq.w	800281a <HAL_RCC_OscConfig+0x12e>
 800270c:	4b92      	ldr	r3, [pc, #584]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b04      	cmp	r3, #4
 8002716:	d00c      	beq.n	8002732 <HAL_RCC_OscConfig+0x46>
 8002718:	4b8f      	ldr	r3, [pc, #572]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	2b08      	cmp	r3, #8
 8002722:	d112      	bne.n	800274a <HAL_RCC_OscConfig+0x5e>
 8002724:	4b8c      	ldr	r3, [pc, #560]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800272c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002730:	d10b      	bne.n	800274a <HAL_RCC_OscConfig+0x5e>
 8002732:	4b89      	ldr	r3, [pc, #548]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d06c      	beq.n	8002818 <HAL_RCC_OscConfig+0x12c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d168      	bne.n	8002818 <HAL_RCC_OscConfig+0x12c>
 8002746:	2301      	movs	r3, #1
 8002748:	e24c      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002752:	d106      	bne.n	8002762 <HAL_RCC_OscConfig+0x76>
 8002754:	4b80      	ldr	r3, [pc, #512]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a7f      	ldr	r2, [pc, #508]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 800275a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	e02e      	b.n	80027c0 <HAL_RCC_OscConfig+0xd4>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10c      	bne.n	8002784 <HAL_RCC_OscConfig+0x98>
 800276a:	4b7b      	ldr	r3, [pc, #492]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a7a      	ldr	r2, [pc, #488]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	4b78      	ldr	r3, [pc, #480]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a77      	ldr	r2, [pc, #476]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 800277c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	e01d      	b.n	80027c0 <HAL_RCC_OscConfig+0xd4>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800278c:	d10c      	bne.n	80027a8 <HAL_RCC_OscConfig+0xbc>
 800278e:	4b72      	ldr	r3, [pc, #456]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a71      	ldr	r2, [pc, #452]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	4b6f      	ldr	r3, [pc, #444]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a6e      	ldr	r2, [pc, #440]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	e00b      	b.n	80027c0 <HAL_RCC_OscConfig+0xd4>
 80027a8:	4b6b      	ldr	r3, [pc, #428]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a6a      	ldr	r2, [pc, #424]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80027ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	4b68      	ldr	r3, [pc, #416]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a67      	ldr	r2, [pc, #412]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80027ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d013      	beq.n	80027f0 <HAL_RCC_OscConfig+0x104>
 80027c8:	f7ff fcc8 	bl	800215c <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0xf6>
 80027d0:	f7ff fcc4 	bl	800215c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	; 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0xf6>
 80027de:	2303      	movs	r3, #3
 80027e0:	e200      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
 80027e2:	4b5d      	ldr	r3, [pc, #372]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCC_OscConfig+0xe4>
 80027ee:	e014      	b.n	800281a <HAL_RCC_OscConfig+0x12e>
 80027f0:	f7ff fcb4 	bl	800215c <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x11e>
 80027f8:	f7ff fcb0 	bl	800215c <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	; 0x64
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x11e>
 8002806:	2303      	movs	r3, #3
 8002808:	e1ec      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
 800280a:	4b53      	ldr	r3, [pc, #332]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0x10c>
 8002816:	e000      	b.n	800281a <HAL_RCC_OscConfig+0x12e>
 8002818:	bf00      	nop
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d063      	beq.n	80028ee <HAL_RCC_OscConfig+0x202>
 8002826:	4b4c      	ldr	r3, [pc, #304]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00b      	beq.n	800284a <HAL_RCC_OscConfig+0x15e>
 8002832:	4b49      	ldr	r3, [pc, #292]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b08      	cmp	r3, #8
 800283c:	d11c      	bne.n	8002878 <HAL_RCC_OscConfig+0x18c>
 800283e:	4b46      	ldr	r3, [pc, #280]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d116      	bne.n	8002878 <HAL_RCC_OscConfig+0x18c>
 800284a:	4b43      	ldr	r3, [pc, #268]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <HAL_RCC_OscConfig+0x176>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d001      	beq.n	8002862 <HAL_RCC_OscConfig+0x176>
 800285e:	2301      	movs	r3, #1
 8002860:	e1c0      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
 8002862:	4b3d      	ldr	r3, [pc, #244]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4939      	ldr	r1, [pc, #228]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]
 8002876:	e03a      	b.n	80028ee <HAL_RCC_OscConfig+0x202>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d020      	beq.n	80028c2 <HAL_RCC_OscConfig+0x1d6>
 8002880:	4b36      	ldr	r3, [pc, #216]	; (800295c <HAL_RCC_OscConfig+0x270>)
 8002882:	2201      	movs	r2, #1
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	f7ff fc69 	bl	800215c <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x1b4>
 800288e:	f7ff fc65 	bl	800215c <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x1b4>
 800289c:	2303      	movs	r3, #3
 800289e:	e1a1      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
 80028a0:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x1a2>
 80028ac:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4927      	ldr	r1, [pc, #156]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	600b      	str	r3, [r1, #0]
 80028c0:	e015      	b.n	80028ee <HAL_RCC_OscConfig+0x202>
 80028c2:	4b26      	ldr	r3, [pc, #152]	; (800295c <HAL_RCC_OscConfig+0x270>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	f7ff fc48 	bl	800215c <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x1f6>
 80028d0:	f7ff fc44 	bl	800215c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x1f6>
 80028de:	2303      	movs	r3, #3
 80028e0:	e180      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
 80028e2:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x1e4>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d03a      	beq.n	8002970 <HAL_RCC_OscConfig+0x284>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d019      	beq.n	8002936 <HAL_RCC_OscConfig+0x24a>
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <HAL_RCC_OscConfig+0x274>)
 8002904:	2201      	movs	r2, #1
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	f7ff fc28 	bl	800215c <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x236>
 8002910:	f7ff fc24 	bl	800215c <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x236>
 800291e:	2303      	movs	r3, #3
 8002920:	e160      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x224>
 800292e:	2001      	movs	r0, #1
 8002930:	f000 fabc 	bl	8002eac <RCC_Delay>
 8002934:	e01c      	b.n	8002970 <HAL_RCC_OscConfig+0x284>
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <HAL_RCC_OscConfig+0x274>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	f7ff fc0e 	bl	800215c <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]
 8002942:	e00f      	b.n	8002964 <HAL_RCC_OscConfig+0x278>
 8002944:	f7ff fc0a 	bl	800215c <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d908      	bls.n	8002964 <HAL_RCC_OscConfig+0x278>
 8002952:	2303      	movs	r3, #3
 8002954:	e146      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	42420000 	.word	0x42420000
 8002960:	42420480 	.word	0x42420480
 8002964:	4b92      	ldr	r3, [pc, #584]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1e9      	bne.n	8002944 <HAL_RCC_OscConfig+0x258>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80a6 	beq.w	8002aca <HAL_RCC_OscConfig+0x3de>
 800297e:	2300      	movs	r3, #0
 8002980:	75fb      	strb	r3, [r7, #23]
 8002982:	4b8b      	ldr	r3, [pc, #556]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10d      	bne.n	80029aa <HAL_RCC_OscConfig+0x2be>
 800298e:	4b88      	ldr	r3, [pc, #544]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	4a87      	ldr	r2, [pc, #540]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002998:	61d3      	str	r3, [r2, #28]
 800299a:	4b85      	ldr	r3, [pc, #532]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2301      	movs	r3, #1
 80029a8:	75fb      	strb	r3, [r7, #23]
 80029aa:	4b82      	ldr	r3, [pc, #520]	; (8002bb4 <HAL_RCC_OscConfig+0x4c8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d118      	bne.n	80029e8 <HAL_RCC_OscConfig+0x2fc>
 80029b6:	4b7f      	ldr	r3, [pc, #508]	; (8002bb4 <HAL_RCC_OscConfig+0x4c8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a7e      	ldr	r2, [pc, #504]	; (8002bb4 <HAL_RCC_OscConfig+0x4c8>)
 80029bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	f7ff fbcb 	bl	800215c <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x2f0>
 80029ca:	f7ff fbc7 	bl	800215c <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b64      	cmp	r3, #100	; 0x64
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x2f0>
 80029d8:	2303      	movs	r3, #3
 80029da:	e103      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
 80029dc:	4b75      	ldr	r3, [pc, #468]	; (8002bb4 <HAL_RCC_OscConfig+0x4c8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x2de>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d106      	bne.n	80029fe <HAL_RCC_OscConfig+0x312>
 80029f0:	4b6f      	ldr	r3, [pc, #444]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	4a6e      	ldr	r2, [pc, #440]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6213      	str	r3, [r2, #32]
 80029fc:	e02d      	b.n	8002a5a <HAL_RCC_OscConfig+0x36e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x334>
 8002a06:	4b6a      	ldr	r3, [pc, #424]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	4a69      	ldr	r2, [pc, #420]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	f023 0301 	bic.w	r3, r3, #1
 8002a10:	6213      	str	r3, [r2, #32]
 8002a12:	4b67      	ldr	r3, [pc, #412]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4a66      	ldr	r2, [pc, #408]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	f023 0304 	bic.w	r3, r3, #4
 8002a1c:	6213      	str	r3, [r2, #32]
 8002a1e:	e01c      	b.n	8002a5a <HAL_RCC_OscConfig+0x36e>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	2b05      	cmp	r3, #5
 8002a26:	d10c      	bne.n	8002a42 <HAL_RCC_OscConfig+0x356>
 8002a28:	4b61      	ldr	r3, [pc, #388]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4a60      	ldr	r2, [pc, #384]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a2e:	f043 0304 	orr.w	r3, r3, #4
 8002a32:	6213      	str	r3, [r2, #32]
 8002a34:	4b5e      	ldr	r3, [pc, #376]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	4a5d      	ldr	r2, [pc, #372]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6213      	str	r3, [r2, #32]
 8002a40:	e00b      	b.n	8002a5a <HAL_RCC_OscConfig+0x36e>
 8002a42:	4b5b      	ldr	r3, [pc, #364]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4a5a      	ldr	r2, [pc, #360]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	6213      	str	r3, [r2, #32]
 8002a4e:	4b58      	ldr	r3, [pc, #352]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	4a57      	ldr	r2, [pc, #348]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	f023 0304 	bic.w	r3, r3, #4
 8002a58:	6213      	str	r3, [r2, #32]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d015      	beq.n	8002a8e <HAL_RCC_OscConfig+0x3a2>
 8002a62:	f7ff fb7b 	bl	800215c <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_OscConfig+0x394>
 8002a6a:	f7ff fb77 	bl	800215c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x394>
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e0b1      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
 8002a80:	4b4b      	ldr	r3, [pc, #300]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0ee      	beq.n	8002a6a <HAL_RCC_OscConfig+0x37e>
 8002a8c:	e014      	b.n	8002ab8 <HAL_RCC_OscConfig+0x3cc>
 8002a8e:	f7ff fb65 	bl	800215c <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]
 8002a94:	e00a      	b.n	8002aac <HAL_RCC_OscConfig+0x3c0>
 8002a96:	f7ff fb61 	bl	800215c <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x3c0>
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e09b      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
 8002aac:	4b40      	ldr	r3, [pc, #256]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1ee      	bne.n	8002a96 <HAL_RCC_OscConfig+0x3aa>
 8002ab8:	7dfb      	ldrb	r3, [r7, #23]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d105      	bne.n	8002aca <HAL_RCC_OscConfig+0x3de>
 8002abe:	4b3c      	ldr	r3, [pc, #240]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	4a3b      	ldr	r2, [pc, #236]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	61d3      	str	r3, [r2, #28]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 8087 	beq.w	8002be2 <HAL_RCC_OscConfig+0x4f6>
 8002ad4:	4b36      	ldr	r3, [pc, #216]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 030c 	and.w	r3, r3, #12
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d061      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x4b8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d146      	bne.n	8002b76 <HAL_RCC_OscConfig+0x48a>
 8002ae8:	4b33      	ldr	r3, [pc, #204]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	f7ff fb35 	bl	800215c <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x41c>
 8002af6:	f7ff fb31 	bl	800215c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x41c>
 8002b04:	2303      	movs	r3, #3
 8002b06:	e06d      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
 8002b08:	4b29      	ldr	r3, [pc, #164]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f0      	bne.n	8002af6 <HAL_RCC_OscConfig+0x40a>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1c:	d108      	bne.n	8002b30 <HAL_RCC_OscConfig+0x444>
 8002b1e:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	4921      	ldr	r1, [pc, #132]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
 8002b30:	4b1f      	ldr	r3, [pc, #124]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a19      	ldr	r1, [r3, #32]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	430b      	orrs	r3, r1
 8002b42:	491b      	ldr	r1, [pc, #108]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
 8002b48:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	f7ff fb05 	bl	800215c <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x47c>
 8002b56:	f7ff fb01 	bl	800215c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x47c>
 8002b64:	2303      	movs	r3, #3
 8002b66:	e03d      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
 8002b68:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x46a>
 8002b74:	e035      	b.n	8002be2 <HAL_RCC_OscConfig+0x4f6>
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	f7ff faee 	bl	800215c <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x4aa>
 8002b84:	f7ff faea 	bl	800215c <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x4aa>
 8002b92:	2303      	movs	r3, #3
 8002b94:	e026      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x498>
 8002ba2:	e01e      	b.n	8002be2 <HAL_RCC_OscConfig+0x4f6>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d107      	bne.n	8002bbc <HAL_RCC_OscConfig+0x4d0>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e019      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	42420060 	.word	0x42420060
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCC_OscConfig+0x500>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d106      	bne.n	8002bde <HAL_RCC_OscConfig+0x4f2>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d001      	beq.n	8002be2 <HAL_RCC_OscConfig+0x4f6>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
 8002be2:	2300      	movs	r3, #0
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000

08002bf0 <HAL_RCC_ClockConfig>:
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x14>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0d0      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1b6>
 8002c04:	4b6a      	ldr	r3, [pc, #424]	; (8002db0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d910      	bls.n	8002c34 <HAL_RCC_ClockConfig+0x44>
 8002c12:	4b67      	ldr	r3, [pc, #412]	; (8002db0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 0207 	bic.w	r2, r3, #7
 8002c1a:	4965      	ldr	r1, [pc, #404]	; (8002db0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]
 8002c22:	4b63      	ldr	r3, [pc, #396]	; (8002db0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x44>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0b8      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1b6>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d020      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x92>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x68>
 8002c4c:	4b59      	ldr	r3, [pc, #356]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4a58      	ldr	r2, [pc, #352]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c56:	6053      	str	r3, [r2, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x80>
 8002c64:	4b53      	ldr	r3, [pc, #332]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4a52      	ldr	r2, [pc, #328]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c6e:	6053      	str	r3, [r2, #4]
 8002c70:	4b50      	ldr	r3, [pc, #320]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	494d      	ldr	r1, [pc, #308]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d040      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x120>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d107      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xb6>
 8002c96:	4b47      	ldr	r3, [pc, #284]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d115      	bne.n	8002cce <HAL_RCC_ClockConfig+0xde>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e07f      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1b6>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xce>
 8002cae:	4b41      	ldr	r3, [pc, #260]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d109      	bne.n	8002cce <HAL_RCC_ClockConfig+0xde>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e073      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1b6>
 8002cbe:	4b3d      	ldr	r3, [pc, #244]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_ClockConfig+0xde>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e06b      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1b6>
 8002cce:	4b39      	ldr	r3, [pc, #228]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f023 0203 	bic.w	r2, r3, #3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4936      	ldr	r1, [pc, #216]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
 8002ce0:	f7ff fa3c 	bl	800215c <HAL_GetTick>
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	e00a      	b.n	8002cfe <HAL_RCC_ClockConfig+0x10e>
 8002ce8:	f7ff fa38 	bl	800215c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x10e>
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e053      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1b6>
 8002cfe:	4b2d      	ldr	r3, [pc, #180]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 020c 	and.w	r2, r3, #12
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d1eb      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0xf8>
 8002d10:	4b27      	ldr	r3, [pc, #156]	; (8002db0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d210      	bcs.n	8002d40 <HAL_RCC_ClockConfig+0x150>
 8002d1e:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 0207 	bic.w	r2, r3, #7
 8002d26:	4922      	ldr	r1, [pc, #136]	; (8002db0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
 8002d2e:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x150>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e032      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1b6>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x16e>
 8002d4c:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4916      	ldr	r1, [pc, #88]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	604b      	str	r3, [r1, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x18e>
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	490e      	ldr	r1, [pc, #56]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
 8002d7e:	f000 f82d 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8002d82:	4602      	mov	r2, r0
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	490a      	ldr	r1, [pc, #40]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d90:	5ccb      	ldrb	r3, [r1, r3]
 8002d92:	fa22 f303 	lsr.w	r3, r2, r3
 8002d96:	4a09      	ldr	r2, [pc, #36]	; (8002dbc <HAL_RCC_ClockConfig+0x1cc>)
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_RCC_ClockConfig+0x1d0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff f99a 	bl	80020d8 <HAL_InitTick>
 8002da4:	2300      	movs	r3, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40022000 	.word	0x40022000
 8002db4:	40021000 	.word	0x40021000
 8002db8:	08004f84 	.word	0x08004f84
 8002dbc:	20000018 	.word	0x20000018
 8002dc0:	2000004c 	.word	0x2000004c

08002dc4 <HAL_RCC_EnableCSS>:
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <HAL_RCC_EnableCSS+0x14>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	4242004c 	.word	0x4242004c

08002ddc <HAL_RCC_GetSysClockFreq>:
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	2300      	movs	r3, #0
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	2300      	movs	r3, #0
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	4b1e      	ldr	r3, [pc, #120]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d002      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0x30>
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d003      	beq.n	8002e12 <HAL_RCC_GetSysClockFreq+0x36>
 8002e0a:	e027      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0x80>
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	e027      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x86>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	0c9b      	lsrs	r3, r3, #18
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	4a17      	ldr	r2, [pc, #92]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e1c:	5cd3      	ldrb	r3, [r2, r3]
 8002e1e:	607b      	str	r3, [r7, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d010      	beq.n	8002e4c <HAL_RCC_GetSysClockFreq+0x70>
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	0c5b      	lsrs	r3, r3, #17
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	4a11      	ldr	r2, [pc, #68]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e36:	5cd3      	ldrb	r3, [r2, r3]
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a0d      	ldr	r2, [pc, #52]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e3e:	fb03 f202 	mul.w	r2, r3, r2
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	e004      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0x7a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e50:	fb02 f303 	mul.w	r3, r2, r3
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	e002      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x86>
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	bf00      	nop
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4618      	mov	r0, r3
 8002e66:	371c      	adds	r7, #28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000
 8002e74:	007a1200 	.word	0x007a1200
 8002e78:	08004f94 	.word	0x08004f94
 8002e7c:	08004fa4 	.word	0x08004fa4
 8002e80:	003d0900 	.word	0x003d0900

08002e84 <HAL_RCC_NMI_IRQHandler>:
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e90:	2b80      	cmp	r3, #128	; 0x80
 8002e92:	d104      	bne.n	8002e9e <HAL_RCC_NMI_IRQHandler+0x1a>
 8002e94:	f000 f828 	bl	8002ee8 <HAL_RCC_CSSCallback>
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	4002100a 	.word	0x4002100a

08002eac <RCC_Delay>:
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <RCC_Delay+0x34>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <RCC_Delay+0x38>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	0a5b      	lsrs	r3, r3, #9
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	fb02 f303 	mul.w	r3, r2, r3
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	bf00      	nop
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1e5a      	subs	r2, r3, #1
 8002ece:	60fa      	str	r2, [r7, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f9      	bne.n	8002ec8 <RCC_Delay+0x1c>
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	20000018 	.word	0x20000018
 8002ee4:	10624dd3 	.word	0x10624dd3

08002ee8 <HAL_RCC_CSSCallback>:
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_SPI_Init>:
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_SPI_Init+0x12>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e076      	b.n	8002ff4 <HAL_SPI_Init+0x100>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d108      	bne.n	8002f20 <HAL_SPI_Init+0x2c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f16:	d009      	beq.n	8002f2c <HAL_SPI_Init+0x38>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	61da      	str	r2, [r3, #28]
 8002f1e:	e005      	b.n	8002f2c <HAL_SPI_Init+0x38>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	611a      	str	r2, [r3, #16]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	615a      	str	r2, [r3, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	629a      	str	r2, [r3, #40]	; 0x28
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_SPI_Init+0x58>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fd fab8 	bl	80004bc <HAL_SPI_MspInit>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb0:	ea42 0103 	orr.w	r1, r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	0c1a      	lsrs	r2, r3, #16
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f002 0204 	and.w	r2, r2, #4
 8002fd2:	605a      	str	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	69da      	ldr	r2, [r3, #28]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fe2:	61da      	str	r2, [r3, #28]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	655a      	str	r2, [r3, #84]	; 0x54
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_SPI_Transmit>:
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	4613      	mov	r3, r2
 800300a:	80fb      	strh	r3, [r7, #6]
 800300c:	2300      	movs	r3, #0
 800300e:	77fb      	strb	r3, [r7, #31]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_SPI_Transmit+0x22>
 800301a:	2302      	movs	r3, #2
 800301c:	e12d      	b.n	800327a <HAL_SPI_Transmit+0x27e>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003026:	f7ff f899 	bl	800215c <HAL_GetTick>
 800302a:	61b8      	str	r0, [r7, #24]
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	82fb      	strh	r3, [r7, #22]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b01      	cmp	r3, #1
 800303a:	d002      	beq.n	8003042 <HAL_SPI_Transmit+0x46>
 800303c:	2302      	movs	r3, #2
 800303e:	77fb      	strb	r3, [r7, #31]
 8003040:	e116      	b.n	8003270 <HAL_SPI_Transmit+0x274>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <HAL_SPI_Transmit+0x52>
 8003048:	88fb      	ldrh	r3, [r7, #6]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d102      	bne.n	8003054 <HAL_SPI_Transmit+0x58>
 800304e:	2301      	movs	r3, #1
 8003050:	77fb      	strb	r3, [r7, #31]
 8003052:	e10d      	b.n	8003270 <HAL_SPI_Transmit+0x274>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2203      	movs	r2, #3
 8003058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	655a      	str	r2, [r3, #84]	; 0x54
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	631a      	str	r2, [r3, #48]	; 0x30
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	88fa      	ldrh	r2, [r7, #6]
 800306c:	869a      	strh	r2, [r3, #52]	; 0x34
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	88fa      	ldrh	r2, [r7, #6]
 8003072:	86da      	strh	r2, [r3, #54]	; 0x36
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	639a      	str	r2, [r3, #56]	; 0x38
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	645a      	str	r2, [r3, #68]	; 0x44
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800309a:	d10f      	bne.n	80030bc <HAL_SPI_Transmit+0xc0>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c6:	2b40      	cmp	r3, #64	; 0x40
 80030c8:	d007      	beq.n	80030da <HAL_SPI_Transmit+0xde>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030e2:	d14f      	bne.n	8003184 <HAL_SPI_Transmit+0x188>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <HAL_SPI_Transmit+0xf6>
 80030ec:	8afb      	ldrh	r3, [r7, #22]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d142      	bne.n	8003178 <HAL_SPI_Transmit+0x17c>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	881a      	ldrh	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60da      	str	r2, [r3, #12]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	1c9a      	adds	r2, r3, #2
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800310c:	b29b      	uxth	r3, r3
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	86da      	strh	r2, [r3, #54]	; 0x36
 8003116:	e02f      	b.n	8003178 <HAL_SPI_Transmit+0x17c>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b02      	cmp	r3, #2
 8003124:	d112      	bne.n	800314c <HAL_SPI_Transmit+0x150>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	881a      	ldrh	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	1c9a      	adds	r2, r3, #2
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	631a      	str	r2, [r3, #48]	; 0x30
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	86da      	strh	r2, [r3, #54]	; 0x36
 800314a:	e015      	b.n	8003178 <HAL_SPI_Transmit+0x17c>
 800314c:	f7ff f806 	bl	800215c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d803      	bhi.n	8003164 <HAL_SPI_Transmit+0x168>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003162:	d102      	bne.n	800316a <HAL_SPI_Transmit+0x16e>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <HAL_SPI_Transmit+0x17c>
 800316a:	2303      	movs	r3, #3
 800316c:	77fb      	strb	r3, [r7, #31]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003176:	e07b      	b.n	8003270 <HAL_SPI_Transmit+0x274>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1ca      	bne.n	8003118 <HAL_SPI_Transmit+0x11c>
 8003182:	e050      	b.n	8003226 <HAL_SPI_Transmit+0x22a>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <HAL_SPI_Transmit+0x196>
 800318c:	8afb      	ldrh	r3, [r7, #22]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d144      	bne.n	800321c <HAL_SPI_Transmit+0x220>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	330c      	adds	r3, #12
 800319c:	7812      	ldrb	r2, [r2, #0]
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80031b8:	e030      	b.n	800321c <HAL_SPI_Transmit+0x220>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d113      	bne.n	80031f0 <HAL_SPI_Transmit+0x1f4>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	330c      	adds	r3, #12
 80031d2:	7812      	ldrb	r2, [r2, #0]
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80031ee:	e015      	b.n	800321c <HAL_SPI_Transmit+0x220>
 80031f0:	f7fe ffb4 	bl	800215c <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d803      	bhi.n	8003208 <HAL_SPI_Transmit+0x20c>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003206:	d102      	bne.n	800320e <HAL_SPI_Transmit+0x212>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <HAL_SPI_Transmit+0x220>
 800320e:	2303      	movs	r3, #3
 8003210:	77fb      	strb	r3, [r7, #31]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800321a:	e029      	b.n	8003270 <HAL_SPI_Transmit+0x274>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1c9      	bne.n	80031ba <HAL_SPI_Transmit+0x1be>
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	6839      	ldr	r1, [r7, #0]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 fbcc 	bl	80039c8 <SPI_EndRxTxTransaction>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <HAL_SPI_Transmit+0x240>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	655a      	str	r2, [r3, #84]	; 0x54
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10a      	bne.n	800325a <HAL_SPI_Transmit+0x25e>
 8003244:	2300      	movs	r3, #0
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <HAL_SPI_Transmit+0x26c>
 8003262:	2301      	movs	r3, #1
 8003264:	77fb      	strb	r3, [r7, #31]
 8003266:	e003      	b.n	8003270 <HAL_SPI_Transmit+0x274>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003278:	7ffb      	ldrb	r3, [r7, #31]
 800327a:	4618      	mov	r0, r3
 800327c:	3720      	adds	r7, #32
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_SPI_Receive>:
 8003282:	b580      	push	{r7, lr}
 8003284:	b088      	sub	sp, #32
 8003286:	af02      	add	r7, sp, #8
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	4613      	mov	r3, r2
 8003290:	80fb      	strh	r3, [r7, #6]
 8003292:	2300      	movs	r3, #0
 8003294:	75fb      	strb	r3, [r7, #23]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d002      	beq.n	80032a8 <HAL_SPI_Receive+0x26>
 80032a2:	2302      	movs	r3, #2
 80032a4:	75fb      	strb	r3, [r7, #23]
 80032a6:	e0fb      	b.n	80034a0 <HAL_SPI_Receive+0x21e>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032b0:	d112      	bne.n	80032d8 <HAL_SPI_Receive+0x56>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10e      	bne.n	80032d8 <HAL_SPI_Receive+0x56>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2204      	movs	r2, #4
 80032be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80032c2:	88fa      	ldrh	r2, [r7, #6]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	4613      	mov	r3, r2
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f8ef 	bl	80034b2 <HAL_SPI_TransmitReceive>
 80032d4:	4603      	mov	r3, r0
 80032d6:	e0e8      	b.n	80034aa <HAL_SPI_Receive+0x228>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_SPI_Receive+0x64>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e0e1      	b.n	80034aa <HAL_SPI_Receive+0x228>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80032ee:	f7fe ff35 	bl	800215c <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_SPI_Receive+0x7e>
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d102      	bne.n	8003306 <HAL_SPI_Receive+0x84>
 8003300:	2301      	movs	r3, #1
 8003302:	75fb      	strb	r3, [r7, #23]
 8003304:	e0cc      	b.n	80034a0 <HAL_SPI_Receive+0x21e>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2204      	movs	r2, #4
 800330a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	655a      	str	r2, [r3, #84]	; 0x54
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	639a      	str	r2, [r3, #56]	; 0x38
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	88fa      	ldrh	r2, [r7, #6]
 800331e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	88fa      	ldrh	r2, [r7, #6]
 8003324:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	869a      	strh	r2, [r3, #52]	; 0x34
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	86da      	strh	r2, [r3, #54]	; 0x36
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	641a      	str	r2, [r3, #64]	; 0x40
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	645a      	str	r2, [r3, #68]	; 0x44
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800334c:	d10f      	bne.n	800336e <HAL_SPI_Receive+0xec>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003378:	2b40      	cmp	r3, #64	; 0x40
 800337a:	d007      	beq.n	800338c <HAL_SPI_Receive+0x10a>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d16a      	bne.n	800346a <HAL_SPI_Receive+0x1e8>
 8003394:	e032      	b.n	80033fc <HAL_SPI_Receive+0x17a>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d115      	bne.n	80033d0 <HAL_SPI_Receive+0x14e>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f103 020c 	add.w	r2, r3, #12
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	7812      	ldrb	r2, [r2, #0]
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	639a      	str	r2, [r3, #56]	; 0x38
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033ce:	e015      	b.n	80033fc <HAL_SPI_Receive+0x17a>
 80033d0:	f7fe fec4 	bl	800215c <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d803      	bhi.n	80033e8 <HAL_SPI_Receive+0x166>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e6:	d102      	bne.n	80033ee <HAL_SPI_Receive+0x16c>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_SPI_Receive+0x17a>
 80033ee:	2303      	movs	r3, #3
 80033f0:	75fb      	strb	r3, [r7, #23]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80033fa:	e051      	b.n	80034a0 <HAL_SPI_Receive+0x21e>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1c7      	bne.n	8003396 <HAL_SPI_Receive+0x114>
 8003406:	e035      	b.n	8003474 <HAL_SPI_Receive+0x1f2>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b01      	cmp	r3, #1
 8003414:	d113      	bne.n	800343e <HAL_SPI_Receive+0x1bc>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	b292      	uxth	r2, r2
 8003422:	801a      	strh	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	1c9a      	adds	r2, r3, #2
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	639a      	str	r2, [r3, #56]	; 0x38
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800343c:	e015      	b.n	800346a <HAL_SPI_Receive+0x1e8>
 800343e:	f7fe fe8d 	bl	800215c <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d803      	bhi.n	8003456 <HAL_SPI_Receive+0x1d4>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d102      	bne.n	800345c <HAL_SPI_Receive+0x1da>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <HAL_SPI_Receive+0x1e8>
 800345c:	2303      	movs	r3, #3
 800345e:	75fb      	strb	r3, [r7, #23]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003468:	e01a      	b.n	80034a0 <HAL_SPI_Receive+0x21e>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1c9      	bne.n	8003408 <HAL_SPI_Receive+0x186>
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	6839      	ldr	r1, [r7, #0]
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fa53 	bl	8003924 <SPI_EndRxTransaction>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_SPI_Receive+0x208>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	655a      	str	r2, [r3, #84]	; 0x54
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_SPI_Receive+0x216>
 8003492:	2301      	movs	r3, #1
 8003494:	75fb      	strb	r3, [r7, #23]
 8003496:	e003      	b.n	80034a0 <HAL_SPI_Receive+0x21e>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_SPI_TransmitReceive>:
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b08c      	sub	sp, #48	; 0x30
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	807b      	strh	r3, [r7, #2]
 80034c0:	2301      	movs	r3, #1
 80034c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034c4:	2300      	movs	r3, #0
 80034c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_SPI_TransmitReceive+0x26>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e198      	b.n	800380a <HAL_SPI_TransmitReceive+0x358>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80034e0:	f7fe fe3c 	bl	800215c <HAL_GetTick>
 80034e4:	6278      	str	r0, [r7, #36]	; 0x24
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	61fb      	str	r3, [r7, #28]
 80034f6:	887b      	ldrh	r3, [r7, #2]
 80034f8:	837b      	strh	r3, [r7, #26]
 80034fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d00f      	beq.n	8003522 <HAL_SPI_TransmitReceive+0x70>
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003508:	d107      	bne.n	800351a <HAL_SPI_TransmitReceive+0x68>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d103      	bne.n	800351a <HAL_SPI_TransmitReceive+0x68>
 8003512:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003516:	2b04      	cmp	r3, #4
 8003518:	d003      	beq.n	8003522 <HAL_SPI_TransmitReceive+0x70>
 800351a:	2302      	movs	r3, #2
 800351c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003520:	e16d      	b.n	80037fe <HAL_SPI_TransmitReceive+0x34c>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_SPI_TransmitReceive+0x82>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_SPI_TransmitReceive+0x82>
 800352e:	887b      	ldrh	r3, [r7, #2]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d103      	bne.n	800353c <HAL_SPI_TransmitReceive+0x8a>
 8003534:	2301      	movs	r3, #1
 8003536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800353a:	e160      	b.n	80037fe <HAL_SPI_TransmitReceive+0x34c>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b04      	cmp	r3, #4
 8003546:	d003      	beq.n	8003550 <HAL_SPI_TransmitReceive+0x9e>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2205      	movs	r2, #5
 800354c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	655a      	str	r2, [r3, #84]	; 0x54
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	639a      	str	r2, [r3, #56]	; 0x38
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	887a      	ldrh	r2, [r7, #2]
 8003560:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	887a      	ldrh	r2, [r7, #2]
 8003566:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	887a      	ldrh	r2, [r7, #2]
 8003572:	86da      	strh	r2, [r3, #54]	; 0x36
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	887a      	ldrh	r2, [r7, #2]
 8003578:	869a      	strh	r2, [r3, #52]	; 0x34
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	641a      	str	r2, [r3, #64]	; 0x40
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d007      	beq.n	80035a4 <HAL_SPI_TransmitReceive+0xf2>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ac:	d17c      	bne.n	80036a8 <HAL_SPI_TransmitReceive+0x1f6>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <HAL_SPI_TransmitReceive+0x10a>
 80035b6:	8b7b      	ldrh	r3, [r7, #26]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d16a      	bne.n	8003692 <HAL_SPI_TransmitReceive+0x1e0>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	881a      	ldrh	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60da      	str	r2, [r3, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	1c9a      	adds	r2, r3, #2
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	86da      	strh	r2, [r3, #54]	; 0x36
 80035e0:	e057      	b.n	8003692 <HAL_SPI_TransmitReceive+0x1e0>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d11b      	bne.n	8003628 <HAL_SPI_TransmitReceive+0x176>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d016      	beq.n	8003628 <HAL_SPI_TransmitReceive+0x176>
 80035fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d113      	bne.n	8003628 <HAL_SPI_TransmitReceive+0x176>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	881a      	ldrh	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60da      	str	r2, [r3, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	1c9a      	adds	r2, r3, #2
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	631a      	str	r2, [r3, #48]	; 0x30
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	86da      	strh	r2, [r3, #54]	; 0x36
 8003624:	2300      	movs	r3, #0
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b01      	cmp	r3, #1
 8003634:	d119      	bne.n	800366a <HAL_SPI_TransmitReceive+0x1b8>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d014      	beq.n	800366a <HAL_SPI_TransmitReceive+0x1b8>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	b292      	uxth	r2, r2
 800364c:	801a      	strh	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	1c9a      	adds	r2, r3, #2
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	639a      	str	r2, [r3, #56]	; 0x38
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800365c:	b29b      	uxth	r3, r3
 800365e:	3b01      	subs	r3, #1
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003666:	2301      	movs	r3, #1
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800366a:	f7fe fd77 	bl	800215c <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003676:	429a      	cmp	r2, r3
 8003678:	d80b      	bhi.n	8003692 <HAL_SPI_TransmitReceive+0x1e0>
 800367a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003680:	d007      	beq.n	8003692 <HAL_SPI_TransmitReceive+0x1e0>
 8003682:	2303      	movs	r3, #3
 8003684:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003690:	e0b5      	b.n	80037fe <HAL_SPI_TransmitReceive+0x34c>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1a2      	bne.n	80035e2 <HAL_SPI_TransmitReceive+0x130>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d19d      	bne.n	80035e2 <HAL_SPI_TransmitReceive+0x130>
 80036a6:	e080      	b.n	80037aa <HAL_SPI_TransmitReceive+0x2f8>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <HAL_SPI_TransmitReceive+0x204>
 80036b0:	8b7b      	ldrh	r3, [r7, #26]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d16f      	bne.n	8003796 <HAL_SPI_TransmitReceive+0x2e4>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	330c      	adds	r3, #12
 80036c0:	7812      	ldrb	r2, [r2, #0]
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	631a      	str	r2, [r3, #48]	; 0x30
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	86da      	strh	r2, [r3, #54]	; 0x36
 80036dc:	e05b      	b.n	8003796 <HAL_SPI_TransmitReceive+0x2e4>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d11c      	bne.n	8003726 <HAL_SPI_TransmitReceive+0x274>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d017      	beq.n	8003726 <HAL_SPI_TransmitReceive+0x274>
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d114      	bne.n	8003726 <HAL_SPI_TransmitReceive+0x274>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	330c      	adds	r3, #12
 8003706:	7812      	ldrb	r2, [r2, #0]
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	86da      	strh	r2, [r3, #54]	; 0x36
 8003722:	2300      	movs	r3, #0
 8003724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b01      	cmp	r3, #1
 8003732:	d119      	bne.n	8003768 <HAL_SPI_TransmitReceive+0x2b6>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d014      	beq.n	8003768 <HAL_SPI_TransmitReceive+0x2b6>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	701a      	strb	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	639a      	str	r2, [r3, #56]	; 0x38
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800375a:	b29b      	uxth	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003764:	2301      	movs	r3, #1
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003768:	f7fe fcf8 	bl	800215c <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003774:	429a      	cmp	r2, r3
 8003776:	d803      	bhi.n	8003780 <HAL_SPI_TransmitReceive+0x2ce>
 8003778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377e:	d102      	bne.n	8003786 <HAL_SPI_TransmitReceive+0x2d4>
 8003780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003782:	2b00      	cmp	r3, #0
 8003784:	d107      	bne.n	8003796 <HAL_SPI_TransmitReceive+0x2e4>
 8003786:	2303      	movs	r3, #3
 8003788:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003794:	e033      	b.n	80037fe <HAL_SPI_TransmitReceive+0x34c>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d19e      	bne.n	80036de <HAL_SPI_TransmitReceive+0x22c>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d199      	bne.n	80036de <HAL_SPI_TransmitReceive+0x22c>
 80037aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f90a 	bl	80039c8 <SPI_EndRxTxTransaction>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d006      	beq.n	80037c8 <HAL_SPI_TransmitReceive+0x316>
 80037ba:	2301      	movs	r3, #1
 80037bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54
 80037c6:	e01a      	b.n	80037fe <HAL_SPI_TransmitReceive+0x34c>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <HAL_SPI_TransmitReceive+0x334>
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_SPI_TransmitReceive+0x344>
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037f4:	e003      	b.n	80037fe <HAL_SPI_TransmitReceive+0x34c>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003806:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800380a:	4618      	mov	r0, r3
 800380c:	3730      	adds	r7, #48	; 0x30
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <SPI_WaitFlagStateUntilTimeout>:
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	71fb      	strb	r3, [r7, #7]
 8003824:	f7fe fc9a 	bl	800215c <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	4413      	add	r3, r2
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	f7fe fc92 	bl	800215c <HAL_GetTick>
 8003838:	61b8      	str	r0, [r7, #24]
 800383a:	4b39      	ldr	r3, [pc, #228]	; (8003920 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	015b      	lsls	r3, r3, #5
 8003840:	0d1b      	lsrs	r3, r3, #20
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	fb02 f303 	mul.w	r3, r2, r3
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	e054      	b.n	80038f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003852:	d050      	beq.n	80038f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8003854:	f7fe fc82 	bl	800215c <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	429a      	cmp	r2, r3
 8003862:	d902      	bls.n	800386a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d13d      	bne.n	80038e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003882:	d111      	bne.n	80038a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800388c:	d004      	beq.n	8003898 <SPI_WaitFlagStateUntilTimeout+0x84>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003896:	d107      	bne.n	80038a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b0:	d10f      	bne.n	80038d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80038e2:	2303      	movs	r3, #3
 80038e4:	e017      	b.n	8003916 <SPI_WaitFlagStateUntilTimeout+0x102>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
 80038ec:	2300      	movs	r3, #0
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4013      	ands	r3, r2
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	429a      	cmp	r2, r3
 8003904:	bf0c      	ite	eq
 8003906:	2301      	moveq	r3, #1
 8003908:	2300      	movne	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	429a      	cmp	r2, r3
 8003912:	d19b      	bne.n	800384c <SPI_WaitFlagStateUntilTimeout+0x38>
 8003914:	2300      	movs	r3, #0
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000018 	.word	0x20000018

08003924 <SPI_EndRxTransaction>:
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af02      	add	r7, sp, #8
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003938:	d111      	bne.n	800395e <SPI_EndRxTransaction+0x3a>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003942:	d004      	beq.n	800394e <SPI_EndRxTransaction+0x2a>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394c:	d107      	bne.n	800395e <SPI_EndRxTransaction+0x3a>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003966:	d117      	bne.n	8003998 <SPI_EndRxTransaction+0x74>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003970:	d112      	bne.n	8003998 <SPI_EndRxTransaction+0x74>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2200      	movs	r2, #0
 800397a:	2101      	movs	r1, #1
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f7ff ff49 	bl	8003814 <SPI_WaitFlagStateUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01a      	beq.n	80039be <SPI_EndRxTransaction+0x9a>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398c:	f043 0220 	orr.w	r2, r3, #32
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	655a      	str	r2, [r3, #84]	; 0x54
 8003994:	2303      	movs	r3, #3
 8003996:	e013      	b.n	80039c0 <SPI_EndRxTransaction+0x9c>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2200      	movs	r2, #0
 80039a0:	2180      	movs	r1, #128	; 0x80
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f7ff ff36 	bl	8003814 <SPI_WaitFlagStateUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d007      	beq.n	80039be <SPI_EndRxTransaction+0x9a>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b2:	f043 0220 	orr.w	r2, r3, #32
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54
 80039ba:	2303      	movs	r3, #3
 80039bc:	e000      	b.n	80039c0 <SPI_EndRxTransaction+0x9c>
 80039be:	2300      	movs	r3, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <SPI_EndRxTxTransaction>:
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2200      	movs	r2, #0
 80039dc:	2180      	movs	r1, #128	; 0x80
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f7ff ff18 	bl	8003814 <SPI_WaitFlagStateUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d007      	beq.n	80039fa <SPI_EndRxTxTransaction+0x32>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ee:	f043 0220 	orr.w	r2, r3, #32
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54
 80039f6:	2303      	movs	r3, #3
 80039f8:	e000      	b.n	80039fc <SPI_EndRxTxTransaction+0x34>
 80039fa:	2300      	movs	r3, #0
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f103 0208 	add.w	r2, r3, #8
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f04f 32ff 	mov.w	r2, #4294967295
 8003a1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f103 0208 	add.w	r2, r3, #8
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f103 0208 	add.w	r2, r3, #8
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr

08003a42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b085      	sub	sp, #20
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	601a      	str	r2, [r3, #0]
}
 8003a96:	bf00      	nop
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr

08003aa0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab6:	d103      	bne.n	8003ac0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	e00c      	b.n	8003ada <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3308      	adds	r3, #8
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	e002      	b.n	8003ace <vListInsert+0x2e>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d2f6      	bcs.n	8003ac8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	601a      	str	r2, [r3, #0]
}
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6892      	ldr	r2, [r2, #8]
 8003b26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6852      	ldr	r2, [r2, #4]
 8003b30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d103      	bne.n	8003b44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	1e5a      	subs	r2, r3, #1
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr

08003b62 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b08e      	sub	sp, #56	; 0x38
 8003b66:	af04      	add	r7, sp, #16
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
 8003b6e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10a      	bne.n	8003b8c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b88:	bf00      	nop
 8003b8a:	e7fe      	b.n	8003b8a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <xTaskCreateStatic+0x46>
	__asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	61fb      	str	r3, [r7, #28]
}
 8003ba4:	bf00      	nop
 8003ba6:	e7fe      	b.n	8003ba6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ba8:	23a0      	movs	r3, #160	; 0xa0
 8003baa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	2ba0      	cmp	r3, #160	; 0xa0
 8003bb0:	d00a      	beq.n	8003bc8 <xTaskCreateStatic+0x66>
	__asm volatile
 8003bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	61bb      	str	r3, [r7, #24]
}
 8003bc4:	bf00      	nop
 8003bc6:	e7fe      	b.n	8003bc6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d01e      	beq.n	8003c0c <xTaskCreateStatic+0xaa>
 8003bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01b      	beq.n	8003c0c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bdc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	2202      	movs	r2, #2
 8003be2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003be6:	2300      	movs	r3, #0
 8003be8:	9303      	str	r3, [sp, #12]
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	9302      	str	r3, [sp, #8]
 8003bee:	f107 0314 	add.w	r3, r7, #20
 8003bf2:	9301      	str	r3, [sp, #4]
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 f850 	bl	8003ca4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c06:	f000 f8e3 	bl	8003dd0 <prvAddNewTaskToReadyList>
 8003c0a:	e001      	b.n	8003c10 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c10:	697b      	ldr	r3, [r7, #20]
	}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3728      	adds	r7, #40	; 0x28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b08c      	sub	sp, #48	; 0x30
 8003c1e:	af04      	add	r7, sp, #16
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	4613      	mov	r3, r2
 8003c28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 feb6 	bl	80049a0 <pvPortMalloc>
 8003c34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00e      	beq.n	8003c5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003c3c:	20a0      	movs	r0, #160	; 0xa0
 8003c3e:	f000 feaf 	bl	80049a0 <pvPortMalloc>
 8003c42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30
 8003c50:	e005      	b.n	8003c5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c52:	6978      	ldr	r0, [r7, #20]
 8003c54:	f000 ff68 	bl	8004b28 <vPortFree>
 8003c58:	e001      	b.n	8003c5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d017      	beq.n	8003c94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c6c:	88fa      	ldrh	r2, [r7, #6]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	9303      	str	r3, [sp, #12]
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	9302      	str	r3, [sp, #8]
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	9301      	str	r3, [sp, #4]
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68b9      	ldr	r1, [r7, #8]
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 f80e 	bl	8003ca4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c88:	69f8      	ldr	r0, [r7, #28]
 8003c8a:	f000 f8a1 	bl	8003dd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	61bb      	str	r3, [r7, #24]
 8003c92:	e002      	b.n	8003c9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c94:	f04f 33ff 	mov.w	r3, #4294967295
 8003c98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c9a:	69bb      	ldr	r3, [r7, #24]
	}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3720      	adds	r7, #32
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f023 0307 	bic.w	r3, r3, #7
 8003cca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <prvInitialiseNewTask+0x48>
	__asm volatile
 8003cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	617b      	str	r3, [r7, #20]
}
 8003ce8:	bf00      	nop
 8003cea:	e7fe      	b.n	8003cea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cec:	2300      	movs	r3, #0
 8003cee:	61fb      	str	r3, [r7, #28]
 8003cf0:	e012      	b.n	8003d18 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	7819      	ldrb	r1, [r3, #0]
 8003cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	4413      	add	r3, r2
 8003d00:	3334      	adds	r3, #52	; 0x34
 8003d02:	460a      	mov	r2, r1
 8003d04:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d006      	beq.n	8003d20 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	3301      	adds	r3, #1
 8003d16:	61fb      	str	r3, [r7, #28]
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	2b0f      	cmp	r3, #15
 8003d1c:	d9e9      	bls.n	8003cf2 <prvInitialiseNewTask+0x4e>
 8003d1e:	e000      	b.n	8003d22 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003d20:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	2b06      	cmp	r3, #6
 8003d2e:	d901      	bls.n	8003d34 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d30:	2306      	movs	r3, #6
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d3e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	2200      	movs	r2, #0
 8003d44:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	3304      	adds	r3, #4
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff fe79 	bl	8003a42 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	3318      	adds	r3, #24
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff fe74 	bl	8003a42 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	f1c3 0207 	rsb	r2, r3, #7
 8003d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	2200      	movs	r2, #0
 8003d74:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	334c      	adds	r3, #76	; 0x4c
 8003d84:	224c      	movs	r2, #76	; 0x4c
 8003d86:	2100      	movs	r1, #0
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 ffe1 	bl	8004d50 <memset>
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d90:	4a0c      	ldr	r2, [pc, #48]	; (8003dc4 <prvInitialiseNewTask+0x120>)
 8003d92:	651a      	str	r2, [r3, #80]	; 0x50
 8003d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d96:	4a0c      	ldr	r2, [pc, #48]	; (8003dc8 <prvInitialiseNewTask+0x124>)
 8003d98:	655a      	str	r2, [r3, #84]	; 0x54
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9c:	4a0b      	ldr	r2, [pc, #44]	; (8003dcc <prvInitialiseNewTask+0x128>)
 8003d9e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	68f9      	ldr	r1, [r7, #12]
 8003da4:	69b8      	ldr	r0, [r7, #24]
 8003da6:	f000 fc47 	bl	8004638 <pxPortInitialiseStack>
 8003daa:	4602      	mov	r2, r0
 8003dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dbc:	bf00      	nop
 8003dbe:	3720      	adds	r7, #32
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	20001534 	.word	0x20001534
 8003dc8:	2000159c 	.word	0x2000159c
 8003dcc:	20001604 	.word	0x20001604

08003dd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003dd8:	f000 fd20 	bl	800481c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ddc:	4b2a      	ldr	r3, [pc, #168]	; (8003e88 <prvAddNewTaskToReadyList+0xb8>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3301      	adds	r3, #1
 8003de2:	4a29      	ldr	r2, [pc, #164]	; (8003e88 <prvAddNewTaskToReadyList+0xb8>)
 8003de4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003de6:	4b29      	ldr	r3, [pc, #164]	; (8003e8c <prvAddNewTaskToReadyList+0xbc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003dee:	4a27      	ldr	r2, [pc, #156]	; (8003e8c <prvAddNewTaskToReadyList+0xbc>)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003df4:	4b24      	ldr	r3, [pc, #144]	; (8003e88 <prvAddNewTaskToReadyList+0xb8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d110      	bne.n	8003e1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003dfc:	f000 fad2 	bl	80043a4 <prvInitialiseTaskLists>
 8003e00:	e00d      	b.n	8003e1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e02:	4b23      	ldr	r3, [pc, #140]	; (8003e90 <prvAddNewTaskToReadyList+0xc0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e0a:	4b20      	ldr	r3, [pc, #128]	; (8003e8c <prvAddNewTaskToReadyList+0xbc>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d802      	bhi.n	8003e1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e18:	4a1c      	ldr	r2, [pc, #112]	; (8003e8c <prvAddNewTaskToReadyList+0xbc>)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e1e:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <prvAddNewTaskToReadyList+0xc4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3301      	adds	r3, #1
 8003e24:	4a1b      	ldr	r2, [pc, #108]	; (8003e94 <prvAddNewTaskToReadyList+0xc4>)
 8003e26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <prvAddNewTaskToReadyList+0xc8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	4a18      	ldr	r2, [pc, #96]	; (8003e98 <prvAddNewTaskToReadyList+0xc8>)
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4a15      	ldr	r2, [pc, #84]	; (8003e9c <prvAddNewTaskToReadyList+0xcc>)
 8003e48:	441a      	add	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4610      	mov	r0, r2
 8003e52:	f7ff fe02 	bl	8003a5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e56:	f000 fd11 	bl	800487c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <prvAddNewTaskToReadyList+0xc0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00e      	beq.n	8003e80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e62:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <prvAddNewTaskToReadyList+0xbc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d207      	bcs.n	8003e80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e70:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <prvAddNewTaskToReadyList+0xd0>)
 8003e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	200008e8 	.word	0x200008e8
 8003e8c:	200007e8 	.word	0x200007e8
 8003e90:	200008f4 	.word	0x200008f4
 8003e94:	20000904 	.word	0x20000904
 8003e98:	200008f0 	.word	0x200008f0
 8003e9c:	200007ec 	.word	0x200007ec
 8003ea0:	e000ed04 	.word	0xe000ed04

08003ea4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d017      	beq.n	8003ee6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003eb6:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <vTaskDelay+0x60>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <vTaskDelay+0x30>
	__asm volatile
 8003ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	60bb      	str	r3, [r7, #8]
}
 8003ed0:	bf00      	nop
 8003ed2:	e7fe      	b.n	8003ed2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ed4:	f000 f884 	bl	8003fe0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ed8:	2100      	movs	r1, #0
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fb46 	bl	800456c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ee0:	f000 f88c 	bl	8003ffc <xTaskResumeAll>
 8003ee4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d107      	bne.n	8003efc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003eec:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <vTaskDelay+0x64>)
 8003eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20000910 	.word	0x20000910
 8003f08:	e000ed04 	.word	0xe000ed04

08003f0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	; 0x28
 8003f10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f1a:	463a      	mov	r2, r7
 8003f1c:	1d39      	adds	r1, r7, #4
 8003f1e:	f107 0308 	add.w	r3, r7, #8
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fc f91c 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f28:	6839      	ldr	r1, [r7, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	9202      	str	r2, [sp, #8]
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	2300      	movs	r3, #0
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	2300      	movs	r3, #0
 8003f38:	460a      	mov	r2, r1
 8003f3a:	4921      	ldr	r1, [pc, #132]	; (8003fc0 <vTaskStartScheduler+0xb4>)
 8003f3c:	4821      	ldr	r0, [pc, #132]	; (8003fc4 <vTaskStartScheduler+0xb8>)
 8003f3e:	f7ff fe10 	bl	8003b62 <xTaskCreateStatic>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4a20      	ldr	r2, [pc, #128]	; (8003fc8 <vTaskStartScheduler+0xbc>)
 8003f46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f48:	4b1f      	ldr	r3, [pc, #124]	; (8003fc8 <vTaskStartScheduler+0xbc>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f50:	2301      	movs	r3, #1
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	e001      	b.n	8003f5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d11b      	bne.n	8003f98 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	613b      	str	r3, [r7, #16]
}
 8003f72:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f74:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <vTaskStartScheduler+0xc0>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	334c      	adds	r3, #76	; 0x4c
 8003f7a:	4a15      	ldr	r2, [pc, #84]	; (8003fd0 <vTaskStartScheduler+0xc4>)
 8003f7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f7e:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <vTaskStartScheduler+0xc8>)
 8003f80:	f04f 32ff 	mov.w	r2, #4294967295
 8003f84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f86:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <vTaskStartScheduler+0xcc>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003f8c:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <vTaskStartScheduler+0xd0>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f92:	f000 fbd1 	bl	8004738 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f96:	e00e      	b.n	8003fb6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9e:	d10a      	bne.n	8003fb6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	60fb      	str	r3, [r7, #12]
}
 8003fb2:	bf00      	nop
 8003fb4:	e7fe      	b.n	8003fb4 <vTaskStartScheduler+0xa8>
}
 8003fb6:	bf00      	nop
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	08004f7c 	.word	0x08004f7c
 8003fc4:	08004375 	.word	0x08004375
 8003fc8:	2000090c 	.word	0x2000090c
 8003fcc:	200007e8 	.word	0x200007e8
 8003fd0:	200000a4 	.word	0x200000a4
 8003fd4:	20000908 	.word	0x20000908
 8003fd8:	200008f4 	.word	0x200008f4
 8003fdc:	200008ec 	.word	0x200008ec

08003fe0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <vTaskSuspendAll+0x18>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	4a03      	ldr	r2, [pc, #12]	; (8003ff8 <vTaskSuspendAll+0x18>)
 8003fec:	6013      	str	r3, [r2, #0]
}
 8003fee:	bf00      	nop
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20000910 	.word	0x20000910

08003ffc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800400a:	4b41      	ldr	r3, [pc, #260]	; (8004110 <xTaskResumeAll+0x114>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <xTaskResumeAll+0x2c>
	__asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	603b      	str	r3, [r7, #0]
}
 8004024:	bf00      	nop
 8004026:	e7fe      	b.n	8004026 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004028:	f000 fbf8 	bl	800481c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800402c:	4b38      	ldr	r3, [pc, #224]	; (8004110 <xTaskResumeAll+0x114>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3b01      	subs	r3, #1
 8004032:	4a37      	ldr	r2, [pc, #220]	; (8004110 <xTaskResumeAll+0x114>)
 8004034:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004036:	4b36      	ldr	r3, [pc, #216]	; (8004110 <xTaskResumeAll+0x114>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d161      	bne.n	8004102 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800403e:	4b35      	ldr	r3, [pc, #212]	; (8004114 <xTaskResumeAll+0x118>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d05d      	beq.n	8004102 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004046:	e02e      	b.n	80040a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004048:	4b33      	ldr	r3, [pc, #204]	; (8004118 <xTaskResumeAll+0x11c>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3318      	adds	r3, #24
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fd5b 	bl	8003b10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3304      	adds	r3, #4
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff fd56 	bl	8003b10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	2201      	movs	r2, #1
 800406a:	409a      	lsls	r2, r3
 800406c:	4b2b      	ldr	r3, [pc, #172]	; (800411c <xTaskResumeAll+0x120>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4313      	orrs	r3, r2
 8004072:	4a2a      	ldr	r2, [pc, #168]	; (800411c <xTaskResumeAll+0x120>)
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4a27      	ldr	r2, [pc, #156]	; (8004120 <xTaskResumeAll+0x124>)
 8004084:	441a      	add	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3304      	adds	r3, #4
 800408a:	4619      	mov	r1, r3
 800408c:	4610      	mov	r0, r2
 800408e:	f7ff fce4 	bl	8003a5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004096:	4b23      	ldr	r3, [pc, #140]	; (8004124 <xTaskResumeAll+0x128>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	429a      	cmp	r2, r3
 800409e:	d302      	bcc.n	80040a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80040a0:	4b21      	ldr	r3, [pc, #132]	; (8004128 <xTaskResumeAll+0x12c>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040a6:	4b1c      	ldr	r3, [pc, #112]	; (8004118 <xTaskResumeAll+0x11c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1cc      	bne.n	8004048 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040b4:	f000 fa18 	bl	80044e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80040b8:	4b1c      	ldr	r3, [pc, #112]	; (800412c <xTaskResumeAll+0x130>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d010      	beq.n	80040e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040c4:	f000 f836 	bl	8004134 <xTaskIncrementTick>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80040ce:	4b16      	ldr	r3, [pc, #88]	; (8004128 <xTaskResumeAll+0x12c>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f1      	bne.n	80040c4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80040e0:	4b12      	ldr	r3, [pc, #72]	; (800412c <xTaskResumeAll+0x130>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040e6:	4b10      	ldr	r3, [pc, #64]	; (8004128 <xTaskResumeAll+0x12c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040ee:	2301      	movs	r3, #1
 80040f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040f2:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <xTaskResumeAll+0x134>)
 80040f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004102:	f000 fbbb 	bl	800487c <vPortExitCritical>

	return xAlreadyYielded;
 8004106:	68bb      	ldr	r3, [r7, #8]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20000910 	.word	0x20000910
 8004114:	200008e8 	.word	0x200008e8
 8004118:	200008a8 	.word	0x200008a8
 800411c:	200008f0 	.word	0x200008f0
 8004120:	200007ec 	.word	0x200007ec
 8004124:	200007e8 	.word	0x200007e8
 8004128:	200008fc 	.word	0x200008fc
 800412c:	200008f8 	.word	0x200008f8
 8004130:	e000ed04 	.word	0xe000ed04

08004134 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800413e:	4b51      	ldr	r3, [pc, #324]	; (8004284 <xTaskIncrementTick+0x150>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	f040 808d 	bne.w	8004262 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004148:	4b4f      	ldr	r3, [pc, #316]	; (8004288 <xTaskIncrementTick+0x154>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3301      	adds	r3, #1
 800414e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004150:	4a4d      	ldr	r2, [pc, #308]	; (8004288 <xTaskIncrementTick+0x154>)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d120      	bne.n	800419e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800415c:	4b4b      	ldr	r3, [pc, #300]	; (800428c <xTaskIncrementTick+0x158>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <xTaskIncrementTick+0x48>
	__asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	603b      	str	r3, [r7, #0]
}
 8004178:	bf00      	nop
 800417a:	e7fe      	b.n	800417a <xTaskIncrementTick+0x46>
 800417c:	4b43      	ldr	r3, [pc, #268]	; (800428c <xTaskIncrementTick+0x158>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	4b43      	ldr	r3, [pc, #268]	; (8004290 <xTaskIncrementTick+0x15c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a41      	ldr	r2, [pc, #260]	; (800428c <xTaskIncrementTick+0x158>)
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	4a41      	ldr	r2, [pc, #260]	; (8004290 <xTaskIncrementTick+0x15c>)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	4b40      	ldr	r3, [pc, #256]	; (8004294 <xTaskIncrementTick+0x160>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3301      	adds	r3, #1
 8004196:	4a3f      	ldr	r2, [pc, #252]	; (8004294 <xTaskIncrementTick+0x160>)
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	f000 f9a5 	bl	80044e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800419e:	4b3e      	ldr	r3, [pc, #248]	; (8004298 <xTaskIncrementTick+0x164>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d34d      	bcc.n	8004244 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041a8:	4b38      	ldr	r3, [pc, #224]	; (800428c <xTaskIncrementTick+0x158>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <xTaskIncrementTick+0x82>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <xTaskIncrementTick+0x84>
 80041b6:	2300      	movs	r3, #0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d004      	beq.n	80041c6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041bc:	4b36      	ldr	r3, [pc, #216]	; (8004298 <xTaskIncrementTick+0x164>)
 80041be:	f04f 32ff 	mov.w	r2, #4294967295
 80041c2:	601a      	str	r2, [r3, #0]
					break;
 80041c4:	e03e      	b.n	8004244 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80041c6:	4b31      	ldr	r3, [pc, #196]	; (800428c <xTaskIncrementTick+0x158>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d203      	bcs.n	80041e6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041de:	4a2e      	ldr	r2, [pc, #184]	; (8004298 <xTaskIncrementTick+0x164>)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6013      	str	r3, [r2, #0]
						break;
 80041e4:	e02e      	b.n	8004244 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	3304      	adds	r3, #4
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fc90 	bl	8003b10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d004      	beq.n	8004202 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	3318      	adds	r3, #24
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff fc87 	bl	8003b10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	2201      	movs	r2, #1
 8004208:	409a      	lsls	r2, r3
 800420a:	4b24      	ldr	r3, [pc, #144]	; (800429c <xTaskIncrementTick+0x168>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4313      	orrs	r3, r2
 8004210:	4a22      	ldr	r2, [pc, #136]	; (800429c <xTaskIncrementTick+0x168>)
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4a1f      	ldr	r2, [pc, #124]	; (80042a0 <xTaskIncrementTick+0x16c>)
 8004222:	441a      	add	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	3304      	adds	r3, #4
 8004228:	4619      	mov	r1, r3
 800422a:	4610      	mov	r0, r2
 800422c:	f7ff fc15 	bl	8003a5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004234:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <xTaskIncrementTick+0x170>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423a:	429a      	cmp	r2, r3
 800423c:	d3b4      	bcc.n	80041a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800423e:	2301      	movs	r3, #1
 8004240:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004242:	e7b1      	b.n	80041a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004244:	4b17      	ldr	r3, [pc, #92]	; (80042a4 <xTaskIncrementTick+0x170>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424a:	4915      	ldr	r1, [pc, #84]	; (80042a0 <xTaskIncrementTick+0x16c>)
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d907      	bls.n	800426c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800425c:	2301      	movs	r3, #1
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	e004      	b.n	800426c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004262:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <xTaskIncrementTick+0x174>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3301      	adds	r3, #1
 8004268:	4a0f      	ldr	r2, [pc, #60]	; (80042a8 <xTaskIncrementTick+0x174>)
 800426a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <xTaskIncrementTick+0x178>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004274:	2301      	movs	r3, #1
 8004276:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004278:	697b      	ldr	r3, [r7, #20]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20000910 	.word	0x20000910
 8004288:	200008ec 	.word	0x200008ec
 800428c:	200008a0 	.word	0x200008a0
 8004290:	200008a4 	.word	0x200008a4
 8004294:	20000900 	.word	0x20000900
 8004298:	20000908 	.word	0x20000908
 800429c:	200008f0 	.word	0x200008f0
 80042a0:	200007ec 	.word	0x200007ec
 80042a4:	200007e8 	.word	0x200007e8
 80042a8:	200008f8 	.word	0x200008f8
 80042ac:	200008fc 	.word	0x200008fc

080042b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042b6:	4b29      	ldr	r3, [pc, #164]	; (800435c <vTaskSwitchContext+0xac>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042be:	4b28      	ldr	r3, [pc, #160]	; (8004360 <vTaskSwitchContext+0xb0>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042c4:	e044      	b.n	8004350 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80042c6:	4b26      	ldr	r3, [pc, #152]	; (8004360 <vTaskSwitchContext+0xb0>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80042cc:	4b25      	ldr	r3, [pc, #148]	; (8004364 <vTaskSwitchContext+0xb4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	fab3 f383 	clz	r3, r3
 80042d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80042da:	7afb      	ldrb	r3, [r7, #11]
 80042dc:	f1c3 031f 	rsb	r3, r3, #31
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	4921      	ldr	r1, [pc, #132]	; (8004368 <vTaskSwitchContext+0xb8>)
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	4613      	mov	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10a      	bne.n	800430c <vTaskSwitchContext+0x5c>
	__asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	607b      	str	r3, [r7, #4]
}
 8004308:	bf00      	nop
 800430a:	e7fe      	b.n	800430a <vTaskSwitchContext+0x5a>
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4a14      	ldr	r2, [pc, #80]	; (8004368 <vTaskSwitchContext+0xb8>)
 8004318:	4413      	add	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	605a      	str	r2, [r3, #4]
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	3308      	adds	r3, #8
 800432e:	429a      	cmp	r2, r3
 8004330:	d104      	bne.n	800433c <vTaskSwitchContext+0x8c>
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	605a      	str	r2, [r3, #4]
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	4a0a      	ldr	r2, [pc, #40]	; (800436c <vTaskSwitchContext+0xbc>)
 8004344:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <vTaskSwitchContext+0xbc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	334c      	adds	r3, #76	; 0x4c
 800434c:	4a08      	ldr	r2, [pc, #32]	; (8004370 <vTaskSwitchContext+0xc0>)
 800434e:	6013      	str	r3, [r2, #0]
}
 8004350:	bf00      	nop
 8004352:	371c      	adds	r7, #28
 8004354:	46bd      	mov	sp, r7
 8004356:	bc80      	pop	{r7}
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	20000910 	.word	0x20000910
 8004360:	200008fc 	.word	0x200008fc
 8004364:	200008f0 	.word	0x200008f0
 8004368:	200007ec 	.word	0x200007ec
 800436c:	200007e8 	.word	0x200007e8
 8004370:	200000a4 	.word	0x200000a4

08004374 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800437c:	f000 f852 	bl	8004424 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004380:	4b06      	ldr	r3, [pc, #24]	; (800439c <prvIdleTask+0x28>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d9f9      	bls.n	800437c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004388:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <prvIdleTask+0x2c>)
 800438a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004398:	e7f0      	b.n	800437c <prvIdleTask+0x8>
 800439a:	bf00      	nop
 800439c:	200007ec 	.word	0x200007ec
 80043a0:	e000ed04 	.word	0xe000ed04

080043a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043aa:	2300      	movs	r3, #0
 80043ac:	607b      	str	r3, [r7, #4]
 80043ae:	e00c      	b.n	80043ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4a12      	ldr	r2, [pc, #72]	; (8004404 <prvInitialiseTaskLists+0x60>)
 80043bc:	4413      	add	r3, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fb20 	bl	8003a04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3301      	adds	r3, #1
 80043c8:	607b      	str	r3, [r7, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b06      	cmp	r3, #6
 80043ce:	d9ef      	bls.n	80043b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043d0:	480d      	ldr	r0, [pc, #52]	; (8004408 <prvInitialiseTaskLists+0x64>)
 80043d2:	f7ff fb17 	bl	8003a04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043d6:	480d      	ldr	r0, [pc, #52]	; (800440c <prvInitialiseTaskLists+0x68>)
 80043d8:	f7ff fb14 	bl	8003a04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043dc:	480c      	ldr	r0, [pc, #48]	; (8004410 <prvInitialiseTaskLists+0x6c>)
 80043de:	f7ff fb11 	bl	8003a04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043e2:	480c      	ldr	r0, [pc, #48]	; (8004414 <prvInitialiseTaskLists+0x70>)
 80043e4:	f7ff fb0e 	bl	8003a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043e8:	480b      	ldr	r0, [pc, #44]	; (8004418 <prvInitialiseTaskLists+0x74>)
 80043ea:	f7ff fb0b 	bl	8003a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043ee:	4b0b      	ldr	r3, [pc, #44]	; (800441c <prvInitialiseTaskLists+0x78>)
 80043f0:	4a05      	ldr	r2, [pc, #20]	; (8004408 <prvInitialiseTaskLists+0x64>)
 80043f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043f4:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <prvInitialiseTaskLists+0x7c>)
 80043f6:	4a05      	ldr	r2, [pc, #20]	; (800440c <prvInitialiseTaskLists+0x68>)
 80043f8:	601a      	str	r2, [r3, #0]
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	200007ec 	.word	0x200007ec
 8004408:	20000878 	.word	0x20000878
 800440c:	2000088c 	.word	0x2000088c
 8004410:	200008a8 	.word	0x200008a8
 8004414:	200008bc 	.word	0x200008bc
 8004418:	200008d4 	.word	0x200008d4
 800441c:	200008a0 	.word	0x200008a0
 8004420:	200008a4 	.word	0x200008a4

08004424 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800442a:	e019      	b.n	8004460 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800442c:	f000 f9f6 	bl	800481c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004430:	4b10      	ldr	r3, [pc, #64]	; (8004474 <prvCheckTasksWaitingTermination+0x50>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3304      	adds	r3, #4
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fb67 	bl	8003b10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004442:	4b0d      	ldr	r3, [pc, #52]	; (8004478 <prvCheckTasksWaitingTermination+0x54>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3b01      	subs	r3, #1
 8004448:	4a0b      	ldr	r2, [pc, #44]	; (8004478 <prvCheckTasksWaitingTermination+0x54>)
 800444a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <prvCheckTasksWaitingTermination+0x58>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3b01      	subs	r3, #1
 8004452:	4a0a      	ldr	r2, [pc, #40]	; (800447c <prvCheckTasksWaitingTermination+0x58>)
 8004454:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004456:	f000 fa11 	bl	800487c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f810 	bl	8004480 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004460:	4b06      	ldr	r3, [pc, #24]	; (800447c <prvCheckTasksWaitingTermination+0x58>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1e1      	bne.n	800442c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	200008bc 	.word	0x200008bc
 8004478:	200008e8 	.word	0x200008e8
 800447c:	200008d0 	.word	0x200008d0

08004480 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	334c      	adds	r3, #76	; 0x4c
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fc67 	bl	8004d60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004498:	2b00      	cmp	r3, #0
 800449a:	d108      	bne.n	80044ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fb41 	bl	8004b28 <vPortFree>
				vPortFree( pxTCB );
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fb3e 	bl	8004b28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044ac:	e018      	b.n	80044e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d103      	bne.n	80044c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fb35 	bl	8004b28 <vPortFree>
	}
 80044be:	e00f      	b.n	80044e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d00a      	beq.n	80044e0 <prvDeleteTCB+0x60>
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	60fb      	str	r3, [r7, #12]
}
 80044dc:	bf00      	nop
 80044de:	e7fe      	b.n	80044de <prvDeleteTCB+0x5e>
	}
 80044e0:	bf00      	nop
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044ee:	4b0e      	ldr	r3, [pc, #56]	; (8004528 <prvResetNextTaskUnblockTime+0x40>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <prvResetNextTaskUnblockTime+0x14>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <prvResetNextTaskUnblockTime+0x16>
 80044fc:	2300      	movs	r3, #0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d004      	beq.n	800450c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004502:	4b0a      	ldr	r3, [pc, #40]	; (800452c <prvResetNextTaskUnblockTime+0x44>)
 8004504:	f04f 32ff 	mov.w	r2, #4294967295
 8004508:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800450a:	e008      	b.n	800451e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <prvResetNextTaskUnblockTime+0x40>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	4a04      	ldr	r2, [pc, #16]	; (800452c <prvResetNextTaskUnblockTime+0x44>)
 800451c:	6013      	str	r3, [r2, #0]
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr
 8004528:	200008a0 	.word	0x200008a0
 800452c:	20000908 	.word	0x20000908

08004530 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <xTaskGetSchedulerState+0x34>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d102      	bne.n	8004544 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800453e:	2301      	movs	r3, #1
 8004540:	607b      	str	r3, [r7, #4]
 8004542:	e008      	b.n	8004556 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004544:	4b08      	ldr	r3, [pc, #32]	; (8004568 <xTaskGetSchedulerState+0x38>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d102      	bne.n	8004552 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800454c:	2302      	movs	r3, #2
 800454e:	607b      	str	r3, [r7, #4]
 8004550:	e001      	b.n	8004556 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004552:	2300      	movs	r3, #0
 8004554:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004556:	687b      	ldr	r3, [r7, #4]
	}
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	bc80      	pop	{r7}
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	200008f4 	.word	0x200008f4
 8004568:	20000910 	.word	0x20000910

0800456c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004576:	4b29      	ldr	r3, [pc, #164]	; (800461c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800457c:	4b28      	ldr	r3, [pc, #160]	; (8004620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3304      	adds	r3, #4
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fac4 	bl	8003b10 <uxListRemove>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10b      	bne.n	80045a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800458e:	4b24      	ldr	r3, [pc, #144]	; (8004620 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	2201      	movs	r2, #1
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	43da      	mvns	r2, r3
 800459c:	4b21      	ldr	r3, [pc, #132]	; (8004624 <prvAddCurrentTaskToDelayedList+0xb8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4013      	ands	r3, r2
 80045a2:	4a20      	ldr	r2, [pc, #128]	; (8004624 <prvAddCurrentTaskToDelayedList+0xb8>)
 80045a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d10a      	bne.n	80045c4 <prvAddCurrentTaskToDelayedList+0x58>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d007      	beq.n	80045c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045b4:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3304      	adds	r3, #4
 80045ba:	4619      	mov	r1, r3
 80045bc:	481a      	ldr	r0, [pc, #104]	; (8004628 <prvAddCurrentTaskToDelayedList+0xbc>)
 80045be:	f7ff fa4c 	bl	8003a5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045c2:	e026      	b.n	8004612 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4413      	add	r3, r2
 80045ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045cc:	4b14      	ldr	r3, [pc, #80]	; (8004620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d209      	bcs.n	80045f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045dc:	4b13      	ldr	r3, [pc, #76]	; (800462c <prvAddCurrentTaskToDelayedList+0xc0>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3304      	adds	r3, #4
 80045e6:	4619      	mov	r1, r3
 80045e8:	4610      	mov	r0, r2
 80045ea:	f7ff fa59 	bl	8003aa0 <vListInsert>
}
 80045ee:	e010      	b.n	8004612 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045f0:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <prvAddCurrentTaskToDelayedList+0xc4>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3304      	adds	r3, #4
 80045fa:	4619      	mov	r1, r3
 80045fc:	4610      	mov	r0, r2
 80045fe:	f7ff fa4f 	bl	8003aa0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004602:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	429a      	cmp	r2, r3
 800460a:	d202      	bcs.n	8004612 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800460c:	4a09      	ldr	r2, [pc, #36]	; (8004634 <prvAddCurrentTaskToDelayedList+0xc8>)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	6013      	str	r3, [r2, #0]
}
 8004612:	bf00      	nop
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	200008ec 	.word	0x200008ec
 8004620:	200007e8 	.word	0x200007e8
 8004624:	200008f0 	.word	0x200008f0
 8004628:	200008d4 	.word	0x200008d4
 800462c:	200008a4 	.word	0x200008a4
 8004630:	200008a0 	.word	0x200008a0
 8004634:	20000908 	.word	0x20000908

08004638 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3b04      	subs	r3, #4
 8004648:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3b04      	subs	r3, #4
 8004656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f023 0201 	bic.w	r2, r3, #1
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	3b04      	subs	r3, #4
 8004666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004668:	4a08      	ldr	r2, [pc, #32]	; (800468c <pxPortInitialiseStack+0x54>)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3b14      	subs	r3, #20
 8004672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3b20      	subs	r3, #32
 800467e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004680:	68fb      	ldr	r3, [r7, #12]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr
 800468c:	08004691 	.word	0x08004691

08004690 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004696:	2300      	movs	r3, #0
 8004698:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800469a:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <prvTaskExitError+0x54>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a2:	d00a      	beq.n	80046ba <prvTaskExitError+0x2a>
	__asm volatile
 80046a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	60fb      	str	r3, [r7, #12]
}
 80046b6:	bf00      	nop
 80046b8:	e7fe      	b.n	80046b8 <prvTaskExitError+0x28>
	__asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	60bb      	str	r3, [r7, #8]
}
 80046cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046ce:	bf00      	nop
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0fc      	beq.n	80046d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046d6:	bf00      	nop
 80046d8:	bf00      	nop
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000054 	.word	0x20000054
	...

080046f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046f0:	4b07      	ldr	r3, [pc, #28]	; (8004710 <pxCurrentTCBConst2>)
 80046f2:	6819      	ldr	r1, [r3, #0]
 80046f4:	6808      	ldr	r0, [r1, #0]
 80046f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80046fa:	f380 8809 	msr	PSP, r0
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f04f 0000 	mov.w	r0, #0
 8004706:	f380 8811 	msr	BASEPRI, r0
 800470a:	f04e 0e0d 	orr.w	lr, lr, #13
 800470e:	4770      	bx	lr

08004710 <pxCurrentTCBConst2>:
 8004710:	200007e8 	.word	0x200007e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop

08004718 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004718:	4806      	ldr	r0, [pc, #24]	; (8004734 <prvPortStartFirstTask+0x1c>)
 800471a:	6800      	ldr	r0, [r0, #0]
 800471c:	6800      	ldr	r0, [r0, #0]
 800471e:	f380 8808 	msr	MSP, r0
 8004722:	b662      	cpsie	i
 8004724:	b661      	cpsie	f
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	df00      	svc	0
 8004730:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004732:	bf00      	nop
 8004734:	e000ed08 	.word	0xe000ed08

08004738 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800473e:	4b32      	ldr	r3, [pc, #200]	; (8004808 <xPortStartScheduler+0xd0>)
 8004740:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	22ff      	movs	r2, #255	; 0xff
 800474e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004760:	b2da      	uxtb	r2, r3
 8004762:	4b2a      	ldr	r3, [pc, #168]	; (800480c <xPortStartScheduler+0xd4>)
 8004764:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004766:	4b2a      	ldr	r3, [pc, #168]	; (8004810 <xPortStartScheduler+0xd8>)
 8004768:	2207      	movs	r2, #7
 800476a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800476c:	e009      	b.n	8004782 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800476e:	4b28      	ldr	r3, [pc, #160]	; (8004810 <xPortStartScheduler+0xd8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3b01      	subs	r3, #1
 8004774:	4a26      	ldr	r2, [pc, #152]	; (8004810 <xPortStartScheduler+0xd8>)
 8004776:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	b2db      	uxtb	r3, r3
 8004780:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004782:	78fb      	ldrb	r3, [r7, #3]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478a:	2b80      	cmp	r3, #128	; 0x80
 800478c:	d0ef      	beq.n	800476e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800478e:	4b20      	ldr	r3, [pc, #128]	; (8004810 <xPortStartScheduler+0xd8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f1c3 0307 	rsb	r3, r3, #7
 8004796:	2b04      	cmp	r3, #4
 8004798:	d00a      	beq.n	80047b0 <xPortStartScheduler+0x78>
	__asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	60bb      	str	r3, [r7, #8]
}
 80047ac:	bf00      	nop
 80047ae:	e7fe      	b.n	80047ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047b0:	4b17      	ldr	r3, [pc, #92]	; (8004810 <xPortStartScheduler+0xd8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	4a16      	ldr	r2, [pc, #88]	; (8004810 <xPortStartScheduler+0xd8>)
 80047b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047ba:	4b15      	ldr	r3, [pc, #84]	; (8004810 <xPortStartScheduler+0xd8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047c2:	4a13      	ldr	r2, [pc, #76]	; (8004810 <xPortStartScheduler+0xd8>)
 80047c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047ce:	4b11      	ldr	r3, [pc, #68]	; (8004814 <xPortStartScheduler+0xdc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a10      	ldr	r2, [pc, #64]	; (8004814 <xPortStartScheduler+0xdc>)
 80047d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047da:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <xPortStartScheduler+0xdc>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a0d      	ldr	r2, [pc, #52]	; (8004814 <xPortStartScheduler+0xdc>)
 80047e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047e6:	f000 f8b9 	bl	800495c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047ea:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <xPortStartScheduler+0xe0>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047f0:	f7ff ff92 	bl	8004718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047f4:	f7ff fd5c 	bl	80042b0 <vTaskSwitchContext>
	prvTaskExitError();
 80047f8:	f7ff ff4a 	bl	8004690 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	e000e400 	.word	0xe000e400
 800480c:	20000914 	.word	0x20000914
 8004810:	20000918 	.word	0x20000918
 8004814:	e000ed20 	.word	0xe000ed20
 8004818:	20000054 	.word	0x20000054

0800481c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	607b      	str	r3, [r7, #4]
}
 8004834:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004836:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <vPortEnterCritical+0x58>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3301      	adds	r3, #1
 800483c:	4a0d      	ldr	r2, [pc, #52]	; (8004874 <vPortEnterCritical+0x58>)
 800483e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004840:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <vPortEnterCritical+0x58>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d10f      	bne.n	8004868 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <vPortEnterCritical+0x5c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <vPortEnterCritical+0x4c>
	__asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	603b      	str	r3, [r7, #0]
}
 8004864:	bf00      	nop
 8004866:	e7fe      	b.n	8004866 <vPortEnterCritical+0x4a>
	}
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	bc80      	pop	{r7}
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20000054 	.word	0x20000054
 8004878:	e000ed04 	.word	0xe000ed04

0800487c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004882:	4b11      	ldr	r3, [pc, #68]	; (80048c8 <vPortExitCritical+0x4c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10a      	bne.n	80048a0 <vPortExitCritical+0x24>
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	607b      	str	r3, [r7, #4]
}
 800489c:	bf00      	nop
 800489e:	e7fe      	b.n	800489e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80048a0:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <vPortExitCritical+0x4c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	4a08      	ldr	r2, [pc, #32]	; (80048c8 <vPortExitCritical+0x4c>)
 80048a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048aa:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <vPortExitCritical+0x4c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d105      	bne.n	80048be <vPortExitCritical+0x42>
 80048b2:	2300      	movs	r3, #0
 80048b4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80048bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr
 80048c8:	20000054 	.word	0x20000054
 80048cc:	00000000 	.word	0x00000000

080048d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048d0:	f3ef 8009 	mrs	r0, PSP
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	4b0d      	ldr	r3, [pc, #52]	; (8004910 <pxCurrentTCBConst>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048e0:	6010      	str	r0, [r2, #0]
 80048e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80048e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048ea:	f380 8811 	msr	BASEPRI, r0
 80048ee:	f7ff fcdf 	bl	80042b0 <vTaskSwitchContext>
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f380 8811 	msr	BASEPRI, r0
 80048fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80048fe:	6819      	ldr	r1, [r3, #0]
 8004900:	6808      	ldr	r0, [r1, #0]
 8004902:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004906:	f380 8809 	msr	PSP, r0
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	4770      	bx	lr

08004910 <pxCurrentTCBConst>:
 8004910:	200007e8 	.word	0x200007e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop

08004918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	607b      	str	r3, [r7, #4]
}
 8004930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004932:	f7ff fbff 	bl	8004134 <xTaskIncrementTick>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <xPortSysTickHandler+0x40>)
 800493e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	2300      	movs	r3, #0
 8004946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	f383 8811 	msr	BASEPRI, r3
}
 800494e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004950:	bf00      	nop
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004960:	4b0a      	ldr	r3, [pc, #40]	; (800498c <vPortSetupTimerInterrupt+0x30>)
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <vPortSetupTimerInterrupt+0x34>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800496c:	4b09      	ldr	r3, [pc, #36]	; (8004994 <vPortSetupTimerInterrupt+0x38>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a09      	ldr	r2, [pc, #36]	; (8004998 <vPortSetupTimerInterrupt+0x3c>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	099b      	lsrs	r3, r3, #6
 8004978:	4a08      	ldr	r2, [pc, #32]	; (800499c <vPortSetupTimerInterrupt+0x40>)
 800497a:	3b01      	subs	r3, #1
 800497c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800497e:	4b03      	ldr	r3, [pc, #12]	; (800498c <vPortSetupTimerInterrupt+0x30>)
 8004980:	2207      	movs	r2, #7
 8004982:	601a      	str	r2, [r3, #0]
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr
 800498c:	e000e010 	.word	0xe000e010
 8004990:	e000e018 	.word	0xe000e018
 8004994:	20000018 	.word	0x20000018
 8004998:	10624dd3 	.word	0x10624dd3
 800499c:	e000e014 	.word	0xe000e014

080049a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08a      	sub	sp, #40	; 0x28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80049ac:	f7ff fb18 	bl	8003fe0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80049b0:	4b58      	ldr	r3, [pc, #352]	; (8004b14 <pvPortMalloc+0x174>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80049b8:	f000 f910 	bl	8004bdc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049bc:	4b56      	ldr	r3, [pc, #344]	; (8004b18 <pvPortMalloc+0x178>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f040 808e 	bne.w	8004ae6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d01d      	beq.n	8004a0c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80049d0:	2208      	movs	r2, #8
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4413      	add	r3, r2
 80049d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d014      	beq.n	8004a0c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f023 0307 	bic.w	r3, r3, #7
 80049e8:	3308      	adds	r3, #8
 80049ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <pvPortMalloc+0x6c>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	617b      	str	r3, [r7, #20]
}
 8004a08:	bf00      	nop
 8004a0a:	e7fe      	b.n	8004a0a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d069      	beq.n	8004ae6 <pvPortMalloc+0x146>
 8004a12:	4b42      	ldr	r3, [pc, #264]	; (8004b1c <pvPortMalloc+0x17c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d864      	bhi.n	8004ae6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a1c:	4b40      	ldr	r3, [pc, #256]	; (8004b20 <pvPortMalloc+0x180>)
 8004a1e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a20:	4b3f      	ldr	r3, [pc, #252]	; (8004b20 <pvPortMalloc+0x180>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a26:	e004      	b.n	8004a32 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d903      	bls.n	8004a44 <pvPortMalloc+0xa4>
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1f1      	bne.n	8004a28 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a44:	4b33      	ldr	r3, [pc, #204]	; (8004b14 <pvPortMalloc+0x174>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d04b      	beq.n	8004ae6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2208      	movs	r2, #8
 8004a54:	4413      	add	r3, r2
 8004a56:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	1ad2      	subs	r2, r2, r3
 8004a68:	2308      	movs	r3, #8
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d91f      	bls.n	8004ab0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4413      	add	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <pvPortMalloc+0xf8>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	613b      	str	r3, [r7, #16]
}
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	1ad2      	subs	r2, r2, r3
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004aaa:	69b8      	ldr	r0, [r7, #24]
 8004aac:	f000 f8f8 	bl	8004ca0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ab0:	4b1a      	ldr	r3, [pc, #104]	; (8004b1c <pvPortMalloc+0x17c>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	4a18      	ldr	r2, [pc, #96]	; (8004b1c <pvPortMalloc+0x17c>)
 8004abc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004abe:	4b17      	ldr	r3, [pc, #92]	; (8004b1c <pvPortMalloc+0x17c>)
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	4b18      	ldr	r3, [pc, #96]	; (8004b24 <pvPortMalloc+0x184>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d203      	bcs.n	8004ad2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004aca:	4b14      	ldr	r3, [pc, #80]	; (8004b1c <pvPortMalloc+0x17c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a15      	ldr	r2, [pc, #84]	; (8004b24 <pvPortMalloc+0x184>)
 8004ad0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <pvPortMalloc+0x178>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	431a      	orrs	r2, r3
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ae6:	f7ff fa89 	bl	8003ffc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <pvPortMalloc+0x16a>
	__asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	60fb      	str	r3, [r7, #12]
}
 8004b06:	bf00      	nop
 8004b08:	e7fe      	b.n	8004b08 <pvPortMalloc+0x168>
	return pvReturn;
 8004b0a:	69fb      	ldr	r3, [r7, #28]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3728      	adds	r7, #40	; 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	20001524 	.word	0x20001524
 8004b18:	20001530 	.word	0x20001530
 8004b1c:	20001528 	.word	0x20001528
 8004b20:	2000151c 	.word	0x2000151c
 8004b24:	2000152c 	.word	0x2000152c

08004b28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d048      	beq.n	8004bcc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b3a:	2308      	movs	r3, #8
 8004b3c:	425b      	negs	r3, r3
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	4413      	add	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	4b21      	ldr	r3, [pc, #132]	; (8004bd4 <vPortFree+0xac>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4013      	ands	r3, r2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10a      	bne.n	8004b6c <vPortFree+0x44>
	__asm volatile
 8004b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5a:	f383 8811 	msr	BASEPRI, r3
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	60fb      	str	r3, [r7, #12]
}
 8004b68:	bf00      	nop
 8004b6a:	e7fe      	b.n	8004b6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <vPortFree+0x62>
	__asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	60bb      	str	r3, [r7, #8]
}
 8004b86:	bf00      	nop
 8004b88:	e7fe      	b.n	8004b88 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <vPortFree+0xac>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d019      	beq.n	8004bcc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d115      	bne.n	8004bcc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <vPortFree+0xac>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	401a      	ands	r2, r3
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004bb0:	f7ff fa16 	bl	8003fe0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	4b07      	ldr	r3, [pc, #28]	; (8004bd8 <vPortFree+0xb0>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	4a06      	ldr	r2, [pc, #24]	; (8004bd8 <vPortFree+0xb0>)
 8004bc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bc2:	6938      	ldr	r0, [r7, #16]
 8004bc4:	f000 f86c 	bl	8004ca0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004bc8:	f7ff fa18 	bl	8003ffc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004bcc:	bf00      	nop
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	20001530 	.word	0x20001530
 8004bd8:	20001528 	.word	0x20001528

08004bdc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004be2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004be6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004be8:	4b27      	ldr	r3, [pc, #156]	; (8004c88 <prvHeapInit+0xac>)
 8004bea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00c      	beq.n	8004c10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3307      	adds	r3, #7
 8004bfa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0307 	bic.w	r3, r3, #7
 8004c02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	4a1f      	ldr	r2, [pc, #124]	; (8004c88 <prvHeapInit+0xac>)
 8004c0c:	4413      	add	r3, r2
 8004c0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c14:	4a1d      	ldr	r2, [pc, #116]	; (8004c8c <prvHeapInit+0xb0>)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c1a:	4b1c      	ldr	r3, [pc, #112]	; (8004c8c <prvHeapInit+0xb0>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	4413      	add	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c28:	2208      	movs	r2, #8
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1a9b      	subs	r3, r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0307 	bic.w	r3, r3, #7
 8004c36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4a15      	ldr	r2, [pc, #84]	; (8004c90 <prvHeapInit+0xb4>)
 8004c3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c3e:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <prvHeapInit+0xb4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2200      	movs	r2, #0
 8004c44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c46:	4b12      	ldr	r3, [pc, #72]	; (8004c90 <prvHeapInit+0xb4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	1ad2      	subs	r2, r2, r3
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <prvHeapInit+0xb4>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	4a0a      	ldr	r2, [pc, #40]	; (8004c94 <prvHeapInit+0xb8>)
 8004c6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <prvHeapInit+0xbc>)
 8004c72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c74:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <prvHeapInit+0xc0>)
 8004c76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c7a:	601a      	str	r2, [r3, #0]
}
 8004c7c:	bf00      	nop
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	2000091c 	.word	0x2000091c
 8004c8c:	2000151c 	.word	0x2000151c
 8004c90:	20001524 	.word	0x20001524
 8004c94:	2000152c 	.word	0x2000152c
 8004c98:	20001528 	.word	0x20001528
 8004c9c:	20001530 	.word	0x20001530

08004ca0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ca8:	4b27      	ldr	r3, [pc, #156]	; (8004d48 <prvInsertBlockIntoFreeList+0xa8>)
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	e002      	b.n	8004cb4 <prvInsertBlockIntoFreeList+0x14>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d8f7      	bhi.n	8004cae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	4413      	add	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d108      	bne.n	8004ce2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	441a      	add	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	441a      	add	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d118      	bne.n	8004d28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	4b14      	ldr	r3, [pc, #80]	; (8004d4c <prvInsertBlockIntoFreeList+0xac>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d00d      	beq.n	8004d1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	441a      	add	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	e008      	b.n	8004d30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d1e:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <prvInsertBlockIntoFreeList+0xac>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	e003      	b.n	8004d30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d002      	beq.n	8004d3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d3e:	bf00      	nop
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr
 8004d48:	2000151c 	.word	0x2000151c
 8004d4c:	20001524 	.word	0x20001524

08004d50 <memset>:
 8004d50:	4603      	mov	r3, r0
 8004d52:	4402      	add	r2, r0
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d100      	bne.n	8004d5a <memset+0xa>
 8004d58:	4770      	bx	lr
 8004d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d5e:	e7f9      	b.n	8004d54 <memset+0x4>

08004d60 <_reclaim_reent>:
 8004d60:	4b29      	ldr	r3, [pc, #164]	; (8004e08 <_reclaim_reent+0xa8>)
 8004d62:	b570      	push	{r4, r5, r6, lr}
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4604      	mov	r4, r0
 8004d68:	4283      	cmp	r3, r0
 8004d6a:	d04b      	beq.n	8004e04 <_reclaim_reent+0xa4>
 8004d6c:	69c3      	ldr	r3, [r0, #28]
 8004d6e:	b143      	cbz	r3, 8004d82 <_reclaim_reent+0x22>
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d144      	bne.n	8004e00 <_reclaim_reent+0xa0>
 8004d76:	69e3      	ldr	r3, [r4, #28]
 8004d78:	6819      	ldr	r1, [r3, #0]
 8004d7a:	b111      	cbz	r1, 8004d82 <_reclaim_reent+0x22>
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	f000 f86b 	bl	8004e58 <_free_r>
 8004d82:	6961      	ldr	r1, [r4, #20]
 8004d84:	b111      	cbz	r1, 8004d8c <_reclaim_reent+0x2c>
 8004d86:	4620      	mov	r0, r4
 8004d88:	f000 f866 	bl	8004e58 <_free_r>
 8004d8c:	69e1      	ldr	r1, [r4, #28]
 8004d8e:	b111      	cbz	r1, 8004d96 <_reclaim_reent+0x36>
 8004d90:	4620      	mov	r0, r4
 8004d92:	f000 f861 	bl	8004e58 <_free_r>
 8004d96:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004d98:	b111      	cbz	r1, 8004da0 <_reclaim_reent+0x40>
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f000 f85c 	bl	8004e58 <_free_r>
 8004da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004da2:	b111      	cbz	r1, 8004daa <_reclaim_reent+0x4a>
 8004da4:	4620      	mov	r0, r4
 8004da6:	f000 f857 	bl	8004e58 <_free_r>
 8004daa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004dac:	b111      	cbz	r1, 8004db4 <_reclaim_reent+0x54>
 8004dae:	4620      	mov	r0, r4
 8004db0:	f000 f852 	bl	8004e58 <_free_r>
 8004db4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004db6:	b111      	cbz	r1, 8004dbe <_reclaim_reent+0x5e>
 8004db8:	4620      	mov	r0, r4
 8004dba:	f000 f84d 	bl	8004e58 <_free_r>
 8004dbe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004dc0:	b111      	cbz	r1, 8004dc8 <_reclaim_reent+0x68>
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	f000 f848 	bl	8004e58 <_free_r>
 8004dc8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004dca:	b111      	cbz	r1, 8004dd2 <_reclaim_reent+0x72>
 8004dcc:	4620      	mov	r0, r4
 8004dce:	f000 f843 	bl	8004e58 <_free_r>
 8004dd2:	6a23      	ldr	r3, [r4, #32]
 8004dd4:	b1b3      	cbz	r3, 8004e04 <_reclaim_reent+0xa4>
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ddc:	4718      	bx	r3
 8004dde:	5949      	ldr	r1, [r1, r5]
 8004de0:	b941      	cbnz	r1, 8004df4 <_reclaim_reent+0x94>
 8004de2:	3504      	adds	r5, #4
 8004de4:	69e3      	ldr	r3, [r4, #28]
 8004de6:	2d80      	cmp	r5, #128	; 0x80
 8004de8:	68d9      	ldr	r1, [r3, #12]
 8004dea:	d1f8      	bne.n	8004dde <_reclaim_reent+0x7e>
 8004dec:	4620      	mov	r0, r4
 8004dee:	f000 f833 	bl	8004e58 <_free_r>
 8004df2:	e7c0      	b.n	8004d76 <_reclaim_reent+0x16>
 8004df4:	680e      	ldr	r6, [r1, #0]
 8004df6:	4620      	mov	r0, r4
 8004df8:	f000 f82e 	bl	8004e58 <_free_r>
 8004dfc:	4631      	mov	r1, r6
 8004dfe:	e7ef      	b.n	8004de0 <_reclaim_reent+0x80>
 8004e00:	2500      	movs	r5, #0
 8004e02:	e7ef      	b.n	8004de4 <_reclaim_reent+0x84>
 8004e04:	bd70      	pop	{r4, r5, r6, pc}
 8004e06:	bf00      	nop
 8004e08:	200000a4 	.word	0x200000a4

08004e0c <__libc_init_array>:
 8004e0c:	b570      	push	{r4, r5, r6, lr}
 8004e0e:	2600      	movs	r6, #0
 8004e10:	4d0c      	ldr	r5, [pc, #48]	; (8004e44 <__libc_init_array+0x38>)
 8004e12:	4c0d      	ldr	r4, [pc, #52]	; (8004e48 <__libc_init_array+0x3c>)
 8004e14:	1b64      	subs	r4, r4, r5
 8004e16:	10a4      	asrs	r4, r4, #2
 8004e18:	42a6      	cmp	r6, r4
 8004e1a:	d109      	bne.n	8004e30 <__libc_init_array+0x24>
 8004e1c:	f000 f870 	bl	8004f00 <_init>
 8004e20:	2600      	movs	r6, #0
 8004e22:	4d0a      	ldr	r5, [pc, #40]	; (8004e4c <__libc_init_array+0x40>)
 8004e24:	4c0a      	ldr	r4, [pc, #40]	; (8004e50 <__libc_init_array+0x44>)
 8004e26:	1b64      	subs	r4, r4, r5
 8004e28:	10a4      	asrs	r4, r4, #2
 8004e2a:	42a6      	cmp	r6, r4
 8004e2c:	d105      	bne.n	8004e3a <__libc_init_array+0x2e>
 8004e2e:	bd70      	pop	{r4, r5, r6, pc}
 8004e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e34:	4798      	blx	r3
 8004e36:	3601      	adds	r6, #1
 8004e38:	e7ee      	b.n	8004e18 <__libc_init_array+0xc>
 8004e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e3e:	4798      	blx	r3
 8004e40:	3601      	adds	r6, #1
 8004e42:	e7f2      	b.n	8004e2a <__libc_init_array+0x1e>
 8004e44:	08004fa8 	.word	0x08004fa8
 8004e48:	08004fa8 	.word	0x08004fa8
 8004e4c:	08004fa8 	.word	0x08004fa8
 8004e50:	08004fac 	.word	0x08004fac

08004e54 <__retarget_lock_acquire_recursive>:
 8004e54:	4770      	bx	lr

08004e56 <__retarget_lock_release_recursive>:
 8004e56:	4770      	bx	lr

08004e58 <_free_r>:
 8004e58:	b538      	push	{r3, r4, r5, lr}
 8004e5a:	4605      	mov	r5, r0
 8004e5c:	2900      	cmp	r1, #0
 8004e5e:	d040      	beq.n	8004ee2 <_free_r+0x8a>
 8004e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e64:	1f0c      	subs	r4, r1, #4
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bfb8      	it	lt
 8004e6a:	18e4      	addlt	r4, r4, r3
 8004e6c:	f000 f83c 	bl	8004ee8 <__malloc_lock>
 8004e70:	4a1c      	ldr	r2, [pc, #112]	; (8004ee4 <_free_r+0x8c>)
 8004e72:	6813      	ldr	r3, [r2, #0]
 8004e74:	b933      	cbnz	r3, 8004e84 <_free_r+0x2c>
 8004e76:	6063      	str	r3, [r4, #4]
 8004e78:	6014      	str	r4, [r2, #0]
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e80:	f000 b838 	b.w	8004ef4 <__malloc_unlock>
 8004e84:	42a3      	cmp	r3, r4
 8004e86:	d908      	bls.n	8004e9a <_free_r+0x42>
 8004e88:	6820      	ldr	r0, [r4, #0]
 8004e8a:	1821      	adds	r1, r4, r0
 8004e8c:	428b      	cmp	r3, r1
 8004e8e:	bf01      	itttt	eq
 8004e90:	6819      	ldreq	r1, [r3, #0]
 8004e92:	685b      	ldreq	r3, [r3, #4]
 8004e94:	1809      	addeq	r1, r1, r0
 8004e96:	6021      	streq	r1, [r4, #0]
 8004e98:	e7ed      	b.n	8004e76 <_free_r+0x1e>
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	b10b      	cbz	r3, 8004ea4 <_free_r+0x4c>
 8004ea0:	42a3      	cmp	r3, r4
 8004ea2:	d9fa      	bls.n	8004e9a <_free_r+0x42>
 8004ea4:	6811      	ldr	r1, [r2, #0]
 8004ea6:	1850      	adds	r0, r2, r1
 8004ea8:	42a0      	cmp	r0, r4
 8004eaa:	d10b      	bne.n	8004ec4 <_free_r+0x6c>
 8004eac:	6820      	ldr	r0, [r4, #0]
 8004eae:	4401      	add	r1, r0
 8004eb0:	1850      	adds	r0, r2, r1
 8004eb2:	4283      	cmp	r3, r0
 8004eb4:	6011      	str	r1, [r2, #0]
 8004eb6:	d1e0      	bne.n	8004e7a <_free_r+0x22>
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	4408      	add	r0, r1
 8004ebe:	6010      	str	r0, [r2, #0]
 8004ec0:	6053      	str	r3, [r2, #4]
 8004ec2:	e7da      	b.n	8004e7a <_free_r+0x22>
 8004ec4:	d902      	bls.n	8004ecc <_free_r+0x74>
 8004ec6:	230c      	movs	r3, #12
 8004ec8:	602b      	str	r3, [r5, #0]
 8004eca:	e7d6      	b.n	8004e7a <_free_r+0x22>
 8004ecc:	6820      	ldr	r0, [r4, #0]
 8004ece:	1821      	adds	r1, r4, r0
 8004ed0:	428b      	cmp	r3, r1
 8004ed2:	bf01      	itttt	eq
 8004ed4:	6819      	ldreq	r1, [r3, #0]
 8004ed6:	685b      	ldreq	r3, [r3, #4]
 8004ed8:	1809      	addeq	r1, r1, r0
 8004eda:	6021      	streq	r1, [r4, #0]
 8004edc:	6063      	str	r3, [r4, #4]
 8004ede:	6054      	str	r4, [r2, #4]
 8004ee0:	e7cb      	b.n	8004e7a <_free_r+0x22>
 8004ee2:	bd38      	pop	{r3, r4, r5, pc}
 8004ee4:	20001670 	.word	0x20001670

08004ee8 <__malloc_lock>:
 8004ee8:	4801      	ldr	r0, [pc, #4]	; (8004ef0 <__malloc_lock+0x8>)
 8004eea:	f7ff bfb3 	b.w	8004e54 <__retarget_lock_acquire_recursive>
 8004eee:	bf00      	nop
 8004ef0:	2000166c 	.word	0x2000166c

08004ef4 <__malloc_unlock>:
 8004ef4:	4801      	ldr	r0, [pc, #4]	; (8004efc <__malloc_unlock+0x8>)
 8004ef6:	f7ff bfae 	b.w	8004e56 <__retarget_lock_release_recursive>
 8004efa:	bf00      	nop
 8004efc:	2000166c 	.word	0x2000166c

08004f00 <_init>:
 8004f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f02:	bf00      	nop
 8004f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f06:	bc08      	pop	{r3}
 8004f08:	469e      	mov	lr, r3
 8004f0a:	4770      	bx	lr

08004f0c <_fini>:
 8004f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0e:	bf00      	nop
 8004f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f12:	bc08      	pop	{r3}
 8004f14:	469e      	mov	lr, r3
 8004f16:	4770      	bx	lr
