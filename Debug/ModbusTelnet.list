
ModbusTelnet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f28  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08005038  08005038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005328  08005328  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08005328  08005328  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005328  08005328  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005328  08005328  00015328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800532c  0800532c  0001532c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08005330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015cc  200000a8  080053d8  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001674  080053d8  00021674  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa1d  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002820  00000000  00000000  0002ab31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  0002d358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000878  00000000  00000000  0002de98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b86  00000000  00000000  0002e710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dbfb  00000000  00000000  00047296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b142  00000000  00000000  00054e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e0c  00000000  00000000  000dffd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e2de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a8 	.word	0x200000a8
 800012c:	00000000 	.word	0x00000000
 8000130:	08005020 	.word	0x08005020

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000ac 	.word	0x200000ac
 800014c:	08005020 	.word	0x08005020

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	200000c4 	.word	0x200000c4
 800018c:	20000164 	.word	0x20000164

08000190 <TaskFunction>:
};
netmode_type gNetMode = {
		NM_FORCEARP | NM_WAKEONLAN | NM_PPPOE | 128
};
//TaskHandle_t TaskHandle1;  // Handle for TaskFunction
void TaskFunction(void *pvParameters) {
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
    for (;;) {
        // Task code here
    	startTelnet();
 8000198:	f000 fad4 	bl	8000744 <startTelnet>
        vTaskDelay(pdMS_TO_TICKS(10));  // Delay for 1000 milliseconds
 800019c:	200a      	movs	r0, #10
 800019e:	f003 ff0f 	bl	8003fc0 <vTaskDelay>
    	startTelnet();
 80001a2:	e7f9      	b.n	8000198 <TaskFunction+0x8>

080001a4 <Task2Function>:
    }
}
void Task2Function(void *pvParameters) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
    for (;;) {
        // Task 2 code here
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)==1) {
 80001ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001b0:	4815      	ldr	r0, [pc, #84]	; (8000208 <Task2Function+0x64>)
 80001b2:	f002 faf9 	bl	80027a8 <HAL_GPIO_ReadPin>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	d112      	bne.n	80001e2 <Task2Function+0x3e>
            // Set network address and network mode to default only if not already configured
        	resetW5500();
 80001bc:	f000 ff44 	bl	8001048 <resetW5500>
        	W5500Init();
 80001c0:	f000 ff5e 	bl	8001080 <W5500Init>
            ctlnetwork(CN_SET_NETINFO, (void*) &gNetInfoDefault);
 80001c4:	4911      	ldr	r1, [pc, #68]	; (800020c <Task2Function+0x68>)
 80001c6:	2000      	movs	r0, #0
 80001c8:	f001 f94a 	bl	8001460 <ctlnetwork>
            ctlnetwork(CN_SET_NETMODE, (void*) &gNetMode);
 80001cc:	4910      	ldr	r1, [pc, #64]	; (8000210 <Task2Function+0x6c>)
 80001ce:	2002      	movs	r0, #2
 80001d0:	f001 f946 	bl	8001460 <ctlnetwork>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001da:	480b      	ldr	r0, [pc, #44]	; (8000208 <Task2Function+0x64>)
 80001dc:	f002 fafb 	bl	80027d6 <HAL_GPIO_WritePin>
 80001e0:	e00d      	b.n	80001fe <Task2Function+0x5a>
        } else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_RESET) {
 80001e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001e6:	4808      	ldr	r0, [pc, #32]	; (8000208 <Task2Function+0x64>)
 80001e8:	f002 fade 	bl	80027a8 <HAL_GPIO_ReadPin>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d105      	bne.n	80001fe <Task2Function+0x5a>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <Task2Function+0x64>)
 80001fa:	f002 faec 	bl	80027d6 <HAL_GPIO_WritePin>
        }

        vTaskDelay(pdMS_TO_TICKS(1000));  // Delay for 3000 milliseconds
 80001fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000202:	f003 fedd 	bl	8003fc0 <vTaskDelay>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)==1) {
 8000206:	e7d1      	b.n	80001ac <Task2Function+0x8>
 8000208:	40010c00 	.word	0x40010c00
 800020c:	20000000 	.word	0x20000000
 8000210:	20000017 	.word	0x20000017

08000214 <main>:
    }
}
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af02      	add	r7, sp, #8

  HAL_Init();
 800021a:	f001 ffd7 	bl	80021cc <HAL_Init>

  SystemClock_Config();
 800021e:	f000 f825 	bl	800026c <SystemClock_Config>

  MX_GPIO_Init();
 8000222:	f000 f89f 	bl	8000364 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000226:	f000 f867 	bl	80002f8 <MX_SPI1_Init>

  /* Start scheduler */
  W5500Init();
 800022a:	f000 ff29 	bl	8001080 <W5500Init>
//	ctlnetwork(CN_SET_NETINFO, (void*) &gNetInfoDefault);
//	ctlnetwork(CN_SET_NETMODE, (void*) &gNetMode);

  // Create tasks
    xTaskCreate(TaskFunction, "Task1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800022e:	2300      	movs	r3, #0
 8000230:	9301      	str	r3, [sp, #4]
 8000232:	2301      	movs	r3, #1
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	2300      	movs	r3, #0
 8000238:	2280      	movs	r2, #128	; 0x80
 800023a:	4908      	ldr	r1, [pc, #32]	; (800025c <main+0x48>)
 800023c:	4808      	ldr	r0, [pc, #32]	; (8000260 <main+0x4c>)
 800023e:	f003 fd7a 	bl	8003d36 <xTaskCreate>
    xTaskCreate(Task2Function, "Task2", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 8000242:	2300      	movs	r3, #0
 8000244:	9301      	str	r3, [sp, #4]
 8000246:	2302      	movs	r3, #2
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	2300      	movs	r3, #0
 800024c:	2280      	movs	r2, #128	; 0x80
 800024e:	4905      	ldr	r1, [pc, #20]	; (8000264 <main+0x50>)
 8000250:	4805      	ldr	r0, [pc, #20]	; (8000268 <main+0x54>)
 8000252:	f003 fd70 	bl	8003d36 <xTaskCreate>

  vTaskStartScheduler();
 8000256:	f003 fee7 	bl	8004028 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800025a:	e7fe      	b.n	800025a <main+0x46>
 800025c:	08005038 	.word	0x08005038
 8000260:	08000191 	.word	0x08000191
 8000264:	08005040 	.word	0x08005040
 8000268:	080001a5 	.word	0x080001a5

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b090      	sub	sp, #64	; 0x40
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0318 	add.w	r3, r7, #24
 8000276:	2228      	movs	r2, #40	; 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f004 fdf8 	bl	8004e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
 800028c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800028e:	2301      	movs	r3, #1
 8000290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000296:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029c:	2301      	movs	r3, #1
 800029e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a0:	2302      	movs	r3, #2
 80002a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80002aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80002ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 0318 	add.w	r3, r7, #24
 80002b4:	4618      	mov	r0, r3
 80002b6:	f002 faa7 	bl	8002808 <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002c0:	f000 f8e0 	bl	8000484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c8:	2302      	movs	r3, #2
 80002ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2100      	movs	r1, #0
 80002dc:	4618      	mov	r0, r3
 80002de:	f002 fd15 	bl	8002d0c <HAL_RCC_ClockConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002e8:	f000 f8cc 	bl	8000484 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80002ec:	f002 fdf8 	bl	8002ee0 <HAL_RCC_EnableCSS>
}
 80002f0:	bf00      	nop
 80002f2:	3740      	adds	r7, #64	; 0x40
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002fc:	4b17      	ldr	r3, [pc, #92]	; (800035c <MX_SPI1_Init+0x64>)
 80002fe:	4a18      	ldr	r2, [pc, #96]	; (8000360 <MX_SPI1_Init+0x68>)
 8000300:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000302:	4b16      	ldr	r3, [pc, #88]	; (800035c <MX_SPI1_Init+0x64>)
 8000304:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000308:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800030a:	4b14      	ldr	r3, [pc, #80]	; (800035c <MX_SPI1_Init+0x64>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <MX_SPI1_Init+0x64>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000316:	4b11      	ldr	r3, [pc, #68]	; (800035c <MX_SPI1_Init+0x64>)
 8000318:	2202      	movs	r2, #2
 800031a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <MX_SPI1_Init+0x64>)
 800031e:	2201      	movs	r2, #1
 8000320:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <MX_SPI1_Init+0x64>)
 8000324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000328:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <MX_SPI1_Init+0x64>)
 800032c:	2220      	movs	r2, #32
 800032e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000330:	4b0a      	ldr	r3, [pc, #40]	; (800035c <MX_SPI1_Init+0x64>)
 8000332:	2200      	movs	r2, #0
 8000334:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <MX_SPI1_Init+0x64>)
 8000338:	2200      	movs	r2, #0
 800033a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800033c:	4b07      	ldr	r3, [pc, #28]	; (800035c <MX_SPI1_Init+0x64>)
 800033e:	2200      	movs	r2, #0
 8000340:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <MX_SPI1_Init+0x64>)
 8000344:	220a      	movs	r2, #10
 8000346:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000348:	4804      	ldr	r0, [pc, #16]	; (800035c <MX_SPI1_Init+0x64>)
 800034a:	f002 fe61 	bl	8003010 <HAL_SPI_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000354:	f000 f896 	bl	8000484 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000364 	.word	0x20000364
 8000360:	40013000 	.word	0x40013000

08000364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b088      	sub	sp, #32
 8000368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000378:	4b3e      	ldr	r3, [pc, #248]	; (8000474 <MX_GPIO_Init+0x110>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a3d      	ldr	r2, [pc, #244]	; (8000474 <MX_GPIO_Init+0x110>)
 800037e:	f043 0310 	orr.w	r3, r3, #16
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b3b      	ldr	r3, [pc, #236]	; (8000474 <MX_GPIO_Init+0x110>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0310 	and.w	r3, r3, #16
 800038c:	60fb      	str	r3, [r7, #12]
 800038e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000390:	4b38      	ldr	r3, [pc, #224]	; (8000474 <MX_GPIO_Init+0x110>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a37      	ldr	r2, [pc, #220]	; (8000474 <MX_GPIO_Init+0x110>)
 8000396:	f043 0320 	orr.w	r3, r3, #32
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b35      	ldr	r3, [pc, #212]	; (8000474 <MX_GPIO_Init+0x110>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0320 	and.w	r3, r3, #32
 80003a4:	60bb      	str	r3, [r7, #8]
 80003a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	4b32      	ldr	r3, [pc, #200]	; (8000474 <MX_GPIO_Init+0x110>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a31      	ldr	r2, [pc, #196]	; (8000474 <MX_GPIO_Init+0x110>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b2f      	ldr	r3, [pc, #188]	; (8000474 <MX_GPIO_Init+0x110>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0304 	and.w	r3, r3, #4
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c0:	4b2c      	ldr	r3, [pc, #176]	; (8000474 <MX_GPIO_Init+0x110>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a2b      	ldr	r2, [pc, #172]	; (8000474 <MX_GPIO_Init+0x110>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b29      	ldr	r3, [pc, #164]	; (8000474 <MX_GPIO_Init+0x110>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0308 	and.w	r3, r3, #8
 80003d4:	603b      	str	r3, [r7, #0]
 80003d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003de:	4826      	ldr	r0, [pc, #152]	; (8000478 <MX_GPIO_Init+0x114>)
 80003e0:	f002 f9f9 	bl	80027d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2103      	movs	r1, #3
 80003e8:	4824      	ldr	r0, [pc, #144]	; (800047c <MX_GPIO_Init+0x118>)
 80003ea:	f002 f9f4 	bl	80027d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80003ee:	2200      	movs	r2, #0
 80003f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003f4:	4822      	ldr	r0, [pc, #136]	; (8000480 <MX_GPIO_Init+0x11c>)
 80003f6:	f002 f9ee 	bl	80027d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000400:	2301      	movs	r3, #1
 8000402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000408:	2302      	movs	r3, #2
 800040a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	4619      	mov	r1, r3
 8000412:	4819      	ldr	r0, [pc, #100]	; (8000478 <MX_GPIO_Init+0x114>)
 8000414:	f002 f844 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000418:	2303      	movs	r3, #3
 800041a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041c:	2301      	movs	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	2300      	movs	r3, #0
 8000422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000424:	2302      	movs	r3, #2
 8000426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	4619      	mov	r1, r3
 800042e:	4813      	ldr	r0, [pc, #76]	; (800047c <MX_GPIO_Init+0x118>)
 8000430:	f002 f836 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043a:	2301      	movs	r3, #1
 800043c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000442:	2302      	movs	r3, #2
 8000444:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	4619      	mov	r1, r3
 800044c:	480c      	ldr	r0, [pc, #48]	; (8000480 <MX_GPIO_Init+0x11c>)
 800044e:	f002 f827 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000452:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000460:	f107 0310 	add.w	r3, r7, #16
 8000464:	4619      	mov	r1, r3
 8000466:	4806      	ldr	r0, [pc, #24]	; (8000480 <MX_GPIO_Init+0x11c>)
 8000468:	f002 f81a 	bl	80024a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800046c:	bf00      	nop
 800046e:	3720      	adds	r7, #32
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40021000 	.word	0x40021000
 8000478:	40011000 	.word	0x40011000
 800047c:	40010800 	.word	0x40010800
 8000480:	40010c00 	.word	0x40010c00

08000484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000488:	b672      	cpsid	i
}
 800048a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800048c:	e7fe      	b.n	800048c <Error_Handler+0x8>
	...

08000490 <HAL_MspInit>:
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <HAL_MspInit+0x68>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	4a17      	ldr	r2, [pc, #92]	; (80004f8 <HAL_MspInit+0x68>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6193      	str	r3, [r2, #24]
 80004a2:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <HAL_MspInit+0x68>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	60bb      	str	r3, [r7, #8]
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <HAL_MspInit+0x68>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	4a11      	ldr	r2, [pc, #68]	; (80004f8 <HAL_MspInit+0x68>)
 80004b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b8:	61d3      	str	r3, [r2, #28]
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <HAL_MspInit+0x68>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2200      	movs	r2, #0
 80004c8:	210f      	movs	r1, #15
 80004ca:	f06f 0001 	mvn.w	r0, #1
 80004ce:	f001 ffbe 	bl	800244e <HAL_NVIC_SetPriority>
 80004d2:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <HAL_MspInit+0x6c>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <HAL_MspInit+0x6c>)
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	6053      	str	r3, [r2, #4]
 80004ee:	bf00      	nop
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010000 	.word	0x40010000

08000500 <HAL_SPI_MspInit>:
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a1b      	ldr	r2, [pc, #108]	; (8000588 <HAL_SPI_MspInit+0x88>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d12f      	bne.n	8000580 <HAL_SPI_MspInit+0x80>
 8000520:	4b1a      	ldr	r3, [pc, #104]	; (800058c <HAL_SPI_MspInit+0x8c>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a19      	ldr	r2, [pc, #100]	; (800058c <HAL_SPI_MspInit+0x8c>)
 8000526:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b17      	ldr	r3, [pc, #92]	; (800058c <HAL_SPI_MspInit+0x8c>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	4b14      	ldr	r3, [pc, #80]	; (800058c <HAL_SPI_MspInit+0x8c>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a13      	ldr	r2, [pc, #76]	; (800058c <HAL_SPI_MspInit+0x8c>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <HAL_SPI_MspInit+0x8c>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0304 	and.w	r3, r3, #4
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	23a0      	movs	r3, #160	; 0xa0
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	2302      	movs	r3, #2
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	2303      	movs	r3, #3
 800055a:	61fb      	str	r3, [r7, #28]
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	4619      	mov	r1, r3
 8000562:	480b      	ldr	r0, [pc, #44]	; (8000590 <HAL_SPI_MspInit+0x90>)
 8000564:	f001 ff9c 	bl	80024a0 <HAL_GPIO_Init>
 8000568:	2340      	movs	r3, #64	; 0x40
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	4619      	mov	r1, r3
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <HAL_SPI_MspInit+0x90>)
 800057c:	f001 ff90 	bl	80024a0 <HAL_GPIO_Init>
 8000580:	bf00      	nop
 8000582:	3720      	adds	r7, #32
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40013000 	.word	0x40013000
 800058c:	40021000 	.word	0x40021000
 8000590:	40010800 	.word	0x40010800

08000594 <NMI_Handler>:
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
 8000598:	f002 fd02 	bl	8002fa0 <HAL_RCC_NMI_IRQHandler>
 800059c:	e7fe      	b.n	800059c <NMI_Handler+0x8>

0800059e <HardFault_Handler>:
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	e7fe      	b.n	80005a2 <HardFault_Handler+0x4>

080005a4 <MemManage_Handler>:
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	e7fe      	b.n	80005a8 <MemManage_Handler+0x4>

080005aa <BusFault_Handler>:
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	e7fe      	b.n	80005ae <BusFault_Handler+0x4>

080005b0 <UsageFault_Handler>:
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	e7fe      	b.n	80005b4 <UsageFault_Handler+0x4>

080005b6 <DebugMon_Handler>:
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <SysTick_Handler>:
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	f001 fe47 	bl	8002258 <HAL_IncTick>
 80005ca:	f004 f83f 	bl	800464c <xTaskGetSchedulerState>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d001      	beq.n	80005d8 <SysTick_Handler+0x16>
 80005d4:	f004 fa30 	bl	8004a38 <xPortSysTickHandler>
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <SystemInit>:
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <writeMessage>:
#define MAX_BUFFER_SIZE 1024  // Adjust the size according to your needs
uint8_t buffer[MAX_BUFFER_SIZE];  // Assuming buffer is declared globally or passed as an argument
uint8_t telnetSocket = 0;
uint16_t telnetPort = 23;

void writeMessage(const char* message) {
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    send(telnetSocket, (void*)message, strlen(message));
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <writeMessage+0x28>)
 80005f2:	781c      	ldrb	r4, [r3, #0]
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff fdab 	bl	8000150 <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	461a      	mov	r2, r3
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	4620      	mov	r0, r4
 8000604:	f000 fafc 	bl	8000c00 <send>
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bd90      	pop	{r4, r7, pc}
 8000610:	200007bc 	.word	0x200007bc

08000614 <readMessage>:

uint8_t* readMessage() {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
    int receivedSize = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
    int indexChar = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
    uint8_t receivedChar;

    while (1) {
        receivedSize = recv(telnetSocket, &receivedChar, 1);
 8000622:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <readMessage+0xa0>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	1df9      	adds	r1, r7, #7
 8000628:	2201      	movs	r2, #1
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fbe2 	bl	8000df4 <recv>
 8000630:	60b8      	str	r0, [r7, #8]

        // Check for errors or connection closure
        if (receivedSize <= 0) {
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	2b00      	cmp	r3, #0
 8000636:	dc07      	bgt.n	8000648 <readMessage+0x34>
            // Handle error or connection closure
        	close(telnetSocket);//close the socket and restart the telnet session
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <readMessage+0xa0>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fa17 	bl	8000a70 <close>
            startTelnet();
 8000642:	f000 f87f 	bl	8000744 <startTelnet>
            break;
 8000646:	e018      	b.n	800067a <readMessage+0x66>
        }

        // Check if the received character is a newline
        if (receivedChar == '\n') {
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b0a      	cmp	r3, #10
 800064c:	d105      	bne.n	800065a <readMessage+0x46>
            // If yes, terminate the string and break out of the loop
            buffer[indexChar] = '\0';
 800064e:	4a1a      	ldr	r2, [pc, #104]	; (80006b8 <readMessage+0xa4>)
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	4413      	add	r3, r2
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
            break;
 8000658:	e00f      	b.n	800067a <readMessage+0x66>
        }

        // Otherwise, add the character to the buffer
        buffer[indexChar] = receivedChar;
 800065a:	79f9      	ldrb	r1, [r7, #7]
 800065c:	4a16      	ldr	r2, [pc, #88]	; (80006b8 <readMessage+0xa4>)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4413      	add	r3, r2
 8000662:	460a      	mov	r2, r1
 8000664:	701a      	strb	r2, [r3, #0]
        // Increment the receivedSize counter
        indexChar++;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	3301      	adds	r3, #1
 800066a:	60fb      	str	r3, [r7, #12]

        // Check if the buffer is full (adjust the size accordingly)
        if (indexChar >= MAX_BUFFER_SIZE - 1) {
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8000672:	4293      	cmp	r3, r2
 8000674:	dc00      	bgt.n	8000678 <readMessage+0x64>
        receivedSize = recv(telnetSocket, &receivedChar, 1);
 8000676:	e7d4      	b.n	8000622 <readMessage+0xe>
            // Handle buffer full condition
            break;
 8000678:	bf00      	nop
        }
    }

    // Add null terminator to make it a valid C string
    buffer[indexChar] = '\0';
 800067a:	4a0f      	ldr	r2, [pc, #60]	; (80006b8 <readMessage+0xa4>)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4413      	add	r3, r2
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]

    // Check if the socket is still in the established state
    if (getSn_SR(telnetSocket) != SOCK_ESTABLISHED) {
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <readMessage+0xa0>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	3301      	adds	r3, #1
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000692:	4618      	mov	r0, r3
 8000694:	f001 facc 	bl	8001c30 <WIZCHIP_READ>
 8000698:	4603      	mov	r3, r0
 800069a:	2b17      	cmp	r3, #23
 800069c:	d004      	beq.n	80006a8 <readMessage+0x94>
        // Optionally, close the socket here
        close(telnetSocket);
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <readMessage+0xa0>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f9e4 	bl	8000a70 <close>
    }

    // Return the buffer (or you might return something else based on your needs)
    return buffer;
 80006a8:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <readMessage+0xa4>)
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200007bc 	.word	0x200007bc
 80006b8:	200003bc 	.word	0x200003bc

080006bc <clearScreen>:
void clearScreen(){
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	writeMessage("\033[2J");
 80006c0:	4802      	ldr	r0, [pc, #8]	; (80006cc <clearScreen+0x10>)
 80006c2:	f7ff ff91 	bl	80005e8 <writeMessage>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	08005048 	.word	0x08005048

080006d0 <invalidInput>:
void invalidInput(){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	clearScreen();
 80006d4:	f7ff fff2 	bl	80006bc <clearScreen>
	writeMessage("\033[31mInvalid Input\r\n\033[37m");
 80006d8:	4802      	ldr	r0, [pc, #8]	; (80006e4 <invalidInput+0x14>)
 80006da:	f7ff ff85 	bl	80005e8 <writeMessage>
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	08005050 	.word	0x08005050

080006e8 <mainMenu>:
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    } else if (clientMessage[0] == 'l'&&clientMessage[1]=='2') {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
    }
}
void mainMenu(){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	writeMessage("Select your inputs\r\n 1. Change Device Network Configuration\r\n");
 80006ec:	4812      	ldr	r0, [pc, #72]	; (8000738 <mainMenu+0x50>)
 80006ee:	f7ff ff7b 	bl	80005e8 <writeMessage>
	switch ((char)readMessage()[0]){
 80006f2:	f7ff ff8f 	bl	8000614 <readMessage>
 80006f6:	4603      	mov	r3, r0
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b31      	cmp	r3, #49	; 0x31
 80006fc:	d114      	bne.n	8000728 <mainMenu+0x40>
	case '1' :
		clearScreen();
 80006fe:	f7ff ffdd 	bl	80006bc <clearScreen>
		writeMessage(" 1. Change IP address\r\n 2. Change Netmask\r\n 3. Change Gateway\r\n");
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <mainMenu+0x54>)
 8000704:	f7ff ff70 	bl	80005e8 <writeMessage>
		switch ((char)readMessage()[0]){
 8000708:	f7ff ff84 	bl	8000614 <readMessage>
 800070c:	4603      	mov	r3, r0
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b31      	cmp	r3, #49	; 0x31
 8000712:	d103      	bne.n	800071c <mainMenu+0x34>
		case '1':
			writeMessage("Please enter new IP address Ex:");
 8000714:	480a      	ldr	r0, [pc, #40]	; (8000740 <mainMenu+0x58>)
 8000716:	f7ff ff67 	bl	80005e8 <writeMessage>
			break;
 800071a:	e004      	b.n	8000726 <mainMenu+0x3e>
		default :
			invalidInput();
 800071c:	f7ff ffd8 	bl	80006d0 <invalidInput>
			mainMenu();
 8000720:	f7ff ffe2 	bl	80006e8 <mainMenu>
			break;
 8000724:	bf00      	nop
		}
	break;
 8000726:	e004      	b.n	8000732 <mainMenu+0x4a>
	default :
		invalidInput();
 8000728:	f7ff ffd2 	bl	80006d0 <invalidInput>
		mainMenu();
 800072c:	f7ff ffdc 	bl	80006e8 <mainMenu>
		break;
 8000730:	bf00      	nop
	}
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	0800506c 	.word	0x0800506c
 800073c:	080050ac 	.word	0x080050ac
 8000740:	080050ec 	.word	0x080050ec

08000744 <startTelnet>:

void startTelnet() {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
    // Initialize the socket outside the loop
    socket(telnetSocket, Sn_MR_TCP, 23, 0);
 8000748:	4b32      	ldr	r3, [pc, #200]	; (8000814 <startTelnet+0xd0>)
 800074a:	7818      	ldrb	r0, [r3, #0]
 800074c:	2300      	movs	r3, #0
 800074e:	2217      	movs	r2, #23
 8000750:	2101      	movs	r1, #1
 8000752:	f000 f879 	bl	8000848 <socket>
    listen(telnetSocket);
 8000756:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <startTelnet+0xd0>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f9f6 	bl	8000b4c <listen>

    while (1) {
        if (getSn_SR(telnetSocket) == SOCK_ESTABLISHED) {
 8000760:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <startTelnet+0xd0>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	3301      	adds	r3, #1
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800076e:	4618      	mov	r0, r3
 8000770:	f001 fa5e 	bl	8001c30 <WIZCHIP_READ>
 8000774:	4603      	mov	r3, r0
 8000776:	2b17      	cmp	r3, #23
 8000778:	d133      	bne.n	80007e2 <startTelnet+0x9e>
        	writeMessage("\033[36m");
 800077a:	4827      	ldr	r0, [pc, #156]	; (8000818 <startTelnet+0xd4>)
 800077c:	f7ff ff34 	bl	80005e8 <writeMessage>
        	writeMessage("\r\n");
 8000780:	4826      	ldr	r0, [pc, #152]	; (800081c <startTelnet+0xd8>)
 8000782:	f7ff ff31 	bl	80005e8 <writeMessage>
        	writeMessage("                           .8888b oo          \r\n");
 8000786:	4826      	ldr	r0, [pc, #152]	; (8000820 <startTelnet+0xdc>)
 8000788:	f7ff ff2e 	bl	80005e8 <writeMessage>
        	writeMessage("                           88   \"             \r\n");
 800078c:	4825      	ldr	r0, [pc, #148]	; (8000824 <startTelnet+0xe0>)
 800078e:	f7ff ff2b 	bl	80005e8 <writeMessage>
        	writeMessage(".d8888b. .d8888b. 88d888b. 88aaa  dP .d8888b. \r\n");
 8000792:	4825      	ldr	r0, [pc, #148]	; (8000828 <startTelnet+0xe4>)
 8000794:	f7ff ff28 	bl	80005e8 <writeMessage>
        	writeMessage("88'    `"" 88'  `88 88'  `88 88     88 88'  `88 \r\n");
 8000798:	4824      	ldr	r0, [pc, #144]	; (800082c <startTelnet+0xe8>)
 800079a:	f7ff ff25 	bl	80005e8 <writeMessage>
        	writeMessage("88.  ... 88.  .88 88    88 88     88 88.  .88 \r\n");
 800079e:	4824      	ldr	r0, [pc, #144]	; (8000830 <startTelnet+0xec>)
 80007a0:	f7ff ff22 	bl	80005e8 <writeMessage>
        	writeMessage("`88888P' `88888P' dP    dP dP     dP `8888P88 \r\n");
 80007a4:	4823      	ldr	r0, [pc, #140]	; (8000834 <startTelnet+0xf0>)
 80007a6:	f7ff ff1f 	bl	80005e8 <writeMessage>
        	writeMessage("                                          .88 \r\n");
 80007aa:	4823      	ldr	r0, [pc, #140]	; (8000838 <startTelnet+0xf4>)
 80007ac:	f7ff ff1c 	bl	80005e8 <writeMessage>
        	writeMessage("                                      d8888P  \r\n");
 80007b0:	4822      	ldr	r0, [pc, #136]	; (800083c <startTelnet+0xf8>)
 80007b2:	f7ff ff19 	bl	80005e8 <writeMessage>
        	writeMessage("\033[37m");
 80007b6:	4822      	ldr	r0, [pc, #136]	; (8000840 <startTelnet+0xfc>)
 80007b8:	f7ff ff16 	bl	80005e8 <writeMessage>
            writeMessage("\033[32mTelnet Configuration Session\033[37m\r\n");
 80007bc:	4821      	ldr	r0, [pc, #132]	; (8000844 <startTelnet+0x100>)
 80007be:	f7ff ff13 	bl	80005e8 <writeMessage>
//          toggleLeds(readMessage()); //this is for test input of the LEDs only using command l1 and l2
            mainMenu();
 80007c2:	f7ff ff91 	bl	80006e8 <mainMenu>
            // Optionally, add a delay to avoid rapid reconnection attempts
            HAL_Delay(300);
            continue;//continue to the next iteration of loop
        }
        // Add a condition to break out of the loop or handle other logic
        if (getSn_SR(telnetSocket) != SOCK_ESTABLISHED) {
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <startTelnet+0xd0>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	3301      	adds	r3, #1
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 fa2b 	bl	8001c30 <WIZCHIP_READ>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b17      	cmp	r3, #23
 80007de:	d0bf      	beq.n	8000760 <startTelnet+0x1c>
        	break;
 80007e0:	e016      	b.n	8000810 <startTelnet+0xcc>
            close(telnetSocket);
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <startTelnet+0xd0>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f942 	bl	8000a70 <close>
            socket(telnetSocket, Sn_MR_TCP, 23, 0);
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <startTelnet+0xd0>)
 80007ee:	7818      	ldrb	r0, [r3, #0]
 80007f0:	2300      	movs	r3, #0
 80007f2:	2217      	movs	r2, #23
 80007f4:	2101      	movs	r1, #1
 80007f6:	f000 f827 	bl	8000848 <socket>
            listen(telnetSocket);
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <startTelnet+0xd0>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f9a4 	bl	8000b4c <listen>
            HAL_Delay(300);
 8000804:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000808:	f001 fd42 	bl	8002290 <HAL_Delay>
            continue;//continue to the next iteration of loop
 800080c:	bf00      	nop
        if (getSn_SR(telnetSocket) == SOCK_ESTABLISHED) {
 800080e:	e7a7      	b.n	8000760 <startTelnet+0x1c>
        }

    }
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200007bc 	.word	0x200007bc
 8000818:	0800510c 	.word	0x0800510c
 800081c:	08005114 	.word	0x08005114
 8000820:	08005118 	.word	0x08005118
 8000824:	0800514c 	.word	0x0800514c
 8000828:	08005180 	.word	0x08005180
 800082c:	080051b4 	.word	0x080051b4
 8000830:	080051e8 	.word	0x080051e8
 8000834:	0800521c 	.word	0x0800521c
 8000838:	08005250 	.word	0x08005250
 800083c:	08005284 	.word	0x08005284
 8000840:	080052b8 	.word	0x080052b8
 8000844:	080052c0 	.word	0x080052c0

08000848 <socket>:
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	4604      	mov	r4, r0
 8000850:	4608      	mov	r0, r1
 8000852:	4611      	mov	r1, r2
 8000854:	461a      	mov	r2, r3
 8000856:	4623      	mov	r3, r4
 8000858:	71fb      	strb	r3, [r7, #7]
 800085a:	4603      	mov	r3, r0
 800085c:	71bb      	strb	r3, [r7, #6]
 800085e:	460b      	mov	r3, r1
 8000860:	80bb      	strh	r3, [r7, #4]
 8000862:	4613      	mov	r3, r2
 8000864:	70fb      	strb	r3, [r7, #3]
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b08      	cmp	r3, #8
 800086a:	d902      	bls.n	8000872 <socket+0x2a>
 800086c:	f04f 33ff 	mov.w	r3, #4294967295
 8000870:	e0f0      	b.n	8000a54 <socket+0x20c>
 8000872:	79bb      	ldrb	r3, [r7, #6]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d005      	beq.n	8000884 <socket+0x3c>
 8000878:	2b00      	cmp	r3, #0
 800087a:	dd11      	ble.n	80008a0 <socket+0x58>
 800087c:	3b02      	subs	r3, #2
 800087e:	2b02      	cmp	r3, #2
 8000880:	d80e      	bhi.n	80008a0 <socket+0x58>
 8000882:	e011      	b.n	80008a8 <socket+0x60>
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2204      	movs	r2, #4
 800088a:	4619      	mov	r1, r3
 800088c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000890:	f001 fa68 	bl	8001d64 <WIZCHIP_READ_BUF>
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d105      	bne.n	80008a6 <socket+0x5e>
 800089a:	f06f 0302 	mvn.w	r3, #2
 800089e:	e0d9      	b.n	8000a54 <socket+0x20c>
 80008a0:	f06f 0304 	mvn.w	r3, #4
 80008a4:	e0d6      	b.n	8000a54 <socket+0x20c>
 80008a6:	bf00      	nop
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d002      	beq.n	80008b8 <socket+0x70>
 80008b2:	f06f 0305 	mvn.w	r3, #5
 80008b6:	e0cd      	b.n	8000a54 <socket+0x20c>
 80008b8:	78fb      	ldrb	r3, [r7, #3]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d028      	beq.n	8000910 <socket+0xc8>
 80008be:	79bb      	ldrb	r3, [r7, #6]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d002      	beq.n	80008ca <socket+0x82>
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d008      	beq.n	80008da <socket+0x92>
 80008c8:	e022      	b.n	8000910 <socket+0xc8>
 80008ca:	78fb      	ldrb	r3, [r7, #3]
 80008cc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d11a      	bne.n	800090a <socket+0xc2>
 80008d4:	f06f 0305 	mvn.w	r3, #5
 80008d8:	e0bc      	b.n	8000a54 <socket+0x20c>
 80008da:	78fb      	ldrb	r3, [r7, #3]
 80008dc:	f003 0320 	and.w	r3, r3, #32
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d006      	beq.n	80008f2 <socket+0xaa>
 80008e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	db02      	blt.n	80008f2 <socket+0xaa>
 80008ec:	f06f 0305 	mvn.w	r3, #5
 80008f0:	e0b0      	b.n	8000a54 <socket+0x20c>
 80008f2:	78fb      	ldrb	r3, [r7, #3]
 80008f4:	f003 0310 	and.w	r3, r3, #16
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d008      	beq.n	800090e <socket+0xc6>
 80008fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000900:	2b00      	cmp	r3, #0
 8000902:	db04      	blt.n	800090e <socket+0xc6>
 8000904:	f06f 0305 	mvn.w	r3, #5
 8000908:	e0a4      	b.n	8000a54 <socket+0x20c>
 800090a:	bf00      	nop
 800090c:	e000      	b.n	8000910 <socket+0xc8>
 800090e:	bf00      	nop
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f8ac 	bl	8000a70 <close>
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	3301      	adds	r3, #1
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	4618      	mov	r0, r3
 8000922:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000926:	f023 030f 	bic.w	r3, r3, #15
 800092a:	b25a      	sxtb	r2, r3
 800092c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000930:	4313      	orrs	r3, r2
 8000932:	b25b      	sxtb	r3, r3
 8000934:	b2db      	uxtb	r3, r3
 8000936:	4619      	mov	r1, r3
 8000938:	f001 f9c6 	bl	8001cc8 <WIZCHIP_WRITE>
 800093c:	88bb      	ldrh	r3, [r7, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d110      	bne.n	8000964 <socket+0x11c>
 8000942:	4b46      	ldr	r3, [pc, #280]	; (8000a5c <socket+0x214>)
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	b291      	uxth	r1, r2
 800094a:	4a44      	ldr	r2, [pc, #272]	; (8000a5c <socket+0x214>)
 800094c:	8011      	strh	r1, [r2, #0]
 800094e:	80bb      	strh	r3, [r7, #4]
 8000950:	4b42      	ldr	r3, [pc, #264]	; (8000a5c <socket+0x214>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000958:	4293      	cmp	r3, r2
 800095a:	d103      	bne.n	8000964 <socket+0x11c>
 800095c:	4b3f      	ldr	r3, [pc, #252]	; (8000a5c <socket+0x214>)
 800095e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000962:	801a      	strh	r2, [r3, #0]
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	3301      	adds	r3, #1
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000970:	461a      	mov	r2, r3
 8000972:	88bb      	ldrh	r3, [r7, #4]
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	b29b      	uxth	r3, r3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4619      	mov	r1, r3
 800097c:	4610      	mov	r0, r2
 800097e:	f001 f9a3 	bl	8001cc8 <WIZCHIP_WRITE>
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	3301      	adds	r3, #1
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800098e:	461a      	mov	r2, r3
 8000990:	88bb      	ldrh	r3, [r7, #4]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4619      	mov	r1, r3
 8000996:	4610      	mov	r0, r2
 8000998:	f001 f996 	bl	8001cc8 <WIZCHIP_WRITE>
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	3301      	adds	r3, #1
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80009a8:	2101      	movs	r1, #1
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 f98c 	bl	8001cc8 <WIZCHIP_WRITE>
 80009b0:	bf00      	nop
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	3301      	adds	r3, #1
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 f936 	bl	8001c30 <WIZCHIP_READ>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d1f3      	bne.n	80009b2 <socket+0x16a>
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2201      	movs	r2, #1
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	b21b      	sxth	r3, r3
 80009d4:	43db      	mvns	r3, r3
 80009d6:	b21a      	sxth	r2, r3
 80009d8:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <socket+0x218>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	b21b      	sxth	r3, r3
 80009de:	4013      	ands	r3, r2
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <socket+0x218>)
 80009e6:	801a      	strh	r2, [r3, #0]
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	f003 0201 	and.w	r2, r3, #1
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	b21a      	sxth	r2, r3
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <socket+0x218>)
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	b21b      	sxth	r3, r3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	b21b      	sxth	r3, r3
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <socket+0x218>)
 8000a04:	801a      	strh	r2, [r3, #0]
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	b21b      	sxth	r3, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	b21a      	sxth	r2, r3
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <socket+0x21c>)
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <socket+0x21c>)
 8000a22:	801a      	strh	r2, [r3, #0]
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <socket+0x220>)
 8000a28:	2100      	movs	r1, #0
 8000a2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <socket+0x224>)
 8000a32:	2100      	movs	r1, #0
 8000a34:	54d1      	strb	r1, [r2, r3]
 8000a36:	bf00      	nop
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 f8f3 	bl	8001c30 <WIZCHIP_READ>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d0f3      	beq.n	8000a38 <socket+0x1f0>
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	4618      	mov	r0, r3
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd90      	pop	{r4, r7, pc}
 8000a5c:	2000001c 	.word	0x2000001c
 8000a60:	200007be 	.word	0x200007be
 8000a64:	200007c0 	.word	0x200007c0
 8000a68:	200007c4 	.word	0x200007c4
 8000a6c:	200007d4 	.word	0x200007d4

08000a70 <close>:
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b08      	cmp	r3, #8
 8000a7e:	d902      	bls.n	8000a86 <close+0x16>
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
 8000a84:	e055      	b.n	8000b32 <close+0xc2>
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a92:	2110      	movs	r1, #16
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 f917 	bl	8001cc8 <WIZCHIP_WRITE>
 8000a9a:	bf00      	nop
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 f8c1 	bl	8001c30 <WIZCHIP_READ>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d1f3      	bne.n	8000a9c <close+0x2c>
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	3301      	adds	r3, #1
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ac0:	211f      	movs	r1, #31
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 f900 	bl	8001cc8 <WIZCHIP_WRITE>
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2201      	movs	r2, #1
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	b21b      	sxth	r3, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	b21a      	sxth	r2, r3
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <close+0xcc>)
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	4013      	ands	r3, r2
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <close+0xcc>)
 8000ae4:	801a      	strh	r2, [r3, #0]
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	b21a      	sxth	r2, r3
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <close+0xd0>)
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	4013      	ands	r3, r2
 8000afc:	b21b      	sxth	r3, r3
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <close+0xd0>)
 8000b02:	801a      	strh	r2, [r3, #0]
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <close+0xd4>)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <close+0xd8>)
 8000b12:	2100      	movs	r1, #0
 8000b14:	54d1      	strb	r1, [r2, r3]
 8000b16:	bf00      	nop
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 f883 	bl	8001c30 <WIZCHIP_READ>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1f3      	bne.n	8000b18 <close+0xa8>
 8000b30:	2301      	movs	r3, #1
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200007be 	.word	0x200007be
 8000b40:	200007c0 	.word	0x200007c0
 8000b44:	200007c4 	.word	0x200007c4
 8000b48:	200007d4 	.word	0x200007d4

08000b4c <listen>:
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b08      	cmp	r3, #8
 8000b5a:	d902      	bls.n	8000b62 <listen+0x16>
 8000b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b60:	e049      	b.n	8000bf6 <listen+0xaa>
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	3301      	adds	r3, #1
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 f860 	bl	8001c30 <WIZCHIP_READ>
 8000b70:	4603      	mov	r3, r0
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d002      	beq.n	8000b80 <listen+0x34>
 8000b7a:	f06f 0304 	mvn.w	r3, #4
 8000b7e:	e03a      	b.n	8000bf6 <listen+0xaa>
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	3301      	adds	r3, #1
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f001 f84f 	bl	8001c30 <WIZCHIP_READ>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b13      	cmp	r3, #19
 8000b96:	d002      	beq.n	8000b9e <listen+0x52>
 8000b98:	f06f 0302 	mvn.w	r3, #2
 8000b9c:	e02b      	b.n	8000bf6 <listen+0xaa>
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000baa:	2102      	movs	r1, #2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 f88b 	bl	8001cc8 <WIZCHIP_WRITE>
 8000bb2:	bf00      	nop
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	3301      	adds	r3, #1
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f001 f835 	bl	8001c30 <WIZCHIP_READ>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d1f3      	bne.n	8000bb4 <listen+0x68>
 8000bcc:	e006      	b.n	8000bdc <listen+0x90>
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff4d 	bl	8000a70 <close>
 8000bd6:	f06f 0303 	mvn.w	r3, #3
 8000bda:	e00c      	b.n	8000bf6 <listen+0xaa>
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	3301      	adds	r3, #1
 8000be2:	00db      	lsls	r3, r3, #3
 8000be4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 f821 	bl	8001c30 <WIZCHIP_READ>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b14      	cmp	r3, #20
 8000bf2:	d1ec      	bne.n	8000bce <listen+0x82>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <send>:
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	80bb      	strh	r3, [r7, #4]
 8000c10:	2300      	movs	r3, #0
 8000c12:	73fb      	strb	r3, [r7, #15]
 8000c14:	2300      	movs	r3, #0
 8000c16:	81bb      	strh	r3, [r7, #12]
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	2b08      	cmp	r3, #8
 8000c1c:	d902      	bls.n	8000c24 <send+0x24>
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c22:	e0de      	b.n	8000de2 <send+0x1e2>
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	3301      	adds	r3, #1
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 ffff 	bl	8001c30 <WIZCHIP_READ>
 8000c32:	4603      	mov	r3, r0
 8000c34:	f003 030f 	and.w	r3, r3, #15
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d002      	beq.n	8000c42 <send+0x42>
 8000c3c:	f06f 0304 	mvn.w	r3, #4
 8000c40:	e0cf      	b.n	8000de2 <send+0x1e2>
 8000c42:	88bb      	ldrh	r3, [r7, #4]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <send+0x4e>
 8000c48:	f06f 030d 	mvn.w	r3, #13
 8000c4c:	e0c9      	b.n	8000de2 <send+0x1e2>
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	3301      	adds	r3, #1
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 ffe8 	bl	8001c30 <WIZCHIP_READ>
 8000c60:	4603      	mov	r3, r0
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	2b17      	cmp	r3, #23
 8000c68:	d005      	beq.n	8000c76 <send+0x76>
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	2b1c      	cmp	r3, #28
 8000c6e:	d002      	beq.n	8000c76 <send+0x76>
 8000c70:	f06f 0306 	mvn.w	r3, #6
 8000c74:	e0b5      	b.n	8000de2 <send+0x1e2>
 8000c76:	4b5d      	ldr	r3, [pc, #372]	; (8000dec <send+0x1ec>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	fa42 f303 	asr.w	r3, r2, r3
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d039      	beq.n	8000cfe <send+0xfe>
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	3301      	adds	r3, #1
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 ffca 	bl	8001c30 <WIZCHIP_READ>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	f003 031f 	and.w	r3, r3, #31
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	f003 0310 	and.w	r3, r3, #16
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d019      	beq.n	8000ce2 <send+0xe2>
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000cba:	2110      	movs	r1, #16
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 f803 	bl	8001cc8 <WIZCHIP_WRITE>
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	b21a      	sxth	r2, r3
 8000cd0:	4b46      	ldr	r3, [pc, #280]	; (8000dec <send+0x1ec>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	4b43      	ldr	r3, [pc, #268]	; (8000dec <send+0x1ec>)
 8000cde:	801a      	strh	r2, [r3, #0]
 8000ce0:	e00d      	b.n	8000cfe <send+0xfe>
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	f003 0308 	and.w	r3, r3, #8
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d006      	beq.n	8000cfa <send+0xfa>
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff febe 	bl	8000a70 <close>
 8000cf4:	f06f 030c 	mvn.w	r3, #12
 8000cf8:	e073      	b.n	8000de2 <send+0x1e2>
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e071      	b.n	8000de2 <send+0x1e2>
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	3301      	adds	r3, #1
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 ff90 	bl	8001c30 <WIZCHIP_READ>
 8000d10:	4603      	mov	r3, r0
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	029b      	lsls	r3, r3, #10
 8000d16:	81bb      	strh	r3, [r7, #12]
 8000d18:	88ba      	ldrh	r2, [r7, #4]
 8000d1a:	89bb      	ldrh	r3, [r7, #12]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d901      	bls.n	8000d24 <send+0x124>
 8000d20:	89bb      	ldrh	r3, [r7, #12]
 8000d22:	80bb      	strh	r3, [r7, #4]
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f001 f8dc 	bl	8001ee4 <getSn_TX_FSR>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	81bb      	strh	r3, [r7, #12]
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	3301      	adds	r3, #1
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 ff77 	bl	8001c30 <WIZCHIP_READ>
 8000d42:	4603      	mov	r3, r0
 8000d44:	73fb      	strb	r3, [r7, #15]
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	2b17      	cmp	r3, #23
 8000d4a:	d009      	beq.n	8000d60 <send+0x160>
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	2b1c      	cmp	r3, #28
 8000d50:	d006      	beq.n	8000d60 <send+0x160>
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fe8b 	bl	8000a70 <close>
 8000d5a:	f06f 0306 	mvn.w	r3, #6
 8000d5e:	e040      	b.n	8000de2 <send+0x1e2>
 8000d60:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <send+0x1f0>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	fa42 f303 	asr.w	r3, r2, r3
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d005      	beq.n	8000d80 <send+0x180>
 8000d74:	88ba      	ldrh	r2, [r7, #4]
 8000d76:	89bb      	ldrh	r3, [r7, #12]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d901      	bls.n	8000d80 <send+0x180>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e030      	b.n	8000de2 <send+0x1e2>
 8000d80:	88ba      	ldrh	r2, [r7, #4]
 8000d82:	89bb      	ldrh	r3, [r7, #12]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d900      	bls.n	8000d8a <send+0x18a>
 8000d88:	e7cc      	b.n	8000d24 <send+0x124>
 8000d8a:	bf00      	nop
 8000d8c:	88ba      	ldrh	r2, [r7, #4]
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	6839      	ldr	r1, [r7, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 f93c 	bl	8002010 <wiz_send_data>
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000da4:	2120      	movs	r1, #32
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 ff8e 	bl	8001cc8 <WIZCHIP_WRITE>
 8000dac:	bf00      	nop
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	3301      	adds	r3, #1
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 ff38 	bl	8001c30 <WIZCHIP_READ>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f3      	bne.n	8000dae <send+0x1ae>
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	b21a      	sxth	r2, r3
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <send+0x1ec>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	b21b      	sxth	r3, r3
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <send+0x1ec>)
 8000dde:	801a      	strh	r2, [r3, #0]
 8000de0:	88bb      	ldrh	r3, [r7, #4]
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200007c0 	.word	0x200007c0
 8000df0:	200007be 	.word	0x200007be

08000df4 <recv>:
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	4613      	mov	r3, r2
 8000e02:	80bb      	strh	r3, [r7, #4]
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	2300      	movs	r3, #0
 8000e0a:	81bb      	strh	r3, [r7, #12]
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	2b08      	cmp	r3, #8
 8000e10:	d902      	bls.n	8000e18 <recv+0x24>
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	e09c      	b.n	8000f52 <recv+0x15e>
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 ff05 	bl	8001c30 <WIZCHIP_READ>
 8000e26:	4603      	mov	r3, r0
 8000e28:	f003 030f 	and.w	r3, r3, #15
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d002      	beq.n	8000e36 <recv+0x42>
 8000e30:	f06f 0304 	mvn.w	r3, #4
 8000e34:	e08d      	b.n	8000f52 <recv+0x15e>
 8000e36:	88bb      	ldrh	r3, [r7, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <recv+0x4e>
 8000e3c:	f06f 030d 	mvn.w	r3, #13
 8000e40:	e087      	b.n	8000f52 <recv+0x15e>
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	3301      	adds	r3, #1
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 feee 	bl	8001c30 <WIZCHIP_READ>
 8000e54:	4603      	mov	r3, r0
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	029b      	lsls	r3, r3, #10
 8000e5a:	81bb      	strh	r3, [r7, #12]
 8000e5c:	89ba      	ldrh	r2, [r7, #12]
 8000e5e:	88bb      	ldrh	r3, [r7, #4]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d201      	bcs.n	8000e68 <recv+0x74>
 8000e64:	89bb      	ldrh	r3, [r7, #12]
 8000e66:	80bb      	strh	r3, [r7, #4]
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 f885 	bl	8001f7a <getSn_RX_RSR>
 8000e70:	4603      	mov	r3, r0
 8000e72:	81bb      	strh	r3, [r7, #12]
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	3301      	adds	r3, #1
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 fed5 	bl	8001c30 <WIZCHIP_READ>
 8000e86:	4603      	mov	r3, r0
 8000e88:	73fb      	strb	r3, [r7, #15]
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	2b17      	cmp	r3, #23
 8000e8e:	d026      	beq.n	8000ede <recv+0xea>
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	2b1c      	cmp	r3, #28
 8000e94:	d11c      	bne.n	8000ed0 <recv+0xdc>
 8000e96:	89bb      	ldrh	r3, [r7, #12]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d133      	bne.n	8000f04 <recv+0x110>
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f001 f820 	bl	8001ee4 <getSn_TX_FSR>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461c      	mov	r4, r3
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	3301      	adds	r3, #1
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 febb 	bl	8001c30 <WIZCHIP_READ>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	029b      	lsls	r3, r3, #10
 8000ebe:	429c      	cmp	r4, r3
 8000ec0:	d10d      	bne.n	8000ede <recv+0xea>
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fdd3 	bl	8000a70 <close>
 8000eca:	f06f 0306 	mvn.w	r3, #6
 8000ece:	e040      	b.n	8000f52 <recv+0x15e>
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fdcc 	bl	8000a70 <close>
 8000ed8:	f06f 0306 	mvn.w	r3, #6
 8000edc:	e039      	b.n	8000f52 <recv+0x15e>
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <recv+0x168>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	fa42 f303 	asr.w	r3, r2, r3
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d004      	beq.n	8000efc <recv+0x108>
 8000ef2:	89bb      	ldrh	r3, [r7, #12]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d101      	bne.n	8000efc <recv+0x108>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	e02a      	b.n	8000f52 <recv+0x15e>
 8000efc:	89bb      	ldrh	r3, [r7, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d102      	bne.n	8000f08 <recv+0x114>
 8000f02:	e7b1      	b.n	8000e68 <recv+0x74>
 8000f04:	bf00      	nop
 8000f06:	e000      	b.n	8000f0a <recv+0x116>
 8000f08:	bf00      	nop
 8000f0a:	89ba      	ldrh	r2, [r7, #12]
 8000f0c:	88bb      	ldrh	r3, [r7, #4]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d201      	bcs.n	8000f16 <recv+0x122>
 8000f12:	89bb      	ldrh	r3, [r7, #12]
 8000f14:	80bb      	strh	r3, [r7, #4]
 8000f16:	88ba      	ldrh	r2, [r7, #4]
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	6839      	ldr	r1, [r7, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 f8d3 	bl	80020c8 <wiz_recv_data>
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	3301      	adds	r3, #1
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f2e:	2140      	movs	r1, #64	; 0x40
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 fec9 	bl	8001cc8 <WIZCHIP_WRITE>
 8000f36:	bf00      	nop
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 fe73 	bl	8001c30 <WIZCHIP_READ>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1f3      	bne.n	8000f38 <recv+0x144>
 8000f50:	88bb      	ldrh	r3, [r7, #4]
 8000f52:	4618      	mov	r0, r3
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd90      	pop	{r4, r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200007be 	.word	0x200007be

08000f60 <wizchip_select>:
#include "wizchip_conf.h"
#include "stdio.h"

extern SPI_HandleTypeDef hspi1;

void wizchip_select(void){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2102      	movs	r1, #2
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <wizchip_select+0x14>)
 8000f6a:	f001 fc34 	bl	80027d6 <HAL_GPIO_WritePin>
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40010800 	.word	0x40010800

08000f78 <wizchip_deselect>:

void wizchip_deselect(void){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2102      	movs	r1, #2
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <wizchip_deselect+0x14>)
 8000f82:	f001 fc28 	bl	80027d6 <HAL_GPIO_WritePin>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40010800 	.word	0x40010800

08000f90 <wizchip_read>:
// Single byte read function
uint8_t wizchip_read(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
    uint8_t rbuf;
    HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 8000f96:	1df9      	adds	r1, r7, #7
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <wizchip_read+0x20>)
 8000fa0:	f002 f9fd 	bl	800339e <HAL_SPI_Receive>
    return rbuf;
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000364 	.word	0x20000364

08000fb4 <wizchip_write>:

// Single byte write function
void wizchip_write(uint8_t b) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 8000fbe:	1df9      	adds	r1, r7, #7
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <wizchip_write+0x20>)
 8000fc8:	f002 f8a6 	bl	8003118 <HAL_SPI_Transmit>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000364 	.word	0x20000364

08000fd8 <wizchip_read_burst>:

// Read burst function
void wizchip_read_burst(uint8_t* pBuf, uint16_t len) {
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < len; i++) {
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	81fb      	strh	r3, [r7, #14]
 8000fe8:	e009      	b.n	8000ffe <wizchip_read_burst+0x26>
        pBuf[i] = wizchip_read();
 8000fea:	89fb      	ldrh	r3, [r7, #14]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	18d4      	adds	r4, r2, r3
 8000ff0:	f7ff ffce 	bl	8000f90 <wizchip_read>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < len; i++) {
 8000ff8:	89fb      	ldrh	r3, [r7, #14]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	81fb      	strh	r3, [r7, #14]
 8000ffe:	89fa      	ldrh	r2, [r7, #14]
 8001000:	887b      	ldrh	r3, [r7, #2]
 8001002:	429a      	cmp	r2, r3
 8001004:	d3f1      	bcc.n	8000fea <wizchip_read_burst+0x12>
    }
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bd90      	pop	{r4, r7, pc}

08001010 <wizchip_write_burst>:

// Write burst function
void wizchip_write_burst(uint8_t* pBuf, uint16_t len) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < len; i++) {
 800101c:	2300      	movs	r3, #0
 800101e:	81fb      	strh	r3, [r7, #14]
 8001020:	e009      	b.n	8001036 <wizchip_write_burst+0x26>
        wizchip_write(pBuf[i]);
 8001022:	89fb      	ldrh	r3, [r7, #14]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	4413      	add	r3, r2
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ffc2 	bl	8000fb4 <wizchip_write>
    for (uint16_t i = 0; i < len; i++) {
 8001030:	89fb      	ldrh	r3, [r7, #14]
 8001032:	3301      	adds	r3, #1
 8001034:	81fb      	strh	r3, [r7, #14]
 8001036:	89fa      	ldrh	r2, [r7, #14]
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	429a      	cmp	r2, r3
 800103c:	d3f1      	bcc.n	8001022 <wizchip_write_burst+0x12>
    }
}
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <resetW5500>:

void resetW5500(){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
	uint8_t tmp;
	//send pulse on reset pin
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2101      	movs	r1, #1
 8001052:	480a      	ldr	r0, [pc, #40]	; (800107c <resetW5500+0x34>)
 8001054:	f001 fbbf 	bl	80027d6 <HAL_GPIO_WritePin>
	tmp=0xff;
 8001058:	23ff      	movs	r3, #255	; 0xff
 800105a:	71fb      	strb	r3, [r7, #7]
	while(tmp--);//small delay
 800105c:	bf00      	nop
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	1e5a      	subs	r2, r3, #1
 8001062:	71fa      	strb	r2, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1fa      	bne.n	800105e <resetW5500+0x16>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	2101      	movs	r1, #1
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <resetW5500+0x34>)
 800106e:	f001 fbb2 	bl	80027d6 <HAL_GPIO_WritePin>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40010800 	.word	0x40010800

08001080 <W5500Init>:

void W5500Init(){
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0

	uint8_t memsize[2][8]={{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <W5500Init+0x50>)
 8001088:	463c      	mov	r4, r7
 800108a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800108c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);//Chip Select high by default
 8001090:	2201      	movs	r2, #1
 8001092:	2102      	movs	r1, #2
 8001094:	480f      	ldr	r0, [pc, #60]	; (80010d4 <W5500Init+0x54>)
 8001096:	f001 fb9e 	bl	80027d6 <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 800109a:	490f      	ldr	r1, [pc, #60]	; (80010d8 <W5500Init+0x58>)
 800109c:	480f      	ldr	r0, [pc, #60]	; (80010dc <W5500Init+0x5c>)
 800109e:	f000 f881 	bl	80011a4 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 80010a2:	490f      	ldr	r1, [pc, #60]	; (80010e0 <W5500Init+0x60>)
 80010a4:	480f      	ldr	r0, [pc, #60]	; (80010e4 <W5500Init+0x64>)
 80010a6:	f000 f8a1 	bl	80011ec <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_read_burst, wizchip_write_burst);
 80010aa:	490f      	ldr	r1, [pc, #60]	; (80010e8 <W5500Init+0x68>)
 80010ac:	480f      	ldr	r0, [pc, #60]	; (80010ec <W5500Init+0x6c>)
 80010ae:	f000 f8c9 	bl	8001244 <reg_wizchip_spiburst_cbfunc>

	if(ctlwizchip(CW_INIT_WIZCHIP, (void*)memsize)==-1){
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	2001      	movs	r0, #1
 80010b8:	f000 f8f0 	bl	800129c <ctlwizchip>
 80010bc:	4603      	mov	r3, r0
 80010be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c2:	d100      	bne.n	80010c6 <W5500Init+0x46>
//		printf("wizchip Initialization failed\r\n");
		while(1);
 80010c4:	e7fe      	b.n	80010c4 <W5500Init+0x44>
	}
//	printf("wizchip initialization success\r\n");

}
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd90      	pop	{r4, r7, pc}
 80010ce:	bf00      	nop
 80010d0:	080052ec 	.word	0x080052ec
 80010d4:	40010800 	.word	0x40010800
 80010d8:	08000f79 	.word	0x08000f79
 80010dc:	08000f61 	.word	0x08000f61
 80010e0:	08000fb5 	.word	0x08000fb5
 80010e4:	08000f91 	.word	0x08000f91
 80010e8:	08001011 	.word	0x08001011
 80010ec:	08000fd9 	.word	0x08000fd9

080010f0 <wizchip_cris_enter>:
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <wizchip_cris_exit>:
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <wizchip_cs_select>:
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <wizchip_cs_deselect>:
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <wizchip_bus_readdata>:
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <wizchip_bus_writedata>:
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	70fb      	strb	r3, [r7, #3]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	78fa      	ldrb	r2, [r7, #3]
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <wizchip_spi_readbyte>:
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
 8001158:	2300      	movs	r3, #0
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <wizchip_spi_writebyte>:
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <wizchip_spi_readburst>:
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	807b      	strh	r3, [r7, #2]
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <wizchip_spi_writeburst>:
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
	...

080011a4 <reg_wizchip_cs_cbfunc>:
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <reg_wizchip_cs_cbfunc+0x16>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d106      	bne.n	80011c8 <reg_wizchip_cs_cbfunc+0x24>
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <reg_wizchip_cs_cbfunc+0x3c>)
 80011bc:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <reg_wizchip_cs_cbfunc+0x40>)
 80011be:	615a      	str	r2, [r3, #20]
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <reg_wizchip_cs_cbfunc+0x3c>)
 80011c2:	4a09      	ldr	r2, [pc, #36]	; (80011e8 <reg_wizchip_cs_cbfunc+0x44>)
 80011c4:	619a      	str	r2, [r3, #24]
 80011c6:	e006      	b.n	80011d6 <reg_wizchip_cs_cbfunc+0x32>
 80011c8:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <reg_wizchip_cs_cbfunc+0x3c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6153      	str	r3, [r2, #20]
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <reg_wizchip_cs_cbfunc+0x3c>)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	20000020 	.word	0x20000020
 80011e4:	08001109 	.word	0x08001109
 80011e8:	08001115 	.word	0x08001115

080011ec <reg_wizchip_spi_cbfunc>:
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	bf00      	nop
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <reg_wizchip_spi_cbfunc+0x4c>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f9      	beq.n	80011f8 <reg_wizchip_spi_cbfunc+0xc>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <reg_wizchip_spi_cbfunc+0x24>
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d106      	bne.n	800121e <reg_wizchip_spi_cbfunc+0x32>
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <reg_wizchip_spi_cbfunc+0x4c>)
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <reg_wizchip_spi_cbfunc+0x50>)
 8001214:	61da      	str	r2, [r3, #28]
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <reg_wizchip_spi_cbfunc+0x4c>)
 8001218:	4a09      	ldr	r2, [pc, #36]	; (8001240 <reg_wizchip_spi_cbfunc+0x54>)
 800121a:	621a      	str	r2, [r3, #32]
 800121c:	e006      	b.n	800122c <reg_wizchip_spi_cbfunc+0x40>
 800121e:	4a06      	ldr	r2, [pc, #24]	; (8001238 <reg_wizchip_spi_cbfunc+0x4c>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	61d3      	str	r3, [r2, #28]
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <reg_wizchip_spi_cbfunc+0x4c>)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	6213      	str	r3, [r2, #32]
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000020 	.word	0x20000020
 800123c:	08001155 	.word	0x08001155
 8001240:	08001163 	.word	0x08001163

08001244 <reg_wizchip_spiburst_cbfunc>:
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	bf00      	nop
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f9      	beq.n	8001250 <reg_wizchip_spiburst_cbfunc+0xc>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <reg_wizchip_spiburst_cbfunc+0x24>
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d106      	bne.n	8001276 <reg_wizchip_spiburst_cbfunc+0x32>
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <reg_wizchip_spiburst_cbfunc+0x50>)
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001270:	4a09      	ldr	r2, [pc, #36]	; (8001298 <reg_wizchip_spiburst_cbfunc+0x54>)
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
 8001274:	e006      	b.n	8001284 <reg_wizchip_spiburst_cbfunc+0x40>
 8001276:	4a06      	ldr	r2, [pc, #24]	; (8001290 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6253      	str	r3, [r2, #36]	; 0x24
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	6293      	str	r3, [r2, #40]	; 0x28
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000020 	.word	0x20000020
 8001294:	08001177 	.word	0x08001177
 8001298:	0800118d 	.word	0x0800118d

0800129c <ctlwizchip>:
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
 80012a8:	2300      	movs	r3, #0
 80012aa:	75fb      	strb	r3, [r7, #23]
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b0f      	cmp	r3, #15
 80012b8:	f200 80c7 	bhi.w	800144a <ctlwizchip+0x1ae>
 80012bc:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <ctlwizchip+0x28>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	08001305 	.word	0x08001305
 80012c8:	0800130b 	.word	0x0800130b
 80012cc:	08001337 	.word	0x08001337
 80012d0:	0800132b 	.word	0x0800132b
 80012d4:	08001345 	.word	0x08001345
 80012d8:	08001351 	.word	0x08001351
 80012dc:	0800135f 	.word	0x0800135f
 80012e0:	08001385 	.word	0x08001385
 80012e4:	080013ab 	.word	0x080013ab
 80012e8:	080013ef 	.word	0x080013ef
 80012ec:	080013f5 	.word	0x080013f5
 80012f0:	080013fd 	.word	0x080013fd
 80012f4:	08001451 	.word	0x08001451
 80012f8:	08001405 	.word	0x08001405
 80012fc:	08001413 	.word	0x08001413
 8001300:	0800142f 	.word	0x0800142f
 8001304:	f000 f8ea 	bl	80014dc <wizchip_sw_reset>
 8001308:	e0a3      	b.n	8001452 <ctlwizchip+0x1b6>
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d004      	beq.n	800131a <ctlwizchip+0x7e>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3308      	adds	r3, #8
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f000 f927 	bl	8001574 <wizchip_init>
 8001326:	4603      	mov	r3, r0
 8001328:	e094      	b.n	8001454 <ctlwizchip+0x1b8>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f9ac 	bl	800168c <wizchip_clrinterrupt>
 8001334:	e08d      	b.n	8001452 <ctlwizchip+0x1b6>
 8001336:	f000 f9dd 	bl	80016f4 <wizchip_getinterrupt>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	801a      	strh	r2, [r3, #0]
 8001342:	e086      	b.n	8001452 <ctlwizchip+0x1b6>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f000 f9f8 	bl	800173e <wizchip_setinterruptmask>
 800134e:	e080      	b.n	8001452 <ctlwizchip+0x1b6>
 8001350:	f000 fa10 	bl	8001774 <wizchip_getinterruptmask>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	801a      	strh	r2, [r3, #0]
 800135c:	e079      	b.n	8001452 <ctlwizchip+0x1b6>
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	b29b      	uxth	r3, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	4619      	mov	r1, r3
 800136a:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800136e:	f000 fcab 	bl	8001cc8 <WIZCHIP_WRITE>
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	4619      	mov	r1, r3
 800137a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800137e:	f000 fca3 	bl	8001cc8 <WIZCHIP_WRITE>
 8001382:	e066      	b.n	8001452 <ctlwizchip+0x1b6>
 8001384:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8001388:	f000 fc52 	bl	8001c30 <WIZCHIP_READ>
 800138c:	4603      	mov	r3, r0
 800138e:	b29b      	uxth	r3, r3
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	b29c      	uxth	r4, r3
 8001394:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001398:	f000 fc4a 	bl	8001c30 <WIZCHIP_READ>
 800139c:	4603      	mov	r3, r0
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4423      	add	r3, r4
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	801a      	strh	r2, [r3, #0]
 80013a8:	e053      	b.n	8001452 <ctlwizchip+0x1b6>
 80013aa:	4b2c      	ldr	r3, [pc, #176]	; (800145c <ctlwizchip+0x1c0>)
 80013ac:	789a      	ldrb	r2, [r3, #2]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	701a      	strb	r2, [r3, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	4a29      	ldr	r2, [pc, #164]	; (800145c <ctlwizchip+0x1c0>)
 80013b8:	78d2      	ldrb	r2, [r2, #3]
 80013ba:	701a      	strb	r2, [r3, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	3302      	adds	r3, #2
 80013c0:	4a26      	ldr	r2, [pc, #152]	; (800145c <ctlwizchip+0x1c0>)
 80013c2:	7912      	ldrb	r2, [r2, #4]
 80013c4:	701a      	strb	r2, [r3, #0]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	3303      	adds	r3, #3
 80013ca:	4a24      	ldr	r2, [pc, #144]	; (800145c <ctlwizchip+0x1c0>)
 80013cc:	7952      	ldrb	r2, [r2, #5]
 80013ce:	701a      	strb	r2, [r3, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	3304      	adds	r3, #4
 80013d4:	4a21      	ldr	r2, [pc, #132]	; (800145c <ctlwizchip+0x1c0>)
 80013d6:	7992      	ldrb	r2, [r2, #6]
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3305      	adds	r3, #5
 80013de:	4a1f      	ldr	r2, [pc, #124]	; (800145c <ctlwizchip+0x1c0>)
 80013e0:	79d2      	ldrb	r2, [r2, #7]
 80013e2:	701a      	strb	r2, [r3, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	3306      	adds	r3, #6
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
 80013ec:	e031      	b.n	8001452 <ctlwizchip+0x1b6>
 80013ee:	f000 fa13 	bl	8001818 <wizphy_reset>
 80013f2:	e02e      	b.n	8001452 <ctlwizchip+0x1b6>
 80013f4:	6838      	ldr	r0, [r7, #0]
 80013f6:	f000 fa36 	bl	8001866 <wizphy_setphyconf>
 80013fa:	e02a      	b.n	8001452 <ctlwizchip+0x1b6>
 80013fc:	6838      	ldr	r0, [r7, #0]
 80013fe:	f000 fa75 	bl	80018ec <wizphy_getphyconf>
 8001402:	e026      	b.n	8001452 <ctlwizchip+0x1b6>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f000 fad9 	bl	80019c0 <wizphy_setphypmode>
 800140e:	4603      	mov	r3, r0
 8001410:	e020      	b.n	8001454 <ctlwizchip+0x1b8>
 8001412:	f000 f9e8 	bl	80017e6 <wizphy_getphypmode>
 8001416:	4603      	mov	r3, r0
 8001418:	75fb      	strb	r3, [r7, #23]
 800141a:	7dfb      	ldrb	r3, [r7, #23]
 800141c:	2bff      	cmp	r3, #255	; 0xff
 800141e:	d102      	bne.n	8001426 <ctlwizchip+0x18a>
 8001420:	f04f 33ff 	mov.w	r3, #4294967295
 8001424:	e016      	b.n	8001454 <ctlwizchip+0x1b8>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	7dfa      	ldrb	r2, [r7, #23]
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	e011      	b.n	8001452 <ctlwizchip+0x1b6>
 800142e:	f000 f9c4 	bl	80017ba <wizphy_getphylink>
 8001432:	4603      	mov	r3, r0
 8001434:	75fb      	strb	r3, [r7, #23]
 8001436:	7dfb      	ldrb	r3, [r7, #23]
 8001438:	2bff      	cmp	r3, #255	; 0xff
 800143a:	d102      	bne.n	8001442 <ctlwizchip+0x1a6>
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	e008      	b.n	8001454 <ctlwizchip+0x1b8>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	7dfa      	ldrb	r2, [r7, #23]
 8001446:	701a      	strb	r2, [r3, #0]
 8001448:	e003      	b.n	8001452 <ctlwizchip+0x1b6>
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e001      	b.n	8001454 <ctlwizchip+0x1b8>
 8001450:	bf00      	nop
 8001452:	2300      	movs	r3, #0
 8001454:	4618      	mov	r0, r3
 8001456:	371c      	adds	r7, #28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	20000020 	.word	0x20000020

08001460 <ctlnetwork>:
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	2b05      	cmp	r3, #5
 8001470:	d82c      	bhi.n	80014cc <ctlnetwork+0x6c>
 8001472:	a201      	add	r2, pc, #4	; (adr r2, 8001478 <ctlnetwork+0x18>)
 8001474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001478:	08001491 	.word	0x08001491
 800147c:	08001499 	.word	0x08001499
 8001480:	080014a1 	.word	0x080014a1
 8001484:	080014af 	.word	0x080014af
 8001488:	080014bd 	.word	0x080014bd
 800148c:	080014c5 	.word	0x080014c5
 8001490:	6838      	ldr	r0, [r7, #0]
 8001492:	f000 fadf 	bl	8001a54 <wizchip_setnetinfo>
 8001496:	e01c      	b.n	80014d2 <ctlnetwork+0x72>
 8001498:	6838      	ldr	r0, [r7, #0]
 800149a:	f000 fb1b 	bl	8001ad4 <wizchip_getnetinfo>
 800149e:	e018      	b.n	80014d2 <ctlnetwork+0x72>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 fb55 	bl	8001b54 <wizchip_setnetmode>
 80014aa:	4603      	mov	r3, r0
 80014ac:	e012      	b.n	80014d4 <ctlnetwork+0x74>
 80014ae:	f000 fb73 	bl	8001b98 <wizchip_getnetmode>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	e00a      	b.n	80014d2 <ctlnetwork+0x72>
 80014bc:	6838      	ldr	r0, [r7, #0]
 80014be:	f000 fb73 	bl	8001ba8 <wizchip_settimeout>
 80014c2:	e006      	b.n	80014d2 <ctlnetwork+0x72>
 80014c4:	6838      	ldr	r0, [r7, #0]
 80014c6:	f000 fb90 	bl	8001bea <wizchip_gettimeout>
 80014ca:	e002      	b.n	80014d2 <ctlnetwork+0x72>
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
 80014d0:	e000      	b.n	80014d4 <ctlnetwork+0x74>
 80014d2:	2300      	movs	r3, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <wizchip_sw_reset>:
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2206      	movs	r2, #6
 80014e6:	4619      	mov	r1, r3
 80014e8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80014ec:	f000 fc3a 	bl	8001d64 <WIZCHIP_READ_BUF>
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2204      	movs	r2, #4
 80014f6:	4619      	mov	r1, r3
 80014f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014fc:	f000 fc32 	bl	8001d64 <WIZCHIP_READ_BUF>
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	2204      	movs	r2, #4
 8001506:	4619      	mov	r1, r3
 8001508:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800150c:	f000 fc2a 	bl	8001d64 <WIZCHIP_READ_BUF>
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2204      	movs	r2, #4
 8001516:	4619      	mov	r1, r3
 8001518:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800151c:	f000 fc22 	bl	8001d64 <WIZCHIP_READ_BUF>
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	2000      	movs	r0, #0
 8001524:	f000 fbd0 	bl	8001cc8 <WIZCHIP_WRITE>
 8001528:	2000      	movs	r0, #0
 800152a:	f000 fb81 	bl	8001c30 <WIZCHIP_READ>
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2206      	movs	r2, #6
 8001532:	4619      	mov	r1, r3
 8001534:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001538:	f000 fc74 	bl	8001e24 <WIZCHIP_WRITE_BUF>
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2204      	movs	r2, #4
 8001542:	4619      	mov	r1, r3
 8001544:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001548:	f000 fc6c 	bl	8001e24 <WIZCHIP_WRITE_BUF>
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	2204      	movs	r2, #4
 8001552:	4619      	mov	r1, r3
 8001554:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001558:	f000 fc64 	bl	8001e24 <WIZCHIP_WRITE_BUF>
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	2204      	movs	r2, #4
 8001562:	4619      	mov	r1, r3
 8001564:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001568:	f000 fc5c 	bl	8001e24 <WIZCHIP_WRITE_BUF>
 800156c:	bf00      	nop
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <wizchip_init>:
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	2300      	movs	r3, #0
 8001580:	73bb      	strb	r3, [r7, #14]
 8001582:	f7ff ffab 	bl	80014dc <wizchip_sw_reset>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d03b      	beq.n	8001604 <wizchip_init+0x90>
 800158c:	2300      	movs	r3, #0
 800158e:	73bb      	strb	r3, [r7, #14]
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
 8001594:	e015      	b.n	80015c2 <wizchip_init+0x4e>
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	781a      	ldrb	r2, [r3, #0]
 80015a0:	7bbb      	ldrb	r3, [r7, #14]
 80015a2:	4413      	add	r3, r2
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	73bb      	strb	r3, [r7, #14]
 80015a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015ac:	2b10      	cmp	r3, #16
 80015ae:	dd02      	ble.n	80015b6 <wizchip_init+0x42>
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295
 80015b4:	e066      	b.n	8001684 <wizchip_init+0x110>
 80015b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c6:	2b07      	cmp	r3, #7
 80015c8:	dde5      	ble.n	8001596 <wizchip_init+0x22>
 80015ca:	2300      	movs	r3, #0
 80015cc:	73fb      	strb	r3, [r7, #15]
 80015ce:	e015      	b.n	80015fc <wizchip_init+0x88>
 80015d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	3301      	adds	r3, #1
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80015de:	4618      	mov	r0, r3
 80015e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	4413      	add	r3, r2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	4619      	mov	r1, r3
 80015ec:	f000 fb6c 	bl	8001cc8 <WIZCHIP_WRITE>
 80015f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	3301      	adds	r3, #1
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001600:	2b07      	cmp	r3, #7
 8001602:	dde5      	ble.n	80015d0 <wizchip_init+0x5c>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d03b      	beq.n	8001682 <wizchip_init+0x10e>
 800160a:	2300      	movs	r3, #0
 800160c:	73bb      	strb	r3, [r7, #14]
 800160e:	2300      	movs	r3, #0
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	e015      	b.n	8001640 <wizchip_init+0xcc>
 8001614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	4413      	add	r3, r2
 800161c:	781a      	ldrb	r2, [r3, #0]
 800161e:	7bbb      	ldrb	r3, [r7, #14]
 8001620:	4413      	add	r3, r2
 8001622:	b2db      	uxtb	r3, r3
 8001624:	73bb      	strb	r3, [r7, #14]
 8001626:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800162a:	2b10      	cmp	r3, #16
 800162c:	dd02      	ble.n	8001634 <wizchip_init+0xc0>
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	e027      	b.n	8001684 <wizchip_init+0x110>
 8001634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	3301      	adds	r3, #1
 800163c:	b2db      	uxtb	r3, r3
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001644:	2b07      	cmp	r3, #7
 8001646:	dde5      	ble.n	8001614 <wizchip_init+0xa0>
 8001648:	2300      	movs	r3, #0
 800164a:	73fb      	strb	r3, [r7, #15]
 800164c:	e015      	b.n	800167a <wizchip_init+0x106>
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	3301      	adds	r3, #1
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800165c:	4618      	mov	r0, r3
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	4413      	add	r3, r2
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f000 fb2d 	bl	8001cc8 <WIZCHIP_WRITE>
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	3301      	adds	r3, #1
 8001676:	b2db      	uxtb	r3, r3
 8001678:	73fb      	strb	r3, [r7, #15]
 800167a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167e:	2b07      	cmp	r3, #7
 8001680:	dde5      	ble.n	800164e <wizchip_init+0xda>
 8001682:	2300      	movs	r3, #0
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <wizchip_clrinterrupt>:
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	80fb      	strh	r3, [r7, #6]
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	73fb      	strb	r3, [r7, #15]
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	b29b      	uxth	r3, r3
 80016a0:	73bb      	strb	r3, [r7, #14]
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	f023 030f 	bic.w	r3, r3, #15
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	4619      	mov	r1, r3
 80016ac:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80016b0:	f000 fb0a 	bl	8001cc8 <WIZCHIP_WRITE>
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	e014      	b.n	80016e4 <wizchip_clrinterrupt+0x58>
 80016ba:	7bba      	ldrb	r2, [r7, #14]
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	fa42 f303 	asr.w	r3, r2, r3
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d009      	beq.n	80016de <wizchip_clrinterrupt+0x52>
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	3301      	adds	r3, #1
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80016d6:	211f      	movs	r1, #31
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 faf5 	bl	8001cc8 <WIZCHIP_WRITE>
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	3301      	adds	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	2b07      	cmp	r3, #7
 80016e8:	d9e7      	bls.n	80016ba <wizchip_clrinterrupt+0x2e>
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <wizchip_getinterrupt>:
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	2300      	movs	r3, #0
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	2300      	movs	r3, #0
 8001700:	71bb      	strb	r3, [r7, #6]
 8001702:	2300      	movs	r3, #0
 8001704:	80bb      	strh	r3, [r7, #4]
 8001706:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800170a:	f000 fa91 	bl	8001c30 <WIZCHIP_READ>
 800170e:	4603      	mov	r3, r0
 8001710:	f023 030f 	bic.w	r3, r3, #15
 8001714:	71fb      	strb	r3, [r7, #7]
 8001716:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 800171a:	f000 fa89 	bl	8001c30 <WIZCHIP_READ>
 800171e:	4603      	mov	r3, r0
 8001720:	71bb      	strb	r3, [r7, #6]
 8001722:	79bb      	ldrb	r3, [r7, #6]
 8001724:	80bb      	strh	r3, [r7, #4]
 8001726:	88bb      	ldrh	r3, [r7, #4]
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	b29a      	uxth	r2, r3
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	b29b      	uxth	r3, r3
 8001730:	4413      	add	r3, r2
 8001732:	80bb      	strh	r3, [r7, #4]
 8001734:	88bb      	ldrh	r3, [r7, #4]
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <wizchip_setinterruptmask>:
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	80fb      	strh	r3, [r7, #6]
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	0a1b      	lsrs	r3, r3, #8
 8001750:	b29b      	uxth	r3, r3
 8001752:	73bb      	strb	r3, [r7, #14]
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	4619      	mov	r1, r3
 8001758:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800175c:	f000 fab4 	bl	8001cc8 <WIZCHIP_WRITE>
 8001760:	7bbb      	ldrb	r3, [r7, #14]
 8001762:	4619      	mov	r1, r3
 8001764:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001768:	f000 faae 	bl	8001cc8 <WIZCHIP_WRITE>
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <wizchip_getinterruptmask>:
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	2300      	movs	r3, #0
 800177c:	71fb      	strb	r3, [r7, #7]
 800177e:	2300      	movs	r3, #0
 8001780:	71bb      	strb	r3, [r7, #6]
 8001782:	2300      	movs	r3, #0
 8001784:	80bb      	strh	r3, [r7, #4]
 8001786:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800178a:	f000 fa51 	bl	8001c30 <WIZCHIP_READ>
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001796:	f000 fa4b 	bl	8001c30 <WIZCHIP_READ>
 800179a:	4603      	mov	r3, r0
 800179c:	71bb      	strb	r3, [r7, #6]
 800179e:	79bb      	ldrb	r3, [r7, #6]
 80017a0:	80bb      	strh	r3, [r7, #4]
 80017a2:	88bb      	ldrh	r3, [r7, #4]
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	80bb      	strh	r3, [r7, #4]
 80017b0:	88bb      	ldrh	r3, [r7, #4]
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <wizphy_getphylink>:
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	2300      	movs	r3, #0
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80017c8:	f000 fa32 	bl	8001c30 <WIZCHIP_READ>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <wizphy_getphylink+0x20>
 80017d6:	2301      	movs	r3, #1
 80017d8:	71fb      	strb	r3, [r7, #7]
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <wizphy_getphypmode>:
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	2300      	movs	r3, #0
 80017ee:	71fb      	strb	r3, [r7, #7]
 80017f0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80017f4:	f000 fa1c 	bl	8001c30 <WIZCHIP_READ>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017fe:	2b30      	cmp	r3, #48	; 0x30
 8001800:	d102      	bne.n	8001808 <wizphy_getphypmode+0x22>
 8001802:	2301      	movs	r3, #1
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	e001      	b.n	800180c <wizphy_getphypmode+0x26>
 8001808:	2300      	movs	r3, #0
 800180a:	71fb      	strb	r3, [r7, #7]
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <wizphy_reset>:
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001822:	f000 fa05 	bl	8001c30 <WIZCHIP_READ>
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001830:	71fb      	strb	r3, [r7, #7]
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	4619      	mov	r1, r3
 8001836:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800183a:	f000 fa45 	bl	8001cc8 <WIZCHIP_WRITE>
 800183e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001842:	f000 f9f5 	bl	8001c30 <WIZCHIP_READ>
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001850:	71fb      	strb	r3, [r7, #7]
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	4619      	mov	r1, r3
 8001856:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800185a:	f000 fa35 	bl	8001cc8 <WIZCHIP_WRITE>
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <wizphy_setphyconf>:
 8001866:	b580      	push	{r7, lr}
 8001868:	b084      	sub	sp, #16
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	2300      	movs	r3, #0
 8001870:	73fb      	strb	r3, [r7, #15]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d104      	bne.n	8001884 <wizphy_setphyconf+0x1e>
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001880:	73fb      	strb	r3, [r7, #15]
 8001882:	e003      	b.n	800188c <wizphy_setphyconf+0x26>
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	785b      	ldrb	r3, [r3, #1]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d104      	bne.n	800189e <wizphy_setphyconf+0x38>
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	e019      	b.n	80018d2 <wizphy_setphyconf+0x6c>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	78db      	ldrb	r3, [r3, #3]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d10d      	bne.n	80018c2 <wizphy_setphyconf+0x5c>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	789b      	ldrb	r3, [r3, #2]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d104      	bne.n	80018b8 <wizphy_setphyconf+0x52>
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	f043 0318 	orr.w	r3, r3, #24
 80018b4:	73fb      	strb	r3, [r7, #15]
 80018b6:	e00c      	b.n	80018d2 <wizphy_setphyconf+0x6c>
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	f043 0308 	orr.w	r3, r3, #8
 80018be:	73fb      	strb	r3, [r7, #15]
 80018c0:	e007      	b.n	80018d2 <wizphy_setphyconf+0x6c>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	789b      	ldrb	r3, [r3, #2]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d103      	bne.n	80018d2 <wizphy_setphyconf+0x6c>
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	f043 0310 	orr.w	r3, r3, #16
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	4619      	mov	r1, r3
 80018d6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80018da:	f000 f9f5 	bl	8001cc8 <WIZCHIP_WRITE>
 80018de:	f7ff ff9b 	bl	8001818 <wizphy_reset>
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <wizphy_getphyconf>:
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	2300      	movs	r3, #0
 80018f6:	73fb      	strb	r3, [r7, #15]
 80018f8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80018fc:	f000 f998 	bl	8001c30 <WIZCHIP_READ>
 8001900:	4603      	mov	r3, r0
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	119b      	asrs	r3, r3, #6
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	b2da      	uxtb	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800191a:	2b20      	cmp	r3, #32
 800191c:	d001      	beq.n	8001922 <wizphy_getphyconf+0x36>
 800191e:	2b38      	cmp	r3, #56	; 0x38
 8001920:	d103      	bne.n	800192a <wizphy_getphyconf+0x3e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	705a      	strb	r2, [r3, #1]
 8001928:	e003      	b.n	8001932 <wizphy_getphyconf+0x46>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	705a      	strb	r2, [r3, #1]
 8001930:	bf00      	nop
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001938:	3b10      	subs	r3, #16
 800193a:	2b10      	cmp	r3, #16
 800193c:	bf8c      	ite	hi
 800193e:	2201      	movhi	r2, #1
 8001940:	2200      	movls	r2, #0
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	2a00      	cmp	r2, #0
 8001946:	d10f      	bne.n	8001968 <wizphy_getphyconf+0x7c>
 8001948:	4a1b      	ldr	r2, [pc, #108]	; (80019b8 <wizphy_getphyconf+0xcc>)
 800194a:	fa22 f303 	lsr.w	r3, r2, r3
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	bf14      	ite	ne
 8001956:	2301      	movne	r3, #1
 8001958:	2300      	moveq	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <wizphy_getphyconf+0x7c>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	709a      	strb	r2, [r3, #2]
 8001966:	e003      	b.n	8001970 <wizphy_getphyconf+0x84>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	709a      	strb	r2, [r3, #2]
 800196e:	bf00      	nop
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001976:	3b08      	subs	r3, #8
 8001978:	2b18      	cmp	r3, #24
 800197a:	bf8c      	ite	hi
 800197c:	2201      	movhi	r2, #1
 800197e:	2200      	movls	r2, #0
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	2a00      	cmp	r2, #0
 8001984:	d10f      	bne.n	80019a6 <wizphy_getphyconf+0xba>
 8001986:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <wizphy_getphyconf+0xd0>)
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf14      	ite	ne
 8001994:	2301      	movne	r3, #1
 8001996:	2300      	moveq	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <wizphy_getphyconf+0xba>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	70da      	strb	r2, [r3, #3]
 80019a4:	e003      	b.n	80019ae <wizphy_getphyconf+0xc2>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	70da      	strb	r2, [r3, #3]
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	00010101 	.word	0x00010101
 80019bc:	01010001 	.word	0x01010001

080019c0 <wizphy_setphypmode>:
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]
 80019ce:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80019d2:	f000 f92d 	bl	8001c30 <WIZCHIP_READ>
 80019d6:	4603      	mov	r3, r0
 80019d8:	73fb      	strb	r3, [r7, #15]
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <wizphy_setphypmode+0x2a>
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295
 80019e8:	e030      	b.n	8001a4c <wizphy_setphypmode+0x8c>
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80019f0:	73fb      	strb	r3, [r7, #15]
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d104      	bne.n	8001a02 <wizphy_setphypmode+0x42>
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80019fe:	73fb      	strb	r3, [r7, #15]
 8001a00:	e003      	b.n	8001a0a <wizphy_setphypmode+0x4a>
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001a08:	73fb      	strb	r3, [r7, #15]
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001a12:	f000 f959 	bl	8001cc8 <WIZCHIP_WRITE>
 8001a16:	f7ff feff 	bl	8001818 <wizphy_reset>
 8001a1a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001a1e:	f000 f907 	bl	8001c30 <WIZCHIP_READ>
 8001a22:	4603      	mov	r3, r0
 8001a24:	73fb      	strb	r3, [r7, #15]
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d106      	bne.n	8001a3a <wizphy_setphypmode+0x7a>
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d008      	beq.n	8001a48 <wizphy_setphypmode+0x88>
 8001a36:	2300      	movs	r3, #0
 8001a38:	e008      	b.n	8001a4c <wizphy_setphypmode+0x8c>
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <wizphy_setphypmode+0x88>
 8001a44:	2300      	movs	r3, #0
 8001a46:	e001      	b.n	8001a4c <wizphy_setphypmode+0x8c>
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <wizchip_setnetinfo>:
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2206      	movs	r2, #6
 8001a60:	4619      	mov	r1, r3
 8001a62:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001a66:	f000 f9dd 	bl	8001e24 <WIZCHIP_WRITE_BUF>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	330e      	adds	r3, #14
 8001a6e:	2204      	movs	r2, #4
 8001a70:	4619      	mov	r1, r3
 8001a72:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a76:	f000 f9d5 	bl	8001e24 <WIZCHIP_WRITE_BUF>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	330a      	adds	r3, #10
 8001a7e:	2204      	movs	r2, #4
 8001a80:	4619      	mov	r1, r3
 8001a82:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001a86:	f000 f9cd 	bl	8001e24 <WIZCHIP_WRITE_BUF>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3306      	adds	r3, #6
 8001a8e:	2204      	movs	r2, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001a96:	f000 f9c5 	bl	8001e24 <WIZCHIP_WRITE_BUF>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	7c9a      	ldrb	r2, [r3, #18]
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <wizchip_setnetinfo+0x78>)
 8001aa0:	701a      	strb	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7cda      	ldrb	r2, [r3, #19]
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <wizchip_setnetinfo+0x78>)
 8001aa8:	705a      	strb	r2, [r3, #1]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7d1a      	ldrb	r2, [r3, #20]
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <wizchip_setnetinfo+0x78>)
 8001ab0:	709a      	strb	r2, [r3, #2]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7d5a      	ldrb	r2, [r3, #21]
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <wizchip_setnetinfo+0x78>)
 8001ab8:	70da      	strb	r2, [r3, #3]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	7d9a      	ldrb	r2, [r3, #22]
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <wizchip_setnetinfo+0x7c>)
 8001ac0:	701a      	strb	r2, [r3, #0]
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200007dc 	.word	0x200007dc
 8001ad0:	200007e0 	.word	0x200007e0

08001ad4 <wizchip_getnetinfo>:
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2206      	movs	r2, #6
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001ae6:	f000 f93d 	bl	8001d64 <WIZCHIP_READ_BUF>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	330e      	adds	r3, #14
 8001aee:	2204      	movs	r2, #4
 8001af0:	4619      	mov	r1, r3
 8001af2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001af6:	f000 f935 	bl	8001d64 <WIZCHIP_READ_BUF>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	330a      	adds	r3, #10
 8001afe:	2204      	movs	r2, #4
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001b06:	f000 f92d 	bl	8001d64 <WIZCHIP_READ_BUF>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3306      	adds	r3, #6
 8001b0e:	2204      	movs	r2, #4
 8001b10:	4619      	mov	r1, r3
 8001b12:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001b16:	f000 f925 	bl	8001d64 <WIZCHIP_READ_BUF>
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <wizchip_getnetinfo+0x78>)
 8001b1c:	781a      	ldrb	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	749a      	strb	r2, [r3, #18]
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <wizchip_getnetinfo+0x78>)
 8001b24:	785a      	ldrb	r2, [r3, #1]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	74da      	strb	r2, [r3, #19]
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <wizchip_getnetinfo+0x78>)
 8001b2c:	789a      	ldrb	r2, [r3, #2]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	751a      	strb	r2, [r3, #20]
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <wizchip_getnetinfo+0x78>)
 8001b34:	78da      	ldrb	r2, [r3, #3]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	755a      	strb	r2, [r3, #21]
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <wizchip_getnetinfo+0x7c>)
 8001b3c:	781a      	ldrb	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	759a      	strb	r2, [r3, #22]
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200007dc 	.word	0x200007dc
 8001b50:	200007e0 	.word	0x200007e0

08001b54 <wizchip_setnetmode>:
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73fb      	strb	r3, [r7, #15]
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d002      	beq.n	8001b72 <wizchip_setnetmode+0x1e>
 8001b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b70:	e00e      	b.n	8001b90 <wizchip_setnetmode+0x3c>
 8001b72:	2000      	movs	r0, #0
 8001b74:	f000 f85c 	bl	8001c30 <WIZCHIP_READ>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	73fb      	strb	r3, [r7, #15]
 8001b7c:	7bfa      	ldrb	r2, [r7, #15]
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	4619      	mov	r1, r3
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f000 f89d 	bl	8001cc8 <WIZCHIP_WRITE>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <wizchip_getnetmode>:
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f000 f847 	bl	8001c30 <WIZCHIP_READ>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <wizchip_settimeout>:
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001bba:	f000 f885 	bl	8001cc8 <WIZCHIP_WRITE>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	885b      	ldrh	r3, [r3, #2]
 8001bc2:	0a1b      	lsrs	r3, r3, #8
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001bce:	f000 f87b 	bl	8001cc8 <WIZCHIP_WRITE>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	885b      	ldrh	r3, [r3, #2]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001bde:	f000 f873 	bl	8001cc8 <WIZCHIP_WRITE>
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <wizchip_gettimeout>:
 8001bea:	b590      	push	{r4, r7, lr}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001bf6:	f000 f81b 	bl	8001c30 <WIZCHIP_READ>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001c06:	f000 f813 	bl	8001c30 <WIZCHIP_READ>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	b29c      	uxth	r4, r3
 8001c12:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001c16:	f000 f80b 	bl	8001c30 <WIZCHIP_READ>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	4423      	add	r3, r4
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	805a      	strh	r2, [r3, #2]
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd90      	pop	{r4, r7, pc}
	...

08001c30 <WIZCHIP_READ>:
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <WIZCHIP_READ+0x94>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4798      	blx	r3
 8001c3e:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <WIZCHIP_READ+0x94>)
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	4798      	blx	r3
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <WIZCHIP_READ+0x94>)
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <WIZCHIP_READ+0x24>
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <WIZCHIP_READ+0x94>)
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d114      	bne.n	8001c7e <WIZCHIP_READ+0x4e>
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <WIZCHIP_READ+0x94>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	0c12      	lsrs	r2, r2, #16
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4798      	blx	r3
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <WIZCHIP_READ+0x94>)
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	0a12      	lsrs	r2, r2, #8
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4798      	blx	r3
 8001c70:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <WIZCHIP_READ+0x94>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4798      	blx	r3
 8001c7c:	e011      	b.n	8001ca2 <WIZCHIP_READ+0x72>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	0c1b      	lsrs	r3, r3, #16
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	733b      	strb	r3, [r7, #12]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	737b      	strb	r3, [r7, #13]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	73bb      	strb	r3, [r7, #14]
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <WIZCHIP_READ+0x94>)
 8001c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c98:	f107 020c 	add.w	r2, r7, #12
 8001c9c:	2103      	movs	r1, #3
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4798      	blx	r3
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <WIZCHIP_READ+0x94>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4798      	blx	r3
 8001ca8:	4603      	mov	r3, r0
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <WIZCHIP_READ+0x94>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	4798      	blx	r3
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <WIZCHIP_READ+0x94>)
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	4798      	blx	r3
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000020 	.word	0x20000020

08001cc8 <WIZCHIP_WRITE>:
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	70fb      	strb	r3, [r7, #3]
 8001cd4:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <WIZCHIP_WRITE+0x98>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4798      	blx	r3
 8001cda:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <WIZCHIP_WRITE+0x98>)
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	4798      	blx	r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <WIZCHIP_WRITE+0x98>)
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d119      	bne.n	8001d24 <WIZCHIP_WRITE+0x5c>
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <WIZCHIP_WRITE+0x98>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	0c12      	lsrs	r2, r2, #16
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4798      	blx	r3
 8001cfe:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <WIZCHIP_WRITE+0x98>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	0a12      	lsrs	r2, r2, #8
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4798      	blx	r3
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <WIZCHIP_WRITE+0x98>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	4610      	mov	r0, r2
 8001d16:	4798      	blx	r3
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <WIZCHIP_WRITE+0x98>)
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	78fa      	ldrb	r2, [r7, #3]
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4798      	blx	r3
 8001d22:	e013      	b.n	8001d4c <WIZCHIP_WRITE+0x84>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	0c1b      	lsrs	r3, r3, #16
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	733b      	strb	r3, [r7, #12]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	737b      	strb	r3, [r7, #13]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	73bb      	strb	r3, [r7, #14]
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	73fb      	strb	r3, [r7, #15]
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <WIZCHIP_WRITE+0x98>)
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	f107 020c 	add.w	r2, r7, #12
 8001d46:	2104      	movs	r1, #4
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4798      	blx	r3
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <WIZCHIP_WRITE+0x98>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	4798      	blx	r3
 8001d52:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <WIZCHIP_WRITE+0x98>)
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	4798      	blx	r3
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000020 	.word	0x20000020

08001d64 <WIZCHIP_READ_BUF>:
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	80fb      	strh	r3, [r7, #6]
 8001d72:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <WIZCHIP_READ_BUF+0xbc>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	4798      	blx	r3
 8001d78:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <WIZCHIP_READ_BUF+0xbc>)
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	4798      	blx	r3
 8001d7e:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <WIZCHIP_READ_BUF+0xbc>)
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <WIZCHIP_READ_BUF+0x2a>
 8001d86:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <WIZCHIP_READ_BUF+0xbc>)
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d126      	bne.n	8001ddc <WIZCHIP_READ_BUF+0x78>
 8001d8e:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <WIZCHIP_READ_BUF+0xbc>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	0c12      	lsrs	r2, r2, #16
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4798      	blx	r3
 8001d9c:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <WIZCHIP_READ_BUF+0xbc>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	0a12      	lsrs	r2, r2, #8
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	4610      	mov	r0, r2
 8001da8:	4798      	blx	r3
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <WIZCHIP_READ_BUF+0xbc>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	4610      	mov	r0, r2
 8001db4:	4798      	blx	r3
 8001db6:	2300      	movs	r3, #0
 8001db8:	82fb      	strh	r3, [r7, #22]
 8001dba:	e00a      	b.n	8001dd2 <WIZCHIP_READ_BUF+0x6e>
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <WIZCHIP_READ_BUF+0xbc>)
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	8afa      	ldrh	r2, [r7, #22]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	188c      	adds	r4, r1, r2
 8001dc6:	4798      	blx	r3
 8001dc8:	4603      	mov	r3, r0
 8001dca:	7023      	strb	r3, [r4, #0]
 8001dcc:	8afb      	ldrh	r3, [r7, #22]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	82fb      	strh	r3, [r7, #22]
 8001dd2:	8afa      	ldrh	r2, [r7, #22]
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d3f0      	bcc.n	8001dbc <WIZCHIP_READ_BUF+0x58>
 8001dda:	e017      	b.n	8001e0c <WIZCHIP_READ_BUF+0xa8>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	0c1b      	lsrs	r3, r3, #16
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	743b      	strb	r3, [r7, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	0a1b      	lsrs	r3, r3, #8
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	747b      	strb	r3, [r7, #17]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	74bb      	strb	r3, [r7, #18]
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <WIZCHIP_READ_BUF+0xbc>)
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	f107 0210 	add.w	r2, r7, #16
 8001dfa:	2103      	movs	r1, #3
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4798      	blx	r3
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <WIZCHIP_READ_BUF+0xbc>)
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	88fa      	ldrh	r2, [r7, #6]
 8001e06:	4611      	mov	r1, r2
 8001e08:	68b8      	ldr	r0, [r7, #8]
 8001e0a:	4798      	blx	r3
 8001e0c:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <WIZCHIP_READ_BUF+0xbc>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	4798      	blx	r3
 8001e12:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <WIZCHIP_READ_BUF+0xbc>)
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	4798      	blx	r3
 8001e18:	bf00      	nop
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd90      	pop	{r4, r7, pc}
 8001e20:	20000020 	.word	0x20000020

08001e24 <WIZCHIP_WRITE_BUF>:
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	80fb      	strh	r3, [r7, #6]
 8001e32:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	4798      	blx	r3
 8001e38:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	4798      	blx	r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d126      	bne.n	8001e9c <WIZCHIP_WRITE_BUF+0x78>
 8001e4e:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	0c12      	lsrs	r2, r2, #16
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4798      	blx	r3
 8001e5c:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	0a12      	lsrs	r2, r2, #8
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	4610      	mov	r0, r2
 8001e68:	4798      	blx	r3
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	4610      	mov	r0, r2
 8001e74:	4798      	blx	r3
 8001e76:	2300      	movs	r3, #0
 8001e78:	82fb      	strh	r3, [r7, #22]
 8001e7a:	e00a      	b.n	8001e92 <WIZCHIP_WRITE_BUF+0x6e>
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	8afa      	ldrh	r2, [r7, #22]
 8001e82:	68b9      	ldr	r1, [r7, #8]
 8001e84:	440a      	add	r2, r1
 8001e86:	7812      	ldrb	r2, [r2, #0]
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4798      	blx	r3
 8001e8c:	8afb      	ldrh	r3, [r7, #22]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	82fb      	strh	r3, [r7, #22]
 8001e92:	8afa      	ldrh	r2, [r7, #22]
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d3f0      	bcc.n	8001e7c <WIZCHIP_WRITE_BUF+0x58>
 8001e9a:	e017      	b.n	8001ecc <WIZCHIP_WRITE_BUF+0xa8>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	0c1b      	lsrs	r3, r3, #16
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	743b      	strb	r3, [r7, #16]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	747b      	strb	r3, [r7, #17]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	74bb      	strb	r3, [r7, #18]
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb6:	f107 0210 	add.w	r2, r7, #16
 8001eba:	2103      	movs	r1, #3
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4798      	blx	r3
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	88fa      	ldrh	r2, [r7, #6]
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	68b8      	ldr	r0, [r7, #8]
 8001eca:	4798      	blx	r3
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	4798      	blx	r3
 8001ed2:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	4798      	blx	r3
 8001ed8:	bf00      	nop
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000020 	.word	0x20000020

08001ee4 <getSn_TX_FSR>:
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	81fb      	strh	r3, [r7, #14]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	81bb      	strh	r3, [r7, #12]
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	3301      	adds	r3, #1
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fe94 	bl	8001c30 <WIZCHIP_READ>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	81bb      	strh	r3, [r7, #12]
 8001f0c:	89bb      	ldrh	r3, [r7, #12]
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	b29c      	uxth	r4, r3
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	3301      	adds	r3, #1
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fe86 	bl	8001c30 <WIZCHIP_READ>
 8001f24:	4603      	mov	r3, r0
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	4423      	add	r3, r4
 8001f2a:	81bb      	strh	r3, [r7, #12]
 8001f2c:	89bb      	ldrh	r3, [r7, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d01a      	beq.n	8001f68 <getSn_TX_FSR+0x84>
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	3301      	adds	r3, #1
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fe76 	bl	8001c30 <WIZCHIP_READ>
 8001f44:	4603      	mov	r3, r0
 8001f46:	81fb      	strh	r3, [r7, #14]
 8001f48:	89fb      	ldrh	r3, [r7, #14]
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	b29c      	uxth	r4, r3
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	3301      	adds	r3, #1
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fe68 	bl	8001c30 <WIZCHIP_READ>
 8001f60:	4603      	mov	r3, r0
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	4423      	add	r3, r4
 8001f66:	81fb      	strh	r3, [r7, #14]
 8001f68:	89fa      	ldrh	r2, [r7, #14]
 8001f6a:	89bb      	ldrh	r3, [r7, #12]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d1c2      	bne.n	8001ef6 <getSn_TX_FSR+0x12>
 8001f70:	89fb      	ldrh	r3, [r7, #14]
 8001f72:	4618      	mov	r0, r3
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd90      	pop	{r4, r7, pc}

08001f7a <getSn_RX_RSR>:
 8001f7a:	b590      	push	{r4, r7, lr}
 8001f7c:	b085      	sub	sp, #20
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	71fb      	strb	r3, [r7, #7]
 8001f84:	2300      	movs	r3, #0
 8001f86:	81fb      	strh	r3, [r7, #14]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	81bb      	strh	r3, [r7, #12]
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	3301      	adds	r3, #1
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fe49 	bl	8001c30 <WIZCHIP_READ>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	81bb      	strh	r3, [r7, #12]
 8001fa2:	89bb      	ldrh	r3, [r7, #12]
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	b29c      	uxth	r4, r3
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	3301      	adds	r3, #1
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fe3b 	bl	8001c30 <WIZCHIP_READ>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4423      	add	r3, r4
 8001fc0:	81bb      	strh	r3, [r7, #12]
 8001fc2:	89bb      	ldrh	r3, [r7, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01a      	beq.n	8001ffe <getSn_RX_RSR+0x84>
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	3301      	adds	r3, #1
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fe2b 	bl	8001c30 <WIZCHIP_READ>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	81fb      	strh	r3, [r7, #14]
 8001fde:	89fb      	ldrh	r3, [r7, #14]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	b29c      	uxth	r4, r3
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	3301      	adds	r3, #1
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fe1d 	bl	8001c30 <WIZCHIP_READ>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	4423      	add	r3, r4
 8001ffc:	81fb      	strh	r3, [r7, #14]
 8001ffe:	89fa      	ldrh	r2, [r7, #14]
 8002000:	89bb      	ldrh	r3, [r7, #12]
 8002002:	429a      	cmp	r2, r3
 8002004:	d1c2      	bne.n	8001f8c <getSn_RX_RSR+0x12>
 8002006:	89fb      	ldrh	r3, [r7, #14]
 8002008:	4618      	mov	r0, r3
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	bd90      	pop	{r4, r7, pc}

08002010 <wiz_send_data>:
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	6039      	str	r1, [r7, #0]
 800201a:	71fb      	strb	r3, [r7, #7]
 800201c:	4613      	mov	r3, r2
 800201e:	80bb      	strh	r3, [r7, #4]
 8002020:	2300      	movs	r3, #0
 8002022:	81fb      	strh	r3, [r7, #14]
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	88bb      	ldrh	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d048      	beq.n	80020c0 <wiz_send_data+0xb0>
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	3301      	adds	r3, #1
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fdf8 	bl	8001c30 <WIZCHIP_READ>
 8002040:	4603      	mov	r3, r0
 8002042:	b29b      	uxth	r3, r3
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	b29c      	uxth	r4, r3
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	3301      	adds	r3, #1
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fdeb 	bl	8001c30 <WIZCHIP_READ>
 800205a:	4603      	mov	r3, r0
 800205c:	b29b      	uxth	r3, r3
 800205e:	4423      	add	r3, r4
 8002060:	81fb      	strh	r3, [r7, #14]
 8002062:	89fb      	ldrh	r3, [r7, #14]
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	79fa      	ldrb	r2, [r7, #7]
 8002068:	0092      	lsls	r2, r2, #2
 800206a:	3202      	adds	r2, #2
 800206c:	00d2      	lsls	r2, r2, #3
 800206e:	4413      	add	r3, r2
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	88bb      	ldrh	r3, [r7, #4]
 8002074:	461a      	mov	r2, r3
 8002076:	6839      	ldr	r1, [r7, #0]
 8002078:	68b8      	ldr	r0, [r7, #8]
 800207a:	f7ff fed3 	bl	8001e24 <WIZCHIP_WRITE_BUF>
 800207e:	89fa      	ldrh	r2, [r7, #14]
 8002080:	88bb      	ldrh	r3, [r7, #4]
 8002082:	4413      	add	r3, r2
 8002084:	81fb      	strh	r3, [r7, #14]
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	3301      	adds	r3, #1
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002092:	461a      	mov	r2, r3
 8002094:	89fb      	ldrh	r3, [r7, #14]
 8002096:	0a1b      	lsrs	r3, r3, #8
 8002098:	b29b      	uxth	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	4619      	mov	r1, r3
 800209e:	4610      	mov	r0, r2
 80020a0:	f7ff fe12 	bl	8001cc8 <WIZCHIP_WRITE>
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	3301      	adds	r3, #1
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80020b0:	461a      	mov	r2, r3
 80020b2:	89fb      	ldrh	r3, [r7, #14]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	4619      	mov	r1, r3
 80020b8:	4610      	mov	r0, r2
 80020ba:	f7ff fe05 	bl	8001cc8 <WIZCHIP_WRITE>
 80020be:	e000      	b.n	80020c2 <wiz_send_data+0xb2>
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd90      	pop	{r4, r7, pc}

080020c8 <wiz_recv_data>:
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
 80020d4:	4613      	mov	r3, r2
 80020d6:	80bb      	strh	r3, [r7, #4]
 80020d8:	2300      	movs	r3, #0
 80020da:	81fb      	strh	r3, [r7, #14]
 80020dc:	2300      	movs	r3, #0
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	88bb      	ldrh	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d048      	beq.n	8002178 <wiz_recv_data+0xb0>
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	3301      	adds	r3, #1
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fd9c 	bl	8001c30 <WIZCHIP_READ>
 80020f8:	4603      	mov	r3, r0
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	021b      	lsls	r3, r3, #8
 80020fe:	b29c      	uxth	r4, r3
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	3301      	adds	r3, #1
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fd8f 	bl	8001c30 <WIZCHIP_READ>
 8002112:	4603      	mov	r3, r0
 8002114:	b29b      	uxth	r3, r3
 8002116:	4423      	add	r3, r4
 8002118:	81fb      	strh	r3, [r7, #14]
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	79fa      	ldrb	r2, [r7, #7]
 8002120:	0092      	lsls	r2, r2, #2
 8002122:	3203      	adds	r2, #3
 8002124:	00d2      	lsls	r2, r2, #3
 8002126:	4413      	add	r3, r2
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	88bb      	ldrh	r3, [r7, #4]
 800212c:	461a      	mov	r2, r3
 800212e:	6839      	ldr	r1, [r7, #0]
 8002130:	68b8      	ldr	r0, [r7, #8]
 8002132:	f7ff fe17 	bl	8001d64 <WIZCHIP_READ_BUF>
 8002136:	89fa      	ldrh	r2, [r7, #14]
 8002138:	88bb      	ldrh	r3, [r7, #4]
 800213a:	4413      	add	r3, r2
 800213c:	81fb      	strh	r3, [r7, #14]
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	3301      	adds	r3, #1
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800214a:	461a      	mov	r2, r3
 800214c:	89fb      	ldrh	r3, [r7, #14]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	b29b      	uxth	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	4619      	mov	r1, r3
 8002156:	4610      	mov	r0, r2
 8002158:	f7ff fdb6 	bl	8001cc8 <WIZCHIP_WRITE>
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	3301      	adds	r3, #1
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002168:	461a      	mov	r2, r3
 800216a:	89fb      	ldrh	r3, [r7, #14]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	4619      	mov	r1, r3
 8002170:	4610      	mov	r0, r2
 8002172:	f7ff fda9 	bl	8001cc8 <WIZCHIP_WRITE>
 8002176:	e000      	b.n	800217a <wiz_recv_data+0xb2>
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	bd90      	pop	{r4, r7, pc}

08002180 <Reset_Handler>:
 8002180:	f7fe fa2c 	bl	80005dc <SystemInit>
 8002184:	480b      	ldr	r0, [pc, #44]	; (80021b4 <LoopFillZerobss+0xe>)
 8002186:	490c      	ldr	r1, [pc, #48]	; (80021b8 <LoopFillZerobss+0x12>)
 8002188:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <LoopFillZerobss+0x16>)
 800218a:	2300      	movs	r3, #0
 800218c:	e002      	b.n	8002194 <LoopCopyDataInit>

0800218e <CopyDataInit>:
 800218e:	58d4      	ldr	r4, [r2, r3]
 8002190:	50c4      	str	r4, [r0, r3]
 8002192:	3304      	adds	r3, #4

08002194 <LoopCopyDataInit>:
 8002194:	18c4      	adds	r4, r0, r3
 8002196:	428c      	cmp	r4, r1
 8002198:	d3f9      	bcc.n	800218e <CopyDataInit>
 800219a:	4a09      	ldr	r2, [pc, #36]	; (80021c0 <LoopFillZerobss+0x1a>)
 800219c:	4c09      	ldr	r4, [pc, #36]	; (80021c4 <LoopFillZerobss+0x1e>)
 800219e:	2300      	movs	r3, #0
 80021a0:	e001      	b.n	80021a6 <LoopFillZerobss>

080021a2 <FillZerobss>:
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	3204      	adds	r2, #4

080021a6 <LoopFillZerobss>:
 80021a6:	42a2      	cmp	r2, r4
 80021a8:	d3fb      	bcc.n	80021a2 <FillZerobss>
 80021aa:	f002 febf 	bl	8004f2c <__libc_init_array>
 80021ae:	f7fe f831 	bl	8000214 <main>
 80021b2:	4770      	bx	lr
 80021b4:	20000000 	.word	0x20000000
 80021b8:	200000a8 	.word	0x200000a8
 80021bc:	08005330 	.word	0x08005330
 80021c0:	200000a8 	.word	0x200000a8
 80021c4:	20001674 	.word	0x20001674

080021c8 <ADC1_2_IRQHandler>:
 80021c8:	e7fe      	b.n	80021c8 <ADC1_2_IRQHandler>
	...

080021cc <HAL_Init>:
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <HAL_Init+0x28>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a07      	ldr	r2, [pc, #28]	; (80021f4 <HAL_Init+0x28>)
 80021d6:	f043 0310 	orr.w	r3, r3, #16
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	2003      	movs	r0, #3
 80021de:	f000 f92b 	bl	8002438 <HAL_NVIC_SetPriorityGrouping>
 80021e2:	200f      	movs	r0, #15
 80021e4:	f000 f808 	bl	80021f8 <HAL_InitTick>
 80021e8:	f7fe f952 	bl	8000490 <HAL_MspInit>
 80021ec:	2300      	movs	r3, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40022000 	.word	0x40022000

080021f8 <HAL_InitTick>:
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_InitTick+0x54>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_InitTick+0x58>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	4619      	mov	r1, r3
 800220a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002212:	fbb2 f3f3 	udiv	r3, r2, r3
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f935 	bl	8002486 <HAL_SYSTICK_Config>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_InitTick+0x2e>
 8002222:	2301      	movs	r3, #1
 8002224:	e00e      	b.n	8002244 <HAL_InitTick+0x4c>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b0f      	cmp	r3, #15
 800222a:	d80a      	bhi.n	8002242 <HAL_InitTick+0x4a>
 800222c:	2200      	movs	r2, #0
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	f04f 30ff 	mov.w	r0, #4294967295
 8002234:	f000 f90b 	bl	800244e <HAL_NVIC_SetPriority>
 8002238:	4a06      	ldr	r2, [pc, #24]	; (8002254 <HAL_InitTick+0x5c>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	2300      	movs	r3, #0
 8002240:	e000      	b.n	8002244 <HAL_InitTick+0x4c>
 8002242:	2301      	movs	r3, #1
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000018 	.word	0x20000018
 8002250:	20000050 	.word	0x20000050
 8002254:	2000004c 	.word	0x2000004c

08002258 <HAL_IncTick>:
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_IncTick+0x1c>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_IncTick+0x20>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4413      	add	r3, r2
 8002268:	4a03      	ldr	r2, [pc, #12]	; (8002278 <HAL_IncTick+0x20>)
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	20000050 	.word	0x20000050
 8002278:	200007e4 	.word	0x200007e4

0800227c <HAL_GetTick>:
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
 8002280:	4b02      	ldr	r3, [pc, #8]	; (800228c <HAL_GetTick+0x10>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	200007e4 	.word	0x200007e4

08002290 <HAL_Delay>:
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	f7ff fff0 	bl	800227c <HAL_GetTick>
 800229c:	60b8      	str	r0, [r7, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d005      	beq.n	80022b6 <HAL_Delay+0x26>
 80022aa:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <HAL_Delay+0x44>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	bf00      	nop
 80022b8:	f7ff ffe0 	bl	800227c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d8f7      	bhi.n	80022b8 <HAL_Delay+0x28>
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000050 	.word	0x20000050

080022d8 <__NVIC_SetPriorityGrouping>:
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <__NVIC_SetPriorityGrouping+0x44>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f4:	4013      	ands	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	021a      	lsls	r2, r3, #8
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4313      	orrs	r3, r2
 8002300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	4a04      	ldr	r2, [pc, #16]	; (800231c <__NVIC_SetPriorityGrouping+0x44>)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	60d3      	str	r3, [r2, #12]
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_GetPriorityGrouping>:
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <__NVIC_GetPriorityGrouping+0x18>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_SetPriority>:
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	6039      	str	r1, [r7, #0]
 8002346:	71fb      	strb	r3, [r7, #7]
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	2b00      	cmp	r3, #0
 800234e:	db0a      	blt.n	8002366 <__NVIC_SetPriority+0x2a>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	b2da      	uxtb	r2, r3
 8002354:	490c      	ldr	r1, [pc, #48]	; (8002388 <__NVIC_SetPriority+0x4c>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	0112      	lsls	r2, r2, #4
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	440b      	add	r3, r1
 8002360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002364:	e00a      	b.n	800237c <__NVIC_SetPriority+0x40>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4908      	ldr	r1, [pc, #32]	; (800238c <__NVIC_SetPriority+0x50>)
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	3b04      	subs	r3, #4
 8002374:	0112      	lsls	r2, r2, #4
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	440b      	add	r3, r1
 800237a:	761a      	strb	r2, [r3, #24]
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000e100 	.word	0xe000e100
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <NVIC_EncodePriority>:
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f1c3 0307 	rsb	r3, r3, #7
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	bf28      	it	cs
 80023ae:	2304      	movcs	r3, #4
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3304      	adds	r3, #4
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d902      	bls.n	80023c0 <NVIC_EncodePriority+0x30>
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3b03      	subs	r3, #3
 80023be:	e000      	b.n	80023c2 <NVIC_EncodePriority+0x32>
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	f04f 32ff 	mov.w	r2, #4294967295
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43da      	mvns	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	401a      	ands	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	409a      	lsls	r2, r3
 80023d8:	f04f 31ff 	mov.w	r1, #4294967295
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	43d9      	mvns	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	400b      	ands	r3, r1
 80023e8:	4313      	orrs	r3, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	3724      	adds	r7, #36	; 0x24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <SysTick_Config>:
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3b01      	subs	r3, #1
 8002400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002404:	d301      	bcc.n	800240a <SysTick_Config+0x16>
 8002406:	2301      	movs	r3, #1
 8002408:	e00f      	b.n	800242a <SysTick_Config+0x36>
 800240a:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <SysTick_Config+0x40>)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	6053      	str	r3, [r2, #4]
 8002412:	210f      	movs	r1, #15
 8002414:	f04f 30ff 	mov.w	r0, #4294967295
 8002418:	f7ff ff90 	bl	800233c <__NVIC_SetPriority>
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <SysTick_Config+0x40>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	4b04      	ldr	r3, [pc, #16]	; (8002434 <SysTick_Config+0x40>)
 8002424:	2207      	movs	r2, #7
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	2300      	movs	r3, #0
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	e000e010 	.word	0xe000e010

08002438 <HAL_NVIC_SetPriorityGrouping>:
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff ff49 	bl	80022d8 <__NVIC_SetPriorityGrouping>
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_NVIC_SetPriority>:
 800244e:	b580      	push	{r7, lr}
 8002450:	b086      	sub	sp, #24
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	607a      	str	r2, [r7, #4]
 800245a:	73fb      	strb	r3, [r7, #15]
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	f7ff ff5e 	bl	8002320 <__NVIC_GetPriorityGrouping>
 8002464:	6178      	str	r0, [r7, #20]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	6978      	ldr	r0, [r7, #20]
 800246c:	f7ff ff90 	bl	8002390 <NVIC_EncodePriority>
 8002470:	4602      	mov	r2, r0
 8002472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff5f 	bl	800233c <__NVIC_SetPriority>
 800247e:	bf00      	nop
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_SYSTICK_Config>:
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ffb0 	bl	80023f4 <SysTick_Config>
 8002494:	4603      	mov	r3, r0
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_GPIO_Init>:
 80024a0:	b480      	push	{r7}
 80024a2:	b08b      	sub	sp, #44	; 0x2c
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
 80024b2:	e169      	b.n	8002788 <HAL_GPIO_Init+0x2e8>
 80024b4:	2201      	movs	r2, #1
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	f040 8158 	bne.w	8002782 <HAL_GPIO_Init+0x2e2>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4a9a      	ldr	r2, [pc, #616]	; (8002740 <HAL_GPIO_Init+0x2a0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d05e      	beq.n	800259a <HAL_GPIO_Init+0xfa>
 80024dc:	4a98      	ldr	r2, [pc, #608]	; (8002740 <HAL_GPIO_Init+0x2a0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d875      	bhi.n	80025ce <HAL_GPIO_Init+0x12e>
 80024e2:	4a98      	ldr	r2, [pc, #608]	; (8002744 <HAL_GPIO_Init+0x2a4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d058      	beq.n	800259a <HAL_GPIO_Init+0xfa>
 80024e8:	4a96      	ldr	r2, [pc, #600]	; (8002744 <HAL_GPIO_Init+0x2a4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d86f      	bhi.n	80025ce <HAL_GPIO_Init+0x12e>
 80024ee:	4a96      	ldr	r2, [pc, #600]	; (8002748 <HAL_GPIO_Init+0x2a8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d052      	beq.n	800259a <HAL_GPIO_Init+0xfa>
 80024f4:	4a94      	ldr	r2, [pc, #592]	; (8002748 <HAL_GPIO_Init+0x2a8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d869      	bhi.n	80025ce <HAL_GPIO_Init+0x12e>
 80024fa:	4a94      	ldr	r2, [pc, #592]	; (800274c <HAL_GPIO_Init+0x2ac>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d04c      	beq.n	800259a <HAL_GPIO_Init+0xfa>
 8002500:	4a92      	ldr	r2, [pc, #584]	; (800274c <HAL_GPIO_Init+0x2ac>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d863      	bhi.n	80025ce <HAL_GPIO_Init+0x12e>
 8002506:	4a92      	ldr	r2, [pc, #584]	; (8002750 <HAL_GPIO_Init+0x2b0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d046      	beq.n	800259a <HAL_GPIO_Init+0xfa>
 800250c:	4a90      	ldr	r2, [pc, #576]	; (8002750 <HAL_GPIO_Init+0x2b0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d85d      	bhi.n	80025ce <HAL_GPIO_Init+0x12e>
 8002512:	2b12      	cmp	r3, #18
 8002514:	d82a      	bhi.n	800256c <HAL_GPIO_Init+0xcc>
 8002516:	2b12      	cmp	r3, #18
 8002518:	d859      	bhi.n	80025ce <HAL_GPIO_Init+0x12e>
 800251a:	a201      	add	r2, pc, #4	; (adr r2, 8002520 <HAL_GPIO_Init+0x80>)
 800251c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002520:	0800259b 	.word	0x0800259b
 8002524:	08002575 	.word	0x08002575
 8002528:	08002587 	.word	0x08002587
 800252c:	080025c9 	.word	0x080025c9
 8002530:	080025cf 	.word	0x080025cf
 8002534:	080025cf 	.word	0x080025cf
 8002538:	080025cf 	.word	0x080025cf
 800253c:	080025cf 	.word	0x080025cf
 8002540:	080025cf 	.word	0x080025cf
 8002544:	080025cf 	.word	0x080025cf
 8002548:	080025cf 	.word	0x080025cf
 800254c:	080025cf 	.word	0x080025cf
 8002550:	080025cf 	.word	0x080025cf
 8002554:	080025cf 	.word	0x080025cf
 8002558:	080025cf 	.word	0x080025cf
 800255c:	080025cf 	.word	0x080025cf
 8002560:	080025cf 	.word	0x080025cf
 8002564:	0800257d 	.word	0x0800257d
 8002568:	08002591 	.word	0x08002591
 800256c:	4a79      	ldr	r2, [pc, #484]	; (8002754 <HAL_GPIO_Init+0x2b4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_GPIO_Init+0xfa>
 8002572:	e02c      	b.n	80025ce <HAL_GPIO_Init+0x12e>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	623b      	str	r3, [r7, #32]
 800257a:	e029      	b.n	80025d0 <HAL_GPIO_Init+0x130>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	3304      	adds	r3, #4
 8002582:	623b      	str	r3, [r7, #32]
 8002584:	e024      	b.n	80025d0 <HAL_GPIO_Init+0x130>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	3308      	adds	r3, #8
 800258c:	623b      	str	r3, [r7, #32]
 800258e:	e01f      	b.n	80025d0 <HAL_GPIO_Init+0x130>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	330c      	adds	r3, #12
 8002596:	623b      	str	r3, [r7, #32]
 8002598:	e01a      	b.n	80025d0 <HAL_GPIO_Init+0x130>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d102      	bne.n	80025a8 <HAL_GPIO_Init+0x108>
 80025a2:	2304      	movs	r3, #4
 80025a4:	623b      	str	r3, [r7, #32]
 80025a6:	e013      	b.n	80025d0 <HAL_GPIO_Init+0x130>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d105      	bne.n	80025bc <HAL_GPIO_Init+0x11c>
 80025b0:	2308      	movs	r3, #8
 80025b2:	623b      	str	r3, [r7, #32]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	611a      	str	r2, [r3, #16]
 80025ba:	e009      	b.n	80025d0 <HAL_GPIO_Init+0x130>
 80025bc:	2308      	movs	r3, #8
 80025be:	623b      	str	r3, [r7, #32]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	615a      	str	r2, [r3, #20]
 80025c6:	e003      	b.n	80025d0 <HAL_GPIO_Init+0x130>
 80025c8:	2300      	movs	r3, #0
 80025ca:	623b      	str	r3, [r7, #32]
 80025cc:	e000      	b.n	80025d0 <HAL_GPIO_Init+0x130>
 80025ce:	bf00      	nop
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2bff      	cmp	r3, #255	; 0xff
 80025d4:	d801      	bhi.n	80025da <HAL_GPIO_Init+0x13a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	e001      	b.n	80025de <HAL_GPIO_Init+0x13e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3304      	adds	r3, #4
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	2bff      	cmp	r3, #255	; 0xff
 80025e4:	d802      	bhi.n	80025ec <HAL_GPIO_Init+0x14c>
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	e002      	b.n	80025f2 <HAL_GPIO_Init+0x152>
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	3b08      	subs	r3, #8
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	210f      	movs	r1, #15
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	401a      	ands	r2, r3
 8002604:	6a39      	ldr	r1, [r7, #32]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	431a      	orrs	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80b1 	beq.w	8002782 <HAL_GPIO_Init+0x2e2>
 8002620:	4b4d      	ldr	r3, [pc, #308]	; (8002758 <HAL_GPIO_Init+0x2b8>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	4a4c      	ldr	r2, [pc, #304]	; (8002758 <HAL_GPIO_Init+0x2b8>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6193      	str	r3, [r2, #24]
 800262c:	4b4a      	ldr	r3, [pc, #296]	; (8002758 <HAL_GPIO_Init+0x2b8>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	4a48      	ldr	r2, [pc, #288]	; (800275c <HAL_GPIO_Init+0x2bc>)
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	089b      	lsrs	r3, r3, #2
 800263e:	3302      	adds	r3, #2
 8002640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	220f      	movs	r2, #15
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4013      	ands	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a40      	ldr	r2, [pc, #256]	; (8002760 <HAL_GPIO_Init+0x2c0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d013      	beq.n	800268c <HAL_GPIO_Init+0x1ec>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a3f      	ldr	r2, [pc, #252]	; (8002764 <HAL_GPIO_Init+0x2c4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d00d      	beq.n	8002688 <HAL_GPIO_Init+0x1e8>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a3e      	ldr	r2, [pc, #248]	; (8002768 <HAL_GPIO_Init+0x2c8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d007      	beq.n	8002684 <HAL_GPIO_Init+0x1e4>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a3d      	ldr	r2, [pc, #244]	; (800276c <HAL_GPIO_Init+0x2cc>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d101      	bne.n	8002680 <HAL_GPIO_Init+0x1e0>
 800267c:	2303      	movs	r3, #3
 800267e:	e006      	b.n	800268e <HAL_GPIO_Init+0x1ee>
 8002680:	2304      	movs	r3, #4
 8002682:	e004      	b.n	800268e <HAL_GPIO_Init+0x1ee>
 8002684:	2302      	movs	r3, #2
 8002686:	e002      	b.n	800268e <HAL_GPIO_Init+0x1ee>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <HAL_GPIO_Init+0x1ee>
 800268c:	2300      	movs	r3, #0
 800268e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002690:	f002 0203 	and.w	r2, r2, #3
 8002694:	0092      	lsls	r2, r2, #2
 8002696:	4093      	lsls	r3, r2
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	492f      	ldr	r1, [pc, #188]	; (800275c <HAL_GPIO_Init+0x2bc>)
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	089b      	lsrs	r3, r3, #2
 80026a4:	3302      	adds	r3, #2
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d006      	beq.n	80026c6 <HAL_GPIO_Init+0x226>
 80026b8:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	492c      	ldr	r1, [pc, #176]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	608b      	str	r3, [r1, #8]
 80026c4:	e006      	b.n	80026d4 <HAL_GPIO_Init+0x234>
 80026c6:	4b2a      	ldr	r3, [pc, #168]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	4928      	ldr	r1, [pc, #160]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	608b      	str	r3, [r1, #8]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d006      	beq.n	80026ee <HAL_GPIO_Init+0x24e>
 80026e0:	4b23      	ldr	r3, [pc, #140]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	4922      	ldr	r1, [pc, #136]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	60cb      	str	r3, [r1, #12]
 80026ec:	e006      	b.n	80026fc <HAL_GPIO_Init+0x25c>
 80026ee:	4b20      	ldr	r3, [pc, #128]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	491e      	ldr	r1, [pc, #120]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	60cb      	str	r3, [r1, #12]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d006      	beq.n	8002716 <HAL_GPIO_Init+0x276>
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	4918      	ldr	r1, [pc, #96]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
 8002714:	e006      	b.n	8002724 <HAL_GPIO_Init+0x284>
 8002716:	4b16      	ldr	r3, [pc, #88]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	43db      	mvns	r3, r3
 800271e:	4914      	ldr	r1, [pc, #80]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 8002720:	4013      	ands	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d021      	beq.n	8002774 <HAL_GPIO_Init+0x2d4>
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	490e      	ldr	r1, [pc, #56]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	600b      	str	r3, [r1, #0]
 800273c:	e021      	b.n	8002782 <HAL_GPIO_Init+0x2e2>
 800273e:	bf00      	nop
 8002740:	10320000 	.word	0x10320000
 8002744:	10310000 	.word	0x10310000
 8002748:	10220000 	.word	0x10220000
 800274c:	10210000 	.word	0x10210000
 8002750:	10120000 	.word	0x10120000
 8002754:	10110000 	.word	0x10110000
 8002758:	40021000 	.word	0x40021000
 800275c:	40010000 	.word	0x40010000
 8002760:	40010800 	.word	0x40010800
 8002764:	40010c00 	.word	0x40010c00
 8002768:	40011000 	.word	0x40011000
 800276c:	40011400 	.word	0x40011400
 8002770:	40010400 	.word	0x40010400
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_GPIO_Init+0x304>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	43db      	mvns	r3, r3
 800277c:	4909      	ldr	r1, [pc, #36]	; (80027a4 <HAL_GPIO_Init+0x304>)
 800277e:	4013      	ands	r3, r2
 8002780:	600b      	str	r3, [r1, #0]
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	3301      	adds	r3, #1
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	fa22 f303 	lsr.w	r3, r2, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	f47f ae8e 	bne.w	80024b4 <HAL_GPIO_Init+0x14>
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	372c      	adds	r7, #44	; 0x2c
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	40010400 	.word	0x40010400

080027a8 <HAL_GPIO_ReadPin>:
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_GPIO_ReadPin+0x1e>
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e001      	b.n	80027ca <HAL_GPIO_ReadPin+0x22>
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <HAL_GPIO_WritePin>:
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	460b      	mov	r3, r1
 80027e0:	807b      	strh	r3, [r7, #2]
 80027e2:	4613      	mov	r3, r2
 80027e4:	707b      	strb	r3, [r7, #1]
 80027e6:	787b      	ldrb	r3, [r7, #1]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_WritePin+0x1e>
 80027ec:	887a      	ldrh	r2, [r7, #2]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	611a      	str	r2, [r3, #16]
 80027f2:	e003      	b.n	80027fc <HAL_GPIO_WritePin+0x26>
 80027f4:	887b      	ldrh	r3, [r7, #2]
 80027f6:	041a      	lsls	r2, r3, #16
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	611a      	str	r2, [r3, #16]
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
	...

08002808 <HAL_RCC_OscConfig>:
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x12>
 8002816:	2301      	movs	r3, #1
 8002818:	e272      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8087 	beq.w	8002936 <HAL_RCC_OscConfig+0x12e>
 8002828:	4b92      	ldr	r3, [pc, #584]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b04      	cmp	r3, #4
 8002832:	d00c      	beq.n	800284e <HAL_RCC_OscConfig+0x46>
 8002834:	4b8f      	ldr	r3, [pc, #572]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b08      	cmp	r3, #8
 800283e:	d112      	bne.n	8002866 <HAL_RCC_OscConfig+0x5e>
 8002840:	4b8c      	ldr	r3, [pc, #560]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284c:	d10b      	bne.n	8002866 <HAL_RCC_OscConfig+0x5e>
 800284e:	4b89      	ldr	r3, [pc, #548]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d06c      	beq.n	8002934 <HAL_RCC_OscConfig+0x12c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d168      	bne.n	8002934 <HAL_RCC_OscConfig+0x12c>
 8002862:	2301      	movs	r3, #1
 8002864:	e24c      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286e:	d106      	bne.n	800287e <HAL_RCC_OscConfig+0x76>
 8002870:	4b80      	ldr	r3, [pc, #512]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a7f      	ldr	r2, [pc, #508]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	e02e      	b.n	80028dc <HAL_RCC_OscConfig+0xd4>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x98>
 8002886:	4b7b      	ldr	r3, [pc, #492]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a7a      	ldr	r2, [pc, #488]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 800288c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b78      	ldr	r3, [pc, #480]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a77      	ldr	r2, [pc, #476]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e01d      	b.n	80028dc <HAL_RCC_OscConfig+0xd4>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCC_OscConfig+0xbc>
 80028aa:	4b72      	ldr	r3, [pc, #456]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a71      	ldr	r2, [pc, #452]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	4b6f      	ldr	r3, [pc, #444]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a6e      	ldr	r2, [pc, #440]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e00b      	b.n	80028dc <HAL_RCC_OscConfig+0xd4>
 80028c4:	4b6b      	ldr	r3, [pc, #428]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a6a      	ldr	r2, [pc, #424]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	4b68      	ldr	r3, [pc, #416]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a67      	ldr	r2, [pc, #412]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <HAL_RCC_OscConfig+0x104>
 80028e4:	f7ff fcca 	bl	800227c <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0xf6>
 80028ec:	f7ff fcc6 	bl	800227c <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0xf6>
 80028fa:	2303      	movs	r3, #3
 80028fc:	e200      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 80028fe:	4b5d      	ldr	r3, [pc, #372]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0xe4>
 800290a:	e014      	b.n	8002936 <HAL_RCC_OscConfig+0x12e>
 800290c:	f7ff fcb6 	bl	800227c <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x11e>
 8002914:	f7ff fcb2 	bl	800227c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x11e>
 8002922:	2303      	movs	r3, #3
 8002924:	e1ec      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 8002926:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x10c>
 8002932:	e000      	b.n	8002936 <HAL_RCC_OscConfig+0x12e>
 8002934:	bf00      	nop
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d063      	beq.n	8002a0a <HAL_RCC_OscConfig+0x202>
 8002942:	4b4c      	ldr	r3, [pc, #304]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <HAL_RCC_OscConfig+0x15e>
 800294e:	4b49      	ldr	r3, [pc, #292]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b08      	cmp	r3, #8
 8002958:	d11c      	bne.n	8002994 <HAL_RCC_OscConfig+0x18c>
 800295a:	4b46      	ldr	r3, [pc, #280]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d116      	bne.n	8002994 <HAL_RCC_OscConfig+0x18c>
 8002966:	4b43      	ldr	r3, [pc, #268]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d005      	beq.n	800297e <HAL_RCC_OscConfig+0x176>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0x176>
 800297a:	2301      	movs	r3, #1
 800297c:	e1c0      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 800297e:	4b3d      	ldr	r3, [pc, #244]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4939      	ldr	r1, [pc, #228]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 800298e:	4313      	orrs	r3, r2
 8002990:	600b      	str	r3, [r1, #0]
 8002992:	e03a      	b.n	8002a0a <HAL_RCC_OscConfig+0x202>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d020      	beq.n	80029de <HAL_RCC_OscConfig+0x1d6>
 800299c:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <HAL_RCC_OscConfig+0x270>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	f7ff fc6b 	bl	800227c <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x1b4>
 80029aa:	f7ff fc67 	bl	800227c <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x1b4>
 80029b8:	2303      	movs	r3, #3
 80029ba:	e1a1      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 80029bc:	4b2d      	ldr	r3, [pc, #180]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x1a2>
 80029c8:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4927      	ldr	r1, [pc, #156]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	600b      	str	r3, [r1, #0]
 80029dc:	e015      	b.n	8002a0a <HAL_RCC_OscConfig+0x202>
 80029de:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <HAL_RCC_OscConfig+0x270>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	f7ff fc4a 	bl	800227c <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x1f6>
 80029ec:	f7ff fc46 	bl	800227c <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x1f6>
 80029fa:	2303      	movs	r3, #3
 80029fc:	e180      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 80029fe:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x1e4>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d03a      	beq.n	8002a8c <HAL_RCC_OscConfig+0x284>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d019      	beq.n	8002a52 <HAL_RCC_OscConfig+0x24a>
 8002a1e:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	f7ff fc2a 	bl	800227c <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x236>
 8002a2c:	f7ff fc26 	bl	800227c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x236>
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e160      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x224>
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	f000 fabc 	bl	8002fc8 <RCC_Delay>
 8002a50:	e01c      	b.n	8002a8c <HAL_RCC_OscConfig+0x284>
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	f7ff fc10 	bl	800227c <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]
 8002a5e:	e00f      	b.n	8002a80 <HAL_RCC_OscConfig+0x278>
 8002a60:	f7ff fc0c 	bl	800227c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d908      	bls.n	8002a80 <HAL_RCC_OscConfig+0x278>
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e146      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000
 8002a78:	42420000 	.word	0x42420000
 8002a7c:	42420480 	.word	0x42420480
 8002a80:	4b92      	ldr	r3, [pc, #584]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1e9      	bne.n	8002a60 <HAL_RCC_OscConfig+0x258>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80a6 	beq.w	8002be6 <HAL_RCC_OscConfig+0x3de>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	75fb      	strb	r3, [r7, #23]
 8002a9e:	4b8b      	ldr	r3, [pc, #556]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10d      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x2be>
 8002aaa:	4b88      	ldr	r3, [pc, #544]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	4a87      	ldr	r2, [pc, #540]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	61d3      	str	r3, [r2, #28]
 8002ab6:	4b85      	ldr	r3, [pc, #532]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]
 8002ac6:	4b82      	ldr	r3, [pc, #520]	; (8002cd0 <HAL_RCC_OscConfig+0x4c8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d118      	bne.n	8002b04 <HAL_RCC_OscConfig+0x2fc>
 8002ad2:	4b7f      	ldr	r3, [pc, #508]	; (8002cd0 <HAL_RCC_OscConfig+0x4c8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a7e      	ldr	r2, [pc, #504]	; (8002cd0 <HAL_RCC_OscConfig+0x4c8>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	f7ff fbcd 	bl	800227c <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x2f0>
 8002ae6:	f7ff fbc9 	bl	800227c <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b64      	cmp	r3, #100	; 0x64
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x2f0>
 8002af4:	2303      	movs	r3, #3
 8002af6:	e103      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 8002af8:	4b75      	ldr	r3, [pc, #468]	; (8002cd0 <HAL_RCC_OscConfig+0x4c8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x2de>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d106      	bne.n	8002b1a <HAL_RCC_OscConfig+0x312>
 8002b0c:	4b6f      	ldr	r3, [pc, #444]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	4a6e      	ldr	r2, [pc, #440]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6213      	str	r3, [r2, #32]
 8002b18:	e02d      	b.n	8002b76 <HAL_RCC_OscConfig+0x36e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x334>
 8002b22:	4b6a      	ldr	r3, [pc, #424]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	4a69      	ldr	r2, [pc, #420]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	f023 0301 	bic.w	r3, r3, #1
 8002b2c:	6213      	str	r3, [r2, #32]
 8002b2e:	4b67      	ldr	r3, [pc, #412]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4a66      	ldr	r2, [pc, #408]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	f023 0304 	bic.w	r3, r3, #4
 8002b38:	6213      	str	r3, [r2, #32]
 8002b3a:	e01c      	b.n	8002b76 <HAL_RCC_OscConfig+0x36e>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b05      	cmp	r3, #5
 8002b42:	d10c      	bne.n	8002b5e <HAL_RCC_OscConfig+0x356>
 8002b44:	4b61      	ldr	r3, [pc, #388]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	4a60      	ldr	r2, [pc, #384]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	6213      	str	r3, [r2, #32]
 8002b50:	4b5e      	ldr	r3, [pc, #376]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	4a5d      	ldr	r2, [pc, #372]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6213      	str	r3, [r2, #32]
 8002b5c:	e00b      	b.n	8002b76 <HAL_RCC_OscConfig+0x36e>
 8002b5e:	4b5b      	ldr	r3, [pc, #364]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4a5a      	ldr	r2, [pc, #360]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	6213      	str	r3, [r2, #32]
 8002b6a:	4b58      	ldr	r3, [pc, #352]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	4a57      	ldr	r2, [pc, #348]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	f023 0304 	bic.w	r3, r3, #4
 8002b74:	6213      	str	r3, [r2, #32]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d015      	beq.n	8002baa <HAL_RCC_OscConfig+0x3a2>
 8002b7e:	f7ff fb7d 	bl	800227c <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x394>
 8002b86:	f7ff fb79 	bl	800227c <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x394>
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e0b1      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 8002b9c:	4b4b      	ldr	r3, [pc, #300]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ee      	beq.n	8002b86 <HAL_RCC_OscConfig+0x37e>
 8002ba8:	e014      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3cc>
 8002baa:	f7ff fb67 	bl	800227c <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
 8002bb2:	f7ff fb63 	bl	800227c <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e09b      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 8002bc8:	4b40      	ldr	r3, [pc, #256]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1ee      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x3aa>
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d105      	bne.n	8002be6 <HAL_RCC_OscConfig+0x3de>
 8002bda:	4b3c      	ldr	r3, [pc, #240]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	4a3b      	ldr	r2, [pc, #236]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be4:	61d3      	str	r3, [r2, #28]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8087 	beq.w	8002cfe <HAL_RCC_OscConfig+0x4f6>
 8002bf0:	4b36      	ldr	r3, [pc, #216]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d061      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x4b8>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d146      	bne.n	8002c92 <HAL_RCC_OscConfig+0x48a>
 8002c04:	4b33      	ldr	r3, [pc, #204]	; (8002cd4 <HAL_RCC_OscConfig+0x4cc>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	f7ff fb37 	bl	800227c <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x41c>
 8002c12:	f7ff fb33 	bl	800227c <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x41c>
 8002c20:	2303      	movs	r3, #3
 8002c22:	e06d      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 8002c24:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f0      	bne.n	8002c12 <HAL_RCC_OscConfig+0x40a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c38:	d108      	bne.n	8002c4c <HAL_RCC_OscConfig+0x444>
 8002c3a:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	4921      	ldr	r1, [pc, #132]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]
 8002c4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a19      	ldr	r1, [r3, #32]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	491b      	ldr	r1, [pc, #108]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
 8002c64:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_RCC_OscConfig+0x4cc>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	f7ff fb07 	bl	800227c <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x47c>
 8002c72:	f7ff fb03 	bl	800227c <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x47c>
 8002c80:	2303      	movs	r3, #3
 8002c82:	e03d      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x46a>
 8002c90:	e035      	b.n	8002cfe <HAL_RCC_OscConfig+0x4f6>
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <HAL_RCC_OscConfig+0x4cc>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	f7ff faf0 	bl	800227c <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4aa>
 8002ca0:	f7ff faec 	bl	800227c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x4aa>
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e026      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x498>
 8002cbe:	e01e      	b.n	8002cfe <HAL_RCC_OscConfig+0x4f6>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x4d0>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e019      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	42420060 	.word	0x42420060
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCC_OscConfig+0x500>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d106      	bne.n	8002cfa <HAL_RCC_OscConfig+0x4f2>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCC_OscConfig+0x4f6>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000

08002d0c <HAL_RCC_ClockConfig>:
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x14>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0d0      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
 8002d20:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d910      	bls.n	8002d50 <HAL_RCC_ClockConfig+0x44>
 8002d2e:	4b67      	ldr	r3, [pc, #412]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 0207 	bic.w	r2, r3, #7
 8002d36:	4965      	ldr	r1, [pc, #404]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
 8002d3e:	4b63      	ldr	r3, [pc, #396]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x44>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0b8      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d020      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x92>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x68>
 8002d68:	4b59      	ldr	r3, [pc, #356]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4a58      	ldr	r2, [pc, #352]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d72:	6053      	str	r3, [r2, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x80>
 8002d80:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4a52      	ldr	r2, [pc, #328]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d8a:	6053      	str	r3, [r2, #4]
 8002d8c:	4b50      	ldr	r3, [pc, #320]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	494d      	ldr	r1, [pc, #308]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	604b      	str	r3, [r1, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d040      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x120>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xb6>
 8002db2:	4b47      	ldr	r3, [pc, #284]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d115      	bne.n	8002dea <HAL_RCC_ClockConfig+0xde>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e07f      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xce>
 8002dca:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d109      	bne.n	8002dea <HAL_RCC_ClockConfig+0xde>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e073      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
 8002dda:	4b3d      	ldr	r3, [pc, #244]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_ClockConfig+0xde>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e06b      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
 8002dea:	4b39      	ldr	r3, [pc, #228]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f023 0203 	bic.w	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4936      	ldr	r1, [pc, #216]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
 8002dfc:	f7ff fa3e 	bl	800227c <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	e00a      	b.n	8002e1a <HAL_RCC_ClockConfig+0x10e>
 8002e04:	f7ff fa3a 	bl	800227c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x10e>
 8002e16:	2303      	movs	r3, #3
 8002e18:	e053      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
 8002e1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 020c 	and.w	r2, r3, #12
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d1eb      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xf8>
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d210      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x150>
 8002e3a:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 0207 	bic.w	r2, r3, #7
 8002e42:	4922      	ldr	r1, [pc, #136]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x150>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e032      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x16e>
 8002e68:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4916      	ldr	r1, [pc, #88]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x18e>
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	490e      	ldr	r1, [pc, #56]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]
 8002e9a:	f000 f82d 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	490a      	ldr	r1, [pc, #40]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002eac:	5ccb      	ldrb	r3, [r1, r3]
 8002eae:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb2:	4a09      	ldr	r2, [pc, #36]	; (8002ed8 <HAL_RCC_ClockConfig+0x1cc>)
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_RCC_ClockConfig+0x1d0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff f99c 	bl	80021f8 <HAL_InitTick>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40022000 	.word	0x40022000
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	08005304 	.word	0x08005304
 8002ed8:	20000018 	.word	0x20000018
 8002edc:	2000004c 	.word	0x2000004c

08002ee0 <HAL_RCC_EnableCSS>:
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <HAL_RCC_EnableCSS+0x14>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	4242004c 	.word	0x4242004c

08002ef8 <HAL_RCC_GetSysClockFreq>:
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	4b1e      	ldr	r3, [pc, #120]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d002      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0x30>
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d003      	beq.n	8002f2e <HAL_RCC_GetSysClockFreq+0x36>
 8002f26:	e027      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x80>
 8002f28:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	e027      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0x86>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	0c9b      	lsrs	r3, r3, #18
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f38:	5cd3      	ldrb	r3, [r2, r3]
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d010      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0x70>
 8002f46:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	0c5b      	lsrs	r3, r3, #17
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	4a11      	ldr	r2, [pc, #68]	; (8002f98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f52:	5cd3      	ldrb	r3, [r2, r3]
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a0d      	ldr	r2, [pc, #52]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f5a:	fb03 f202 	mul.w	r2, r3, r2
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	e004      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x7a>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a0c      	ldr	r2, [pc, #48]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f6c:	fb02 f303 	mul.w	r3, r2, r3
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	e002      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0x86>
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	bf00      	nop
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4618      	mov	r0, r3
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	007a1200 	.word	0x007a1200
 8002f94:	08005314 	.word	0x08005314
 8002f98:	08005324 	.word	0x08005324
 8002f9c:	003d0900 	.word	0x003d0900

08002fa0 <HAL_RCC_NMI_IRQHandler>:
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fac:	2b80      	cmp	r3, #128	; 0x80
 8002fae:	d104      	bne.n	8002fba <HAL_RCC_NMI_IRQHandler+0x1a>
 8002fb0:	f000 f828 	bl	8003004 <HAL_RCC_CSSCallback>
 8002fb4:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002fb6:	2280      	movs	r2, #128	; 0x80
 8002fb8:	701a      	strb	r2, [r3, #0]
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	4002100a 	.word	0x4002100a

08002fc8 <RCC_Delay>:
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <RCC_Delay+0x34>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <RCC_Delay+0x38>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	0a5b      	lsrs	r3, r3, #9
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	fb02 f303 	mul.w	r3, r2, r3
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	bf00      	nop
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1e5a      	subs	r2, r3, #1
 8002fea:	60fa      	str	r2, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f9      	bne.n	8002fe4 <RCC_Delay+0x1c>
 8002ff0:	bf00      	nop
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr
 8002ffc:	20000018 	.word	0x20000018
 8003000:	10624dd3 	.word	0x10624dd3

08003004 <HAL_RCC_CSSCallback>:
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <HAL_SPI_Init>:
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_SPI_Init+0x12>
 800301e:	2301      	movs	r3, #1
 8003020:	e076      	b.n	8003110 <HAL_SPI_Init+0x100>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	2b00      	cmp	r3, #0
 8003028:	d108      	bne.n	800303c <HAL_SPI_Init+0x2c>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003032:	d009      	beq.n	8003048 <HAL_SPI_Init+0x38>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	61da      	str	r2, [r3, #28]
 800303a:	e005      	b.n	8003048 <HAL_SPI_Init+0x38>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	611a      	str	r2, [r3, #16]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	615a      	str	r2, [r3, #20]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	629a      	str	r2, [r3, #40]	; 0x28
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_SPI_Init+0x58>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fd fa4c 	bl	8000500 <HAL_SPI_MspInit>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030cc:	ea42 0103 	orr.w	r1, r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	0c1a      	lsrs	r2, r3, #16
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f002 0204 	and.w	r2, r2, #4
 80030ee:	605a      	str	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030fe:	61da      	str	r2, [r3, #28]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800310e:	2300      	movs	r3, #0
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_SPI_Transmit>:
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	80fb      	strh	r3, [r7, #6]
 8003128:	2300      	movs	r3, #0
 800312a:	77fb      	strb	r3, [r7, #31]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_SPI_Transmit+0x22>
 8003136:	2302      	movs	r3, #2
 8003138:	e12d      	b.n	8003396 <HAL_SPI_Transmit+0x27e>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003142:	f7ff f89b 	bl	800227c <HAL_GetTick>
 8003146:	61b8      	str	r0, [r7, #24]
 8003148:	88fb      	ldrh	r3, [r7, #6]
 800314a:	82fb      	strh	r3, [r7, #22]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	d002      	beq.n	800315e <HAL_SPI_Transmit+0x46>
 8003158:	2302      	movs	r3, #2
 800315a:	77fb      	strb	r3, [r7, #31]
 800315c:	e116      	b.n	800338c <HAL_SPI_Transmit+0x274>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <HAL_SPI_Transmit+0x52>
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <HAL_SPI_Transmit+0x58>
 800316a:	2301      	movs	r3, #1
 800316c:	77fb      	strb	r3, [r7, #31]
 800316e:	e10d      	b.n	800338c <HAL_SPI_Transmit+0x274>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2203      	movs	r2, #3
 8003174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	655a      	str	r2, [r3, #84]	; 0x54
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	631a      	str	r2, [r3, #48]	; 0x30
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	88fa      	ldrh	r2, [r7, #6]
 8003188:	869a      	strh	r2, [r3, #52]	; 0x34
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	88fa      	ldrh	r2, [r7, #6]
 800318e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	639a      	str	r2, [r3, #56]	; 0x38
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	879a      	strh	r2, [r3, #60]	; 0x3c
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	645a      	str	r2, [r3, #68]	; 0x44
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031b6:	d10f      	bne.n	80031d8 <HAL_SPI_Transmit+0xc0>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e2:	2b40      	cmp	r3, #64	; 0x40
 80031e4:	d007      	beq.n	80031f6 <HAL_SPI_Transmit+0xde>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031fe:	d14f      	bne.n	80032a0 <HAL_SPI_Transmit+0x188>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_SPI_Transmit+0xf6>
 8003208:	8afb      	ldrh	r3, [r7, #22]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d142      	bne.n	8003294 <HAL_SPI_Transmit+0x17c>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	881a      	ldrh	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	1c9a      	adds	r2, r3, #2
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	86da      	strh	r2, [r3, #54]	; 0x36
 8003232:	e02f      	b.n	8003294 <HAL_SPI_Transmit+0x17c>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b02      	cmp	r3, #2
 8003240:	d112      	bne.n	8003268 <HAL_SPI_Transmit+0x150>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	881a      	ldrh	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	1c9a      	adds	r2, r3, #2
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	86da      	strh	r2, [r3, #54]	; 0x36
 8003266:	e015      	b.n	8003294 <HAL_SPI_Transmit+0x17c>
 8003268:	f7ff f808 	bl	800227c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d803      	bhi.n	8003280 <HAL_SPI_Transmit+0x168>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327e:	d102      	bne.n	8003286 <HAL_SPI_Transmit+0x16e>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_SPI_Transmit+0x17c>
 8003286:	2303      	movs	r3, #3
 8003288:	77fb      	strb	r3, [r7, #31]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003292:	e07b      	b.n	800338c <HAL_SPI_Transmit+0x274>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1ca      	bne.n	8003234 <HAL_SPI_Transmit+0x11c>
 800329e:	e050      	b.n	8003342 <HAL_SPI_Transmit+0x22a>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <HAL_SPI_Transmit+0x196>
 80032a8:	8afb      	ldrh	r3, [r7, #22]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d144      	bne.n	8003338 <HAL_SPI_Transmit+0x220>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	330c      	adds	r3, #12
 80032b8:	7812      	ldrb	r2, [r2, #0]
 80032ba:	701a      	strb	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80032d4:	e030      	b.n	8003338 <HAL_SPI_Transmit+0x220>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d113      	bne.n	800330c <HAL_SPI_Transmit+0x1f4>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	330c      	adds	r3, #12
 80032ee:	7812      	ldrb	r2, [r2, #0]
 80032f0:	701a      	strb	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	631a      	str	r2, [r3, #48]	; 0x30
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	86da      	strh	r2, [r3, #54]	; 0x36
 800330a:	e015      	b.n	8003338 <HAL_SPI_Transmit+0x220>
 800330c:	f7fe ffb6 	bl	800227c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d803      	bhi.n	8003324 <HAL_SPI_Transmit+0x20c>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003322:	d102      	bne.n	800332a <HAL_SPI_Transmit+0x212>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_SPI_Transmit+0x220>
 800332a:	2303      	movs	r3, #3
 800332c:	77fb      	strb	r3, [r7, #31]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003336:	e029      	b.n	800338c <HAL_SPI_Transmit+0x274>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1c9      	bne.n	80032d6 <HAL_SPI_Transmit+0x1be>
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	6839      	ldr	r1, [r7, #0]
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 fbcc 	bl	8003ae4 <SPI_EndRxTxTransaction>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <HAL_SPI_Transmit+0x240>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	655a      	str	r2, [r3, #84]	; 0x54
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10a      	bne.n	8003376 <HAL_SPI_Transmit+0x25e>
 8003360:	2300      	movs	r3, #0
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <HAL_SPI_Transmit+0x26c>
 800337e:	2301      	movs	r3, #1
 8003380:	77fb      	strb	r3, [r7, #31]
 8003382:	e003      	b.n	800338c <HAL_SPI_Transmit+0x274>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003394:	7ffb      	ldrb	r3, [r7, #31]
 8003396:	4618      	mov	r0, r3
 8003398:	3720      	adds	r7, #32
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_SPI_Receive>:
 800339e:	b580      	push	{r7, lr}
 80033a0:	b088      	sub	sp, #32
 80033a2:	af02      	add	r7, sp, #8
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	4613      	mov	r3, r2
 80033ac:	80fb      	strh	r3, [r7, #6]
 80033ae:	2300      	movs	r3, #0
 80033b0:	75fb      	strb	r3, [r7, #23]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d002      	beq.n	80033c4 <HAL_SPI_Receive+0x26>
 80033be:	2302      	movs	r3, #2
 80033c0:	75fb      	strb	r3, [r7, #23]
 80033c2:	e0fb      	b.n	80035bc <HAL_SPI_Receive+0x21e>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033cc:	d112      	bne.n	80033f4 <HAL_SPI_Receive+0x56>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10e      	bne.n	80033f4 <HAL_SPI_Receive+0x56>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2204      	movs	r2, #4
 80033da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80033de:	88fa      	ldrh	r2, [r7, #6]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	4613      	mov	r3, r2
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f8ef 	bl	80035ce <HAL_SPI_TransmitReceive>
 80033f0:	4603      	mov	r3, r0
 80033f2:	e0e8      	b.n	80035c6 <HAL_SPI_Receive+0x228>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_SPI_Receive+0x64>
 80033fe:	2302      	movs	r3, #2
 8003400:	e0e1      	b.n	80035c6 <HAL_SPI_Receive+0x228>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800340a:	f7fe ff37 	bl	800227c <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_SPI_Receive+0x7e>
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d102      	bne.n	8003422 <HAL_SPI_Receive+0x84>
 800341c:	2301      	movs	r3, #1
 800341e:	75fb      	strb	r3, [r7, #23]
 8003420:	e0cc      	b.n	80035bc <HAL_SPI_Receive+0x21e>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2204      	movs	r2, #4
 8003426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	655a      	str	r2, [r3, #84]	; 0x54
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	639a      	str	r2, [r3, #56]	; 0x38
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	88fa      	ldrh	r2, [r7, #6]
 800343a:	879a      	strh	r2, [r3, #60]	; 0x3c
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	88fa      	ldrh	r2, [r7, #6]
 8003440:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	869a      	strh	r2, [r3, #52]	; 0x34
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	86da      	strh	r2, [r3, #54]	; 0x36
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	645a      	str	r2, [r3, #68]	; 0x44
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003468:	d10f      	bne.n	800348a <HAL_SPI_Receive+0xec>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003494:	2b40      	cmp	r3, #64	; 0x40
 8003496:	d007      	beq.n	80034a8 <HAL_SPI_Receive+0x10a>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d16a      	bne.n	8003586 <HAL_SPI_Receive+0x1e8>
 80034b0:	e032      	b.n	8003518 <HAL_SPI_Receive+0x17a>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d115      	bne.n	80034ec <HAL_SPI_Receive+0x14e>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f103 020c 	add.w	r2, r3, #12
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	7812      	ldrb	r2, [r2, #0]
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	639a      	str	r2, [r3, #56]	; 0x38
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034ea:	e015      	b.n	8003518 <HAL_SPI_Receive+0x17a>
 80034ec:	f7fe fec6 	bl	800227c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d803      	bhi.n	8003504 <HAL_SPI_Receive+0x166>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003502:	d102      	bne.n	800350a <HAL_SPI_Receive+0x16c>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_SPI_Receive+0x17a>
 800350a:	2303      	movs	r3, #3
 800350c:	75fb      	strb	r3, [r7, #23]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003516:	e051      	b.n	80035bc <HAL_SPI_Receive+0x21e>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1c7      	bne.n	80034b2 <HAL_SPI_Receive+0x114>
 8003522:	e035      	b.n	8003590 <HAL_SPI_Receive+0x1f2>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b01      	cmp	r3, #1
 8003530:	d113      	bne.n	800355a <HAL_SPI_Receive+0x1bc>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	b292      	uxth	r2, r2
 800353e:	801a      	strh	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	1c9a      	adds	r2, r3, #2
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	639a      	str	r2, [r3, #56]	; 0x38
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003558:	e015      	b.n	8003586 <HAL_SPI_Receive+0x1e8>
 800355a:	f7fe fe8f 	bl	800227c <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d803      	bhi.n	8003572 <HAL_SPI_Receive+0x1d4>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003570:	d102      	bne.n	8003578 <HAL_SPI_Receive+0x1da>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d106      	bne.n	8003586 <HAL_SPI_Receive+0x1e8>
 8003578:	2303      	movs	r3, #3
 800357a:	75fb      	strb	r3, [r7, #23]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003584:	e01a      	b.n	80035bc <HAL_SPI_Receive+0x21e>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1c9      	bne.n	8003524 <HAL_SPI_Receive+0x186>
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	6839      	ldr	r1, [r7, #0]
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fa53 	bl	8003a40 <SPI_EndRxTransaction>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <HAL_SPI_Receive+0x208>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <HAL_SPI_Receive+0x216>
 80035ae:	2301      	movs	r3, #1
 80035b0:	75fb      	strb	r3, [r7, #23]
 80035b2:	e003      	b.n	80035bc <HAL_SPI_Receive+0x21e>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80035c4:	7dfb      	ldrb	r3, [r7, #23]
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_SPI_TransmitReceive>:
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b08c      	sub	sp, #48	; 0x30
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	807b      	strh	r3, [r7, #2]
 80035dc:	2301      	movs	r3, #1
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e0:	2300      	movs	r3, #0
 80035e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_SPI_TransmitReceive+0x26>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e198      	b.n	8003926 <HAL_SPI_TransmitReceive+0x358>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80035fc:	f7fe fe3e 	bl	800227c <HAL_GetTick>
 8003600:	6278      	str	r0, [r7, #36]	; 0x24
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	887b      	ldrh	r3, [r7, #2]
 8003614:	837b      	strh	r3, [r7, #26]
 8003616:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800361a:	2b01      	cmp	r3, #1
 800361c:	d00f      	beq.n	800363e <HAL_SPI_TransmitReceive+0x70>
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003624:	d107      	bne.n	8003636 <HAL_SPI_TransmitReceive+0x68>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d103      	bne.n	8003636 <HAL_SPI_TransmitReceive+0x68>
 800362e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003632:	2b04      	cmp	r3, #4
 8003634:	d003      	beq.n	800363e <HAL_SPI_TransmitReceive+0x70>
 8003636:	2302      	movs	r3, #2
 8003638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800363c:	e16d      	b.n	800391a <HAL_SPI_TransmitReceive+0x34c>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_SPI_TransmitReceive+0x82>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_SPI_TransmitReceive+0x82>
 800364a:	887b      	ldrh	r3, [r7, #2]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d103      	bne.n	8003658 <HAL_SPI_TransmitReceive+0x8a>
 8003650:	2301      	movs	r3, #1
 8003652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003656:	e160      	b.n	800391a <HAL_SPI_TransmitReceive+0x34c>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b04      	cmp	r3, #4
 8003662:	d003      	beq.n	800366c <HAL_SPI_TransmitReceive+0x9e>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2205      	movs	r2, #5
 8003668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	655a      	str	r2, [r3, #84]	; 0x54
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	639a      	str	r2, [r3, #56]	; 0x38
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	887a      	ldrh	r2, [r7, #2]
 800367c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	887a      	ldrh	r2, [r7, #2]
 8003682:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	887a      	ldrh	r2, [r7, #2]
 800368e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	887a      	ldrh	r2, [r7, #2]
 8003694:	869a      	strh	r2, [r3, #52]	; 0x34
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	641a      	str	r2, [r3, #64]	; 0x40
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	d007      	beq.n	80036c0 <HAL_SPI_TransmitReceive+0xf2>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c8:	d17c      	bne.n	80037c4 <HAL_SPI_TransmitReceive+0x1f6>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0x10a>
 80036d2:	8b7b      	ldrh	r3, [r7, #26]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d16a      	bne.n	80037ae <HAL_SPI_TransmitReceive+0x1e0>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	881a      	ldrh	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60da      	str	r2, [r3, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	1c9a      	adds	r2, r3, #2
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	631a      	str	r2, [r3, #48]	; 0x30
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80036fc:	e057      	b.n	80037ae <HAL_SPI_TransmitReceive+0x1e0>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b02      	cmp	r3, #2
 800370a:	d11b      	bne.n	8003744 <HAL_SPI_TransmitReceive+0x176>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d016      	beq.n	8003744 <HAL_SPI_TransmitReceive+0x176>
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	2b01      	cmp	r3, #1
 800371a:	d113      	bne.n	8003744 <HAL_SPI_TransmitReceive+0x176>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	881a      	ldrh	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60da      	str	r2, [r3, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	1c9a      	adds	r2, r3, #2
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	631a      	str	r2, [r3, #48]	; 0x30
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003740:	2300      	movs	r3, #0
 8003742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b01      	cmp	r3, #1
 8003750:	d119      	bne.n	8003786 <HAL_SPI_TransmitReceive+0x1b8>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d014      	beq.n	8003786 <HAL_SPI_TransmitReceive+0x1b8>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	b292      	uxth	r2, r2
 8003768:	801a      	strh	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	1c9a      	adds	r2, r3, #2
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	639a      	str	r2, [r3, #56]	; 0x38
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003782:	2301      	movs	r3, #1
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003786:	f7fe fd79 	bl	800227c <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003792:	429a      	cmp	r2, r3
 8003794:	d80b      	bhi.n	80037ae <HAL_SPI_TransmitReceive+0x1e0>
 8003796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d007      	beq.n	80037ae <HAL_SPI_TransmitReceive+0x1e0>
 800379e:	2303      	movs	r3, #3
 80037a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80037ac:	e0b5      	b.n	800391a <HAL_SPI_TransmitReceive+0x34c>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1a2      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x130>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d19d      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x130>
 80037c2:	e080      	b.n	80038c6 <HAL_SPI_TransmitReceive+0x2f8>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <HAL_SPI_TransmitReceive+0x204>
 80037cc:	8b7b      	ldrh	r3, [r7, #26]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d16f      	bne.n	80038b2 <HAL_SPI_TransmitReceive+0x2e4>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	330c      	adds	r3, #12
 80037dc:	7812      	ldrb	r2, [r2, #0]
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	631a      	str	r2, [r3, #48]	; 0x30
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80037f8:	e05b      	b.n	80038b2 <HAL_SPI_TransmitReceive+0x2e4>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b02      	cmp	r3, #2
 8003806:	d11c      	bne.n	8003842 <HAL_SPI_TransmitReceive+0x274>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d017      	beq.n	8003842 <HAL_SPI_TransmitReceive+0x274>
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	2b01      	cmp	r3, #1
 8003816:	d114      	bne.n	8003842 <HAL_SPI_TransmitReceive+0x274>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	330c      	adds	r3, #12
 8003822:	7812      	ldrb	r2, [r2, #0]
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	631a      	str	r2, [r3, #48]	; 0x30
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	86da      	strh	r2, [r3, #54]	; 0x36
 800383e:	2300      	movs	r3, #0
 8003840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d119      	bne.n	8003884 <HAL_SPI_TransmitReceive+0x2b6>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d014      	beq.n	8003884 <HAL_SPI_TransmitReceive+0x2b6>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	639a      	str	r2, [r3, #56]	; 0x38
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003880:	2301      	movs	r3, #1
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003884:	f7fe fcfa 	bl	800227c <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003890:	429a      	cmp	r2, r3
 8003892:	d803      	bhi.n	800389c <HAL_SPI_TransmitReceive+0x2ce>
 8003894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389a:	d102      	bne.n	80038a2 <HAL_SPI_TransmitReceive+0x2d4>
 800389c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d107      	bne.n	80038b2 <HAL_SPI_TransmitReceive+0x2e4>
 80038a2:	2303      	movs	r3, #3
 80038a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80038b0:	e033      	b.n	800391a <HAL_SPI_TransmitReceive+0x34c>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d19e      	bne.n	80037fa <HAL_SPI_TransmitReceive+0x22c>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d199      	bne.n	80037fa <HAL_SPI_TransmitReceive+0x22c>
 80038c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f90a 	bl	8003ae4 <SPI_EndRxTxTransaction>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d006      	beq.n	80038e4 <HAL_SPI_TransmitReceive+0x316>
 80038d6:	2301      	movs	r3, #1
 80038d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	655a      	str	r2, [r3, #84]	; 0x54
 80038e2:	e01a      	b.n	800391a <HAL_SPI_TransmitReceive+0x34c>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10a      	bne.n	8003902 <HAL_SPI_TransmitReceive+0x334>
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_SPI_TransmitReceive+0x344>
 800390a:	2301      	movs	r3, #1
 800390c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003910:	e003      	b.n	800391a <HAL_SPI_TransmitReceive+0x34c>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003922:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003926:	4618      	mov	r0, r3
 8003928:	3730      	adds	r7, #48	; 0x30
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <SPI_WaitFlagStateUntilTimeout>:
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	71fb      	strb	r3, [r7, #7]
 8003940:	f7fe fc9c 	bl	800227c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003948:	1a9b      	subs	r3, r3, r2
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	4413      	add	r3, r2
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	f7fe fc94 	bl	800227c <HAL_GetTick>
 8003954:	61b8      	str	r0, [r7, #24]
 8003956:	4b39      	ldr	r3, [pc, #228]	; (8003a3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	015b      	lsls	r3, r3, #5
 800395c:	0d1b      	lsrs	r3, r3, #20
 800395e:	69fa      	ldr	r2, [r7, #28]
 8003960:	fb02 f303 	mul.w	r3, r2, r3
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	e054      	b.n	8003a12 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396e:	d050      	beq.n	8003a12 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8003970:	f7fe fc84 	bl	800227c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	429a      	cmp	r2, r3
 800397e:	d902      	bls.n	8003986 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d13d      	bne.n	8003a02 <SPI_WaitFlagStateUntilTimeout+0xd2>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800399e:	d111      	bne.n	80039c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a8:	d004      	beq.n	80039b4 <SPI_WaitFlagStateUntilTimeout+0x84>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b2:	d107      	bne.n	80039c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039cc:	d10f      	bne.n	80039ee <SPI_WaitFlagStateUntilTimeout+0xbe>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80039fe:	2303      	movs	r3, #3
 8003a00:	e017      	b.n	8003a32 <SPI_WaitFlagStateUntilTimeout+0x102>
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <SPI_WaitFlagStateUntilTimeout+0xdc>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	bf0c      	ite	eq
 8003a22:	2301      	moveq	r3, #1
 8003a24:	2300      	movne	r3, #0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	461a      	mov	r2, r3
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d19b      	bne.n	8003968 <SPI_WaitFlagStateUntilTimeout+0x38>
 8003a30:	2300      	movs	r3, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	3720      	adds	r7, #32
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000018 	.word	0x20000018

08003a40 <SPI_EndRxTransaction>:
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a54:	d111      	bne.n	8003a7a <SPI_EndRxTransaction+0x3a>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5e:	d004      	beq.n	8003a6a <SPI_EndRxTransaction+0x2a>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a68:	d107      	bne.n	8003a7a <SPI_EndRxTransaction+0x3a>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a82:	d117      	bne.n	8003ab4 <SPI_EndRxTransaction+0x74>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a8c:	d112      	bne.n	8003ab4 <SPI_EndRxTransaction+0x74>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2200      	movs	r2, #0
 8003a96:	2101      	movs	r1, #1
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f7ff ff49 	bl	8003930 <SPI_WaitFlagStateUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01a      	beq.n	8003ada <SPI_EndRxTransaction+0x9a>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa8:	f043 0220 	orr.w	r2, r3, #32
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e013      	b.n	8003adc <SPI_EndRxTransaction+0x9c>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2200      	movs	r2, #0
 8003abc:	2180      	movs	r1, #128	; 0x80
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f7ff ff36 	bl	8003930 <SPI_WaitFlagStateUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <SPI_EndRxTransaction+0x9a>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ace:	f043 0220 	orr.w	r2, r3, #32
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	655a      	str	r2, [r3, #84]	; 0x54
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e000      	b.n	8003adc <SPI_EndRxTransaction+0x9c>
 8003ada:	2300      	movs	r3, #0
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <SPI_EndRxTxTransaction>:
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2200      	movs	r2, #0
 8003af8:	2180      	movs	r1, #128	; 0x80
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f7ff ff18 	bl	8003930 <SPI_WaitFlagStateUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d007      	beq.n	8003b16 <SPI_EndRxTxTransaction+0x32>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0a:	f043 0220 	orr.w	r2, r3, #32
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	655a      	str	r2, [r3, #84]	; 0x54
 8003b12:	2303      	movs	r3, #3
 8003b14:	e000      	b.n	8003b18 <SPI_EndRxTxTransaction+0x34>
 8003b16:	2300      	movs	r3, #0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f103 0208 	add.w	r2, r3, #8
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f04f 32ff 	mov.w	r2, #4294967295
 8003b38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f103 0208 	add.w	r2, r3, #8
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f103 0208 	add.w	r2, r3, #8
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b76:	b480      	push	{r7}
 8003b78:	b085      	sub	sp, #20
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	601a      	str	r2, [r3, #0]
}
 8003bb2:	bf00      	nop
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr

08003bbc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd2:	d103      	bne.n	8003bdc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	e00c      	b.n	8003bf6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3308      	adds	r3, #8
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	e002      	b.n	8003bea <vListInsert+0x2e>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d2f6      	bcs.n	8003be4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	601a      	str	r2, [r3, #0]
}
 8003c22:	bf00      	nop
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6892      	ldr	r2, [r2, #8]
 8003c42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6852      	ldr	r2, [r2, #4]
 8003c4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d103      	bne.n	8003c60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	1e5a      	subs	r2, r3, #1
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr

08003c7e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b08e      	sub	sp, #56	; 0x38
 8003c82:	af04      	add	r7, sp, #16
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ca4:	bf00      	nop
 8003ca6:	e7fe      	b.n	8003ca6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <xTaskCreateStatic+0x46>
	__asm volatile
 8003cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	61fb      	str	r3, [r7, #28]
}
 8003cc0:	bf00      	nop
 8003cc2:	e7fe      	b.n	8003cc2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003cc4:	23a0      	movs	r3, #160	; 0xa0
 8003cc6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2ba0      	cmp	r3, #160	; 0xa0
 8003ccc:	d00a      	beq.n	8003ce4 <xTaskCreateStatic+0x66>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	61bb      	str	r3, [r7, #24]
}
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d01e      	beq.n	8003d28 <xTaskCreateStatic+0xaa>
 8003cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01b      	beq.n	8003d28 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cf8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d02:	2300      	movs	r3, #0
 8003d04:	9303      	str	r3, [sp, #12]
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	9302      	str	r3, [sp, #8]
 8003d0a:	f107 0314 	add.w	r3, r7, #20
 8003d0e:	9301      	str	r3, [sp, #4]
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f850 	bl	8003dc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d22:	f000 f8e3 	bl	8003eec <prvAddNewTaskToReadyList>
 8003d26:	e001      	b.n	8003d2c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d2c:	697b      	ldr	r3, [r7, #20]
	}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3728      	adds	r7, #40	; 0x28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b08c      	sub	sp, #48	; 0x30
 8003d3a:	af04      	add	r7, sp, #16
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	4613      	mov	r3, r2
 8003d44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d46:	88fb      	ldrh	r3, [r7, #6]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 feb8 	bl	8004ac0 <pvPortMalloc>
 8003d50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00e      	beq.n	8003d76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003d58:	20a0      	movs	r0, #160	; 0xa0
 8003d5a:	f000 feb1 	bl	8004ac0 <pvPortMalloc>
 8003d5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d6c:	e005      	b.n	8003d7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d6e:	6978      	ldr	r0, [r7, #20]
 8003d70:	f000 ff6a 	bl	8004c48 <vPortFree>
 8003d74:	e001      	b.n	8003d7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d017      	beq.n	8003db0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d88:	88fa      	ldrh	r2, [r7, #6]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	9303      	str	r3, [sp, #12]
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	9302      	str	r3, [sp, #8]
 8003d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d94:	9301      	str	r3, [sp, #4]
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68b9      	ldr	r1, [r7, #8]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f80e 	bl	8003dc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003da4:	69f8      	ldr	r0, [r7, #28]
 8003da6:	f000 f8a1 	bl	8003eec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003daa:	2301      	movs	r3, #1
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	e002      	b.n	8003db6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003db0:	f04f 33ff 	mov.w	r3, #4294967295
 8003db4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003db6:	69bb      	ldr	r3, [r7, #24]
	}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3720      	adds	r7, #32
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f023 0307 	bic.w	r3, r3, #7
 8003de6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	617b      	str	r3, [r7, #20]
}
 8003e04:	bf00      	nop
 8003e06:	e7fe      	b.n	8003e06 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61fb      	str	r3, [r7, #28]
 8003e0c:	e012      	b.n	8003e34 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	4413      	add	r3, r2
 8003e14:	7819      	ldrb	r1, [r3, #0]
 8003e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3334      	adds	r3, #52	; 0x34
 8003e1e:	460a      	mov	r2, r1
 8003e20:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	4413      	add	r3, r2
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d006      	beq.n	8003e3c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3301      	adds	r3, #1
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b0f      	cmp	r3, #15
 8003e38:	d9e9      	bls.n	8003e0e <prvInitialiseNewTask+0x4e>
 8003e3a:	e000      	b.n	8003e3e <prvInitialiseNewTask+0x7e>
		{
			break;
 8003e3c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	2b06      	cmp	r3, #6
 8003e4a:	d901      	bls.n	8003e50 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e4c:	2306      	movs	r3, #6
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5e:	2200      	movs	r2, #0
 8003e60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	3304      	adds	r3, #4
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff fe79 	bl	8003b5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	3318      	adds	r3, #24
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fe74 	bl	8003b5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7e:	f1c3 0207 	rsb	r2, r3, #7
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	334c      	adds	r3, #76	; 0x4c
 8003ea0:	224c      	movs	r2, #76	; 0x4c
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 ffe3 	bl	8004e70 <memset>
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	4a0c      	ldr	r2, [pc, #48]	; (8003ee0 <prvInitialiseNewTask+0x120>)
 8003eae:	651a      	str	r2, [r3, #80]	; 0x50
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	4a0c      	ldr	r2, [pc, #48]	; (8003ee4 <prvInitialiseNewTask+0x124>)
 8003eb4:	655a      	str	r2, [r3, #84]	; 0x54
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb8:	4a0b      	ldr	r2, [pc, #44]	; (8003ee8 <prvInitialiseNewTask+0x128>)
 8003eba:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	68f9      	ldr	r1, [r7, #12]
 8003ec0:	69b8      	ldr	r0, [r7, #24]
 8003ec2:	f000 fc47 	bl	8004754 <pxPortInitialiseStack>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ed8:	bf00      	nop
 8003eda:	3720      	adds	r7, #32
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20001534 	.word	0x20001534
 8003ee4:	2000159c 	.word	0x2000159c
 8003ee8:	20001604 	.word	0x20001604

08003eec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ef4:	f000 fd22 	bl	800493c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ef8:	4b2a      	ldr	r3, [pc, #168]	; (8003fa4 <prvAddNewTaskToReadyList+0xb8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3301      	adds	r3, #1
 8003efe:	4a29      	ldr	r2, [pc, #164]	; (8003fa4 <prvAddNewTaskToReadyList+0xb8>)
 8003f00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f02:	4b29      	ldr	r3, [pc, #164]	; (8003fa8 <prvAddNewTaskToReadyList+0xbc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f0a:	4a27      	ldr	r2, [pc, #156]	; (8003fa8 <prvAddNewTaskToReadyList+0xbc>)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f10:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <prvAddNewTaskToReadyList+0xb8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d110      	bne.n	8003f3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f18:	f000 fad2 	bl	80044c0 <prvInitialiseTaskLists>
 8003f1c:	e00d      	b.n	8003f3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f1e:	4b23      	ldr	r3, [pc, #140]	; (8003fac <prvAddNewTaskToReadyList+0xc0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f26:	4b20      	ldr	r3, [pc, #128]	; (8003fa8 <prvAddNewTaskToReadyList+0xbc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d802      	bhi.n	8003f3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f34:	4a1c      	ldr	r2, [pc, #112]	; (8003fa8 <prvAddNewTaskToReadyList+0xbc>)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <prvAddNewTaskToReadyList+0xc4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	4a1b      	ldr	r2, [pc, #108]	; (8003fb0 <prvAddNewTaskToReadyList+0xc4>)
 8003f42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	2201      	movs	r2, #1
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <prvAddNewTaskToReadyList+0xc8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	4a18      	ldr	r2, [pc, #96]	; (8003fb4 <prvAddNewTaskToReadyList+0xc8>)
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4a15      	ldr	r2, [pc, #84]	; (8003fb8 <prvAddNewTaskToReadyList+0xcc>)
 8003f64:	441a      	add	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f7ff fe02 	bl	8003b76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f72:	f000 fd13 	bl	800499c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f76:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <prvAddNewTaskToReadyList+0xc0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00e      	beq.n	8003f9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <prvAddNewTaskToReadyList+0xbc>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d207      	bcs.n	8003f9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f8c:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <prvAddNewTaskToReadyList+0xd0>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f9c:	bf00      	nop
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	200008e8 	.word	0x200008e8
 8003fa8:	200007e8 	.word	0x200007e8
 8003fac:	200008f4 	.word	0x200008f4
 8003fb0:	20000904 	.word	0x20000904
 8003fb4:	200008f0 	.word	0x200008f0
 8003fb8:	200007ec 	.word	0x200007ec
 8003fbc:	e000ed04 	.word	0xe000ed04

08003fc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d017      	beq.n	8004002 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003fd2:	4b13      	ldr	r3, [pc, #76]	; (8004020 <vTaskDelay+0x60>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <vTaskDelay+0x30>
	__asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	60bb      	str	r3, [r7, #8]
}
 8003fec:	bf00      	nop
 8003fee:	e7fe      	b.n	8003fee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ff0:	f000 f884 	bl	80040fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fb46 	bl	8004688 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ffc:	f000 f88c 	bl	8004118 <xTaskResumeAll>
 8004000:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d107      	bne.n	8004018 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <vTaskDelay+0x64>)
 800400a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20000910 	.word	0x20000910
 8004024:	e000ed04 	.word	0xe000ed04

08004028 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	; 0x28
 800402c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800402e:	2300      	movs	r3, #0
 8004030:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004032:	2300      	movs	r3, #0
 8004034:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004036:	463a      	mov	r2, r7
 8004038:	1d39      	adds	r1, r7, #4
 800403a:	f107 0308 	add.w	r3, r7, #8
 800403e:	4618      	mov	r0, r3
 8004040:	f7fc f88e 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004044:	6839      	ldr	r1, [r7, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	9202      	str	r2, [sp, #8]
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	2300      	movs	r3, #0
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	2300      	movs	r3, #0
 8004054:	460a      	mov	r2, r1
 8004056:	4921      	ldr	r1, [pc, #132]	; (80040dc <vTaskStartScheduler+0xb4>)
 8004058:	4821      	ldr	r0, [pc, #132]	; (80040e0 <vTaskStartScheduler+0xb8>)
 800405a:	f7ff fe10 	bl	8003c7e <xTaskCreateStatic>
 800405e:	4603      	mov	r3, r0
 8004060:	4a20      	ldr	r2, [pc, #128]	; (80040e4 <vTaskStartScheduler+0xbc>)
 8004062:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004064:	4b1f      	ldr	r3, [pc, #124]	; (80040e4 <vTaskStartScheduler+0xbc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800406c:	2301      	movs	r3, #1
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	e001      	b.n	8004076 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d11b      	bne.n	80040b4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800407c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	613b      	str	r3, [r7, #16]
}
 800408e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004090:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <vTaskStartScheduler+0xc0>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	334c      	adds	r3, #76	; 0x4c
 8004096:	4a15      	ldr	r2, [pc, #84]	; (80040ec <vTaskStartScheduler+0xc4>)
 8004098:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800409a:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <vTaskStartScheduler+0xc8>)
 800409c:	f04f 32ff 	mov.w	r2, #4294967295
 80040a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040a2:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <vTaskStartScheduler+0xcc>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80040a8:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <vTaskStartScheduler+0xd0>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040ae:	f000 fbd3 	bl	8004858 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040b2:	e00e      	b.n	80040d2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ba:	d10a      	bne.n	80040d2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	60fb      	str	r3, [r7, #12]
}
 80040ce:	bf00      	nop
 80040d0:	e7fe      	b.n	80040d0 <vTaskStartScheduler+0xa8>
}
 80040d2:	bf00      	nop
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	080052fc 	.word	0x080052fc
 80040e0:	08004491 	.word	0x08004491
 80040e4:	2000090c 	.word	0x2000090c
 80040e8:	200007e8 	.word	0x200007e8
 80040ec:	200000a4 	.word	0x200000a4
 80040f0:	20000908 	.word	0x20000908
 80040f4:	200008f4 	.word	0x200008f4
 80040f8:	200008ec 	.word	0x200008ec

080040fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <vTaskSuspendAll+0x18>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3301      	adds	r3, #1
 8004106:	4a03      	ldr	r2, [pc, #12]	; (8004114 <vTaskSuspendAll+0x18>)
 8004108:	6013      	str	r3, [r2, #0]
}
 800410a:	bf00      	nop
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20000910 	.word	0x20000910

08004118 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004122:	2300      	movs	r3, #0
 8004124:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004126:	4b41      	ldr	r3, [pc, #260]	; (800422c <xTaskResumeAll+0x114>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10a      	bne.n	8004144 <xTaskResumeAll+0x2c>
	__asm volatile
 800412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	603b      	str	r3, [r7, #0]
}
 8004140:	bf00      	nop
 8004142:	e7fe      	b.n	8004142 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004144:	f000 fbfa 	bl	800493c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004148:	4b38      	ldr	r3, [pc, #224]	; (800422c <xTaskResumeAll+0x114>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3b01      	subs	r3, #1
 800414e:	4a37      	ldr	r2, [pc, #220]	; (800422c <xTaskResumeAll+0x114>)
 8004150:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004152:	4b36      	ldr	r3, [pc, #216]	; (800422c <xTaskResumeAll+0x114>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d161      	bne.n	800421e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800415a:	4b35      	ldr	r3, [pc, #212]	; (8004230 <xTaskResumeAll+0x118>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d05d      	beq.n	800421e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004162:	e02e      	b.n	80041c2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004164:	4b33      	ldr	r3, [pc, #204]	; (8004234 <xTaskResumeAll+0x11c>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	3318      	adds	r3, #24
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff fd5b 	bl	8003c2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3304      	adds	r3, #4
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fd56 	bl	8003c2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	2201      	movs	r2, #1
 8004186:	409a      	lsls	r2, r3
 8004188:	4b2b      	ldr	r3, [pc, #172]	; (8004238 <xTaskResumeAll+0x120>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4313      	orrs	r3, r2
 800418e:	4a2a      	ldr	r2, [pc, #168]	; (8004238 <xTaskResumeAll+0x120>)
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4a27      	ldr	r2, [pc, #156]	; (800423c <xTaskResumeAll+0x124>)
 80041a0:	441a      	add	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3304      	adds	r3, #4
 80041a6:	4619      	mov	r1, r3
 80041a8:	4610      	mov	r0, r2
 80041aa:	f7ff fce4 	bl	8003b76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b2:	4b23      	ldr	r3, [pc, #140]	; (8004240 <xTaskResumeAll+0x128>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d302      	bcc.n	80041c2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80041bc:	4b21      	ldr	r3, [pc, #132]	; (8004244 <xTaskResumeAll+0x12c>)
 80041be:	2201      	movs	r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041c2:	4b1c      	ldr	r3, [pc, #112]	; (8004234 <xTaskResumeAll+0x11c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1cc      	bne.n	8004164 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80041d0:	f000 fa18 	bl	8004604 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80041d4:	4b1c      	ldr	r3, [pc, #112]	; (8004248 <xTaskResumeAll+0x130>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d010      	beq.n	8004202 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041e0:	f000 f836 	bl	8004250 <xTaskIncrementTick>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80041ea:	4b16      	ldr	r3, [pc, #88]	; (8004244 <xTaskResumeAll+0x12c>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f1      	bne.n	80041e0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80041fc:	4b12      	ldr	r3, [pc, #72]	; (8004248 <xTaskResumeAll+0x130>)
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004202:	4b10      	ldr	r3, [pc, #64]	; (8004244 <xTaskResumeAll+0x12c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d009      	beq.n	800421e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800420a:	2301      	movs	r3, #1
 800420c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <xTaskResumeAll+0x134>)
 8004210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800421e:	f000 fbbd 	bl	800499c <vPortExitCritical>

	return xAlreadyYielded;
 8004222:	68bb      	ldr	r3, [r7, #8]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000910 	.word	0x20000910
 8004230:	200008e8 	.word	0x200008e8
 8004234:	200008a8 	.word	0x200008a8
 8004238:	200008f0 	.word	0x200008f0
 800423c:	200007ec 	.word	0x200007ec
 8004240:	200007e8 	.word	0x200007e8
 8004244:	200008fc 	.word	0x200008fc
 8004248:	200008f8 	.word	0x200008f8
 800424c:	e000ed04 	.word	0xe000ed04

08004250 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800425a:	4b51      	ldr	r3, [pc, #324]	; (80043a0 <xTaskIncrementTick+0x150>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	f040 808d 	bne.w	800437e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004264:	4b4f      	ldr	r3, [pc, #316]	; (80043a4 <xTaskIncrementTick+0x154>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3301      	adds	r3, #1
 800426a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800426c:	4a4d      	ldr	r2, [pc, #308]	; (80043a4 <xTaskIncrementTick+0x154>)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d120      	bne.n	80042ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004278:	4b4b      	ldr	r3, [pc, #300]	; (80043a8 <xTaskIncrementTick+0x158>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <xTaskIncrementTick+0x48>
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	603b      	str	r3, [r7, #0]
}
 8004294:	bf00      	nop
 8004296:	e7fe      	b.n	8004296 <xTaskIncrementTick+0x46>
 8004298:	4b43      	ldr	r3, [pc, #268]	; (80043a8 <xTaskIncrementTick+0x158>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	4b43      	ldr	r3, [pc, #268]	; (80043ac <xTaskIncrementTick+0x15c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a41      	ldr	r2, [pc, #260]	; (80043a8 <xTaskIncrementTick+0x158>)
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	4a41      	ldr	r2, [pc, #260]	; (80043ac <xTaskIncrementTick+0x15c>)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	4b40      	ldr	r3, [pc, #256]	; (80043b0 <xTaskIncrementTick+0x160>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3301      	adds	r3, #1
 80042b2:	4a3f      	ldr	r2, [pc, #252]	; (80043b0 <xTaskIncrementTick+0x160>)
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	f000 f9a5 	bl	8004604 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80042ba:	4b3e      	ldr	r3, [pc, #248]	; (80043b4 <xTaskIncrementTick+0x164>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d34d      	bcc.n	8004360 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042c4:	4b38      	ldr	r3, [pc, #224]	; (80043a8 <xTaskIncrementTick+0x158>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <xTaskIncrementTick+0x82>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <xTaskIncrementTick+0x84>
 80042d2:	2300      	movs	r3, #0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d004      	beq.n	80042e2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042d8:	4b36      	ldr	r3, [pc, #216]	; (80043b4 <xTaskIncrementTick+0x164>)
 80042da:	f04f 32ff 	mov.w	r2, #4294967295
 80042de:	601a      	str	r2, [r3, #0]
					break;
 80042e0:	e03e      	b.n	8004360 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042e2:	4b31      	ldr	r3, [pc, #196]	; (80043a8 <xTaskIncrementTick+0x158>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d203      	bcs.n	8004302 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80042fa:	4a2e      	ldr	r2, [pc, #184]	; (80043b4 <xTaskIncrementTick+0x164>)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6013      	str	r3, [r2, #0]
						break;
 8004300:	e02e      	b.n	8004360 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	3304      	adds	r3, #4
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff fc90 	bl	8003c2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	2b00      	cmp	r3, #0
 8004312:	d004      	beq.n	800431e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	3318      	adds	r3, #24
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff fc87 	bl	8003c2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	2201      	movs	r2, #1
 8004324:	409a      	lsls	r2, r3
 8004326:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <xTaskIncrementTick+0x168>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4313      	orrs	r3, r2
 800432c:	4a22      	ldr	r2, [pc, #136]	; (80043b8 <xTaskIncrementTick+0x168>)
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4a1f      	ldr	r2, [pc, #124]	; (80043bc <xTaskIncrementTick+0x16c>)
 800433e:	441a      	add	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	3304      	adds	r3, #4
 8004344:	4619      	mov	r1, r3
 8004346:	4610      	mov	r0, r2
 8004348:	f7ff fc15 	bl	8003b76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004350:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <xTaskIncrementTick+0x170>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	429a      	cmp	r2, r3
 8004358:	d3b4      	bcc.n	80042c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800435a:	2301      	movs	r3, #1
 800435c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800435e:	e7b1      	b.n	80042c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004360:	4b17      	ldr	r3, [pc, #92]	; (80043c0 <xTaskIncrementTick+0x170>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004366:	4915      	ldr	r1, [pc, #84]	; (80043bc <xTaskIncrementTick+0x16c>)
 8004368:	4613      	mov	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d907      	bls.n	8004388 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004378:	2301      	movs	r3, #1
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	e004      	b.n	8004388 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800437e:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <xTaskIncrementTick+0x174>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3301      	adds	r3, #1
 8004384:	4a0f      	ldr	r2, [pc, #60]	; (80043c4 <xTaskIncrementTick+0x174>)
 8004386:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004388:	4b0f      	ldr	r3, [pc, #60]	; (80043c8 <xTaskIncrementTick+0x178>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004390:	2301      	movs	r3, #1
 8004392:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004394:	697b      	ldr	r3, [r7, #20]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000910 	.word	0x20000910
 80043a4:	200008ec 	.word	0x200008ec
 80043a8:	200008a0 	.word	0x200008a0
 80043ac:	200008a4 	.word	0x200008a4
 80043b0:	20000900 	.word	0x20000900
 80043b4:	20000908 	.word	0x20000908
 80043b8:	200008f0 	.word	0x200008f0
 80043bc:	200007ec 	.word	0x200007ec
 80043c0:	200007e8 	.word	0x200007e8
 80043c4:	200008f8 	.word	0x200008f8
 80043c8:	200008fc 	.word	0x200008fc

080043cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043d2:	4b29      	ldr	r3, [pc, #164]	; (8004478 <vTaskSwitchContext+0xac>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043da:	4b28      	ldr	r3, [pc, #160]	; (800447c <vTaskSwitchContext+0xb0>)
 80043dc:	2201      	movs	r2, #1
 80043de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043e0:	e044      	b.n	800446c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80043e2:	4b26      	ldr	r3, [pc, #152]	; (800447c <vTaskSwitchContext+0xb0>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80043e8:	4b25      	ldr	r3, [pc, #148]	; (8004480 <vTaskSwitchContext+0xb4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	fab3 f383 	clz	r3, r3
 80043f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80043f6:	7afb      	ldrb	r3, [r7, #11]
 80043f8:	f1c3 031f 	rsb	r3, r3, #31
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	4921      	ldr	r1, [pc, #132]	; (8004484 <vTaskSwitchContext+0xb8>)
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10a      	bne.n	8004428 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	607b      	str	r3, [r7, #4]
}
 8004424:	bf00      	nop
 8004426:	e7fe      	b.n	8004426 <vTaskSwitchContext+0x5a>
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4613      	mov	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4a14      	ldr	r2, [pc, #80]	; (8004484 <vTaskSwitchContext+0xb8>)
 8004434:	4413      	add	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	605a      	str	r2, [r3, #4]
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	3308      	adds	r3, #8
 800444a:	429a      	cmp	r2, r3
 800444c:	d104      	bne.n	8004458 <vTaskSwitchContext+0x8c>
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	605a      	str	r2, [r3, #4]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <vTaskSwitchContext+0xbc>)
 8004460:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <vTaskSwitchContext+0xbc>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	334c      	adds	r3, #76	; 0x4c
 8004468:	4a08      	ldr	r2, [pc, #32]	; (800448c <vTaskSwitchContext+0xc0>)
 800446a:	6013      	str	r3, [r2, #0]
}
 800446c:	bf00      	nop
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000910 	.word	0x20000910
 800447c:	200008fc 	.word	0x200008fc
 8004480:	200008f0 	.word	0x200008f0
 8004484:	200007ec 	.word	0x200007ec
 8004488:	200007e8 	.word	0x200007e8
 800448c:	200000a4 	.word	0x200000a4

08004490 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004498:	f000 f852 	bl	8004540 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <prvIdleTask+0x28>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d9f9      	bls.n	8004498 <prvIdleTask+0x8>
			{
				taskYIELD();
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <prvIdleTask+0x2c>)
 80044a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044b4:	e7f0      	b.n	8004498 <prvIdleTask+0x8>
 80044b6:	bf00      	nop
 80044b8:	200007ec 	.word	0x200007ec
 80044bc:	e000ed04 	.word	0xe000ed04

080044c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044c6:	2300      	movs	r3, #0
 80044c8:	607b      	str	r3, [r7, #4]
 80044ca:	e00c      	b.n	80044e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4a12      	ldr	r2, [pc, #72]	; (8004520 <prvInitialiseTaskLists+0x60>)
 80044d8:	4413      	add	r3, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fb20 	bl	8003b20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3301      	adds	r3, #1
 80044e4:	607b      	str	r3, [r7, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b06      	cmp	r3, #6
 80044ea:	d9ef      	bls.n	80044cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044ec:	480d      	ldr	r0, [pc, #52]	; (8004524 <prvInitialiseTaskLists+0x64>)
 80044ee:	f7ff fb17 	bl	8003b20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044f2:	480d      	ldr	r0, [pc, #52]	; (8004528 <prvInitialiseTaskLists+0x68>)
 80044f4:	f7ff fb14 	bl	8003b20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044f8:	480c      	ldr	r0, [pc, #48]	; (800452c <prvInitialiseTaskLists+0x6c>)
 80044fa:	f7ff fb11 	bl	8003b20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044fe:	480c      	ldr	r0, [pc, #48]	; (8004530 <prvInitialiseTaskLists+0x70>)
 8004500:	f7ff fb0e 	bl	8003b20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004504:	480b      	ldr	r0, [pc, #44]	; (8004534 <prvInitialiseTaskLists+0x74>)
 8004506:	f7ff fb0b 	bl	8003b20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800450a:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <prvInitialiseTaskLists+0x78>)
 800450c:	4a05      	ldr	r2, [pc, #20]	; (8004524 <prvInitialiseTaskLists+0x64>)
 800450e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004510:	4b0a      	ldr	r3, [pc, #40]	; (800453c <prvInitialiseTaskLists+0x7c>)
 8004512:	4a05      	ldr	r2, [pc, #20]	; (8004528 <prvInitialiseTaskLists+0x68>)
 8004514:	601a      	str	r2, [r3, #0]
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	200007ec 	.word	0x200007ec
 8004524:	20000878 	.word	0x20000878
 8004528:	2000088c 	.word	0x2000088c
 800452c:	200008a8 	.word	0x200008a8
 8004530:	200008bc 	.word	0x200008bc
 8004534:	200008d4 	.word	0x200008d4
 8004538:	200008a0 	.word	0x200008a0
 800453c:	200008a4 	.word	0x200008a4

08004540 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004546:	e019      	b.n	800457c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004548:	f000 f9f8 	bl	800493c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800454c:	4b10      	ldr	r3, [pc, #64]	; (8004590 <prvCheckTasksWaitingTermination+0x50>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3304      	adds	r3, #4
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fb67 	bl	8003c2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800455e:	4b0d      	ldr	r3, [pc, #52]	; (8004594 <prvCheckTasksWaitingTermination+0x54>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3b01      	subs	r3, #1
 8004564:	4a0b      	ldr	r2, [pc, #44]	; (8004594 <prvCheckTasksWaitingTermination+0x54>)
 8004566:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <prvCheckTasksWaitingTermination+0x58>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3b01      	subs	r3, #1
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <prvCheckTasksWaitingTermination+0x58>)
 8004570:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004572:	f000 fa13 	bl	800499c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f810 	bl	800459c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <prvCheckTasksWaitingTermination+0x58>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e1      	bne.n	8004548 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	200008bc 	.word	0x200008bc
 8004594:	200008e8 	.word	0x200008e8
 8004598:	200008d0 	.word	0x200008d0

0800459c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	334c      	adds	r3, #76	; 0x4c
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fc69 	bl	8004e80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d108      	bne.n	80045ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fb43 	bl	8004c48 <vPortFree>
				vPortFree( pxTCB );
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fb40 	bl	8004c48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045c8:	e018      	b.n	80045fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d103      	bne.n	80045dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fb37 	bl	8004c48 <vPortFree>
	}
 80045da:	e00f      	b.n	80045fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d00a      	beq.n	80045fc <prvDeleteTCB+0x60>
	__asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	60fb      	str	r3, [r7, #12]
}
 80045f8:	bf00      	nop
 80045fa:	e7fe      	b.n	80045fa <prvDeleteTCB+0x5e>
	}
 80045fc:	bf00      	nop
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800460a:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <prvResetNextTaskUnblockTime+0x40>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <prvResetNextTaskUnblockTime+0x14>
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <prvResetNextTaskUnblockTime+0x16>
 8004618:	2300      	movs	r3, #0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d004      	beq.n	8004628 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800461e:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <prvResetNextTaskUnblockTime+0x44>)
 8004620:	f04f 32ff 	mov.w	r2, #4294967295
 8004624:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004626:	e008      	b.n	800463a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <prvResetNextTaskUnblockTime+0x40>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4a04      	ldr	r2, [pc, #16]	; (8004648 <prvResetNextTaskUnblockTime+0x44>)
 8004638:	6013      	str	r3, [r2, #0]
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr
 8004644:	200008a0 	.word	0x200008a0
 8004648:	20000908 	.word	0x20000908

0800464c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004652:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <xTaskGetSchedulerState+0x34>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d102      	bne.n	8004660 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800465a:	2301      	movs	r3, #1
 800465c:	607b      	str	r3, [r7, #4]
 800465e:	e008      	b.n	8004672 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004660:	4b08      	ldr	r3, [pc, #32]	; (8004684 <xTaskGetSchedulerState+0x38>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004668:	2302      	movs	r3, #2
 800466a:	607b      	str	r3, [r7, #4]
 800466c:	e001      	b.n	8004672 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800466e:	2300      	movs	r3, #0
 8004670:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004672:	687b      	ldr	r3, [r7, #4]
	}
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	200008f4 	.word	0x200008f4
 8004684:	20000910 	.word	0x20000910

08004688 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004692:	4b29      	ldr	r3, [pc, #164]	; (8004738 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004698:	4b28      	ldr	r3, [pc, #160]	; (800473c <prvAddCurrentTaskToDelayedList+0xb4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3304      	adds	r3, #4
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff fac4 	bl	8003c2c <uxListRemove>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10b      	bne.n	80046c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80046aa:	4b24      	ldr	r3, [pc, #144]	; (800473c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	2201      	movs	r2, #1
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	43da      	mvns	r2, r3
 80046b8:	4b21      	ldr	r3, [pc, #132]	; (8004740 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4013      	ands	r3, r2
 80046be:	4a20      	ldr	r2, [pc, #128]	; (8004740 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d10a      	bne.n	80046e0 <prvAddCurrentTaskToDelayedList+0x58>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d007      	beq.n	80046e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046d0:	4b1a      	ldr	r3, [pc, #104]	; (800473c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3304      	adds	r3, #4
 80046d6:	4619      	mov	r1, r3
 80046d8:	481a      	ldr	r0, [pc, #104]	; (8004744 <prvAddCurrentTaskToDelayedList+0xbc>)
 80046da:	f7ff fa4c 	bl	8003b76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046de:	e026      	b.n	800472e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4413      	add	r3, r2
 80046e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046e8:	4b14      	ldr	r3, [pc, #80]	; (800473c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d209      	bcs.n	800470c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046f8:	4b13      	ldr	r3, [pc, #76]	; (8004748 <prvAddCurrentTaskToDelayedList+0xc0>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4b0f      	ldr	r3, [pc, #60]	; (800473c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3304      	adds	r3, #4
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f7ff fa59 	bl	8003bbc <vListInsert>
}
 800470a:	e010      	b.n	800472e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <prvAddCurrentTaskToDelayedList+0xc4>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4b0a      	ldr	r3, [pc, #40]	; (800473c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3304      	adds	r3, #4
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f7ff fa4f 	bl	8003bbc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800471e:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	429a      	cmp	r2, r3
 8004726:	d202      	bcs.n	800472e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004728:	4a09      	ldr	r2, [pc, #36]	; (8004750 <prvAddCurrentTaskToDelayedList+0xc8>)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	6013      	str	r3, [r2, #0]
}
 800472e:	bf00      	nop
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	200008ec 	.word	0x200008ec
 800473c:	200007e8 	.word	0x200007e8
 8004740:	200008f0 	.word	0x200008f0
 8004744:	200008d4 	.word	0x200008d4
 8004748:	200008a4 	.word	0x200008a4
 800474c:	200008a0 	.word	0x200008a0
 8004750:	20000908 	.word	0x20000908

08004754 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	3b04      	subs	r3, #4
 8004764:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800476c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3b04      	subs	r3, #4
 8004772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f023 0201 	bic.w	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3b04      	subs	r3, #4
 8004782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004784:	4a08      	ldr	r2, [pc, #32]	; (80047a8 <pxPortInitialiseStack+0x54>)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3b14      	subs	r3, #20
 800478e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	3b20      	subs	r3, #32
 800479a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800479c:	68fb      	ldr	r3, [r7, #12]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr
 80047a8:	080047ad 	.word	0x080047ad

080047ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047b6:	4b12      	ldr	r3, [pc, #72]	; (8004800 <prvTaskExitError+0x54>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047be:	d00a      	beq.n	80047d6 <prvTaskExitError+0x2a>
	__asm volatile
 80047c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	60fb      	str	r3, [r7, #12]
}
 80047d2:	bf00      	nop
 80047d4:	e7fe      	b.n	80047d4 <prvTaskExitError+0x28>
	__asm volatile
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	60bb      	str	r3, [r7, #8]
}
 80047e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047ea:	bf00      	nop
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0fc      	beq.n	80047ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20000054 	.word	0x20000054
	...

08004810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004810:	4b07      	ldr	r3, [pc, #28]	; (8004830 <pxCurrentTCBConst2>)
 8004812:	6819      	ldr	r1, [r3, #0]
 8004814:	6808      	ldr	r0, [r1, #0]
 8004816:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800481a:	f380 8809 	msr	PSP, r0
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f04f 0000 	mov.w	r0, #0
 8004826:	f380 8811 	msr	BASEPRI, r0
 800482a:	f04e 0e0d 	orr.w	lr, lr, #13
 800482e:	4770      	bx	lr

08004830 <pxCurrentTCBConst2>:
 8004830:	200007e8 	.word	0x200007e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop

08004838 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004838:	4806      	ldr	r0, [pc, #24]	; (8004854 <prvPortStartFirstTask+0x1c>)
 800483a:	6800      	ldr	r0, [r0, #0]
 800483c:	6800      	ldr	r0, [r0, #0]
 800483e:	f380 8808 	msr	MSP, r0
 8004842:	b662      	cpsie	i
 8004844:	b661      	cpsie	f
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	df00      	svc	0
 8004850:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004852:	bf00      	nop
 8004854:	e000ed08 	.word	0xe000ed08

08004858 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800485e:	4b32      	ldr	r3, [pc, #200]	; (8004928 <xPortStartScheduler+0xd0>)
 8004860:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	22ff      	movs	r2, #255	; 0xff
 800486e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	b2db      	uxtb	r3, r3
 8004876:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004880:	b2da      	uxtb	r2, r3
 8004882:	4b2a      	ldr	r3, [pc, #168]	; (800492c <xPortStartScheduler+0xd4>)
 8004884:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004886:	4b2a      	ldr	r3, [pc, #168]	; (8004930 <xPortStartScheduler+0xd8>)
 8004888:	2207      	movs	r2, #7
 800488a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800488c:	e009      	b.n	80048a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800488e:	4b28      	ldr	r3, [pc, #160]	; (8004930 <xPortStartScheduler+0xd8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3b01      	subs	r3, #1
 8004894:	4a26      	ldr	r2, [pc, #152]	; (8004930 <xPortStartScheduler+0xd8>)
 8004896:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048a2:	78fb      	ldrb	r3, [r7, #3]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048aa:	2b80      	cmp	r3, #128	; 0x80
 80048ac:	d0ef      	beq.n	800488e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048ae:	4b20      	ldr	r3, [pc, #128]	; (8004930 <xPortStartScheduler+0xd8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f1c3 0307 	rsb	r3, r3, #7
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d00a      	beq.n	80048d0 <xPortStartScheduler+0x78>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	60bb      	str	r3, [r7, #8]
}
 80048cc:	bf00      	nop
 80048ce:	e7fe      	b.n	80048ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048d0:	4b17      	ldr	r3, [pc, #92]	; (8004930 <xPortStartScheduler+0xd8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	4a16      	ldr	r2, [pc, #88]	; (8004930 <xPortStartScheduler+0xd8>)
 80048d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048da:	4b15      	ldr	r3, [pc, #84]	; (8004930 <xPortStartScheduler+0xd8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048e2:	4a13      	ldr	r2, [pc, #76]	; (8004930 <xPortStartScheduler+0xd8>)
 80048e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048ee:	4b11      	ldr	r3, [pc, #68]	; (8004934 <xPortStartScheduler+0xdc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a10      	ldr	r2, [pc, #64]	; (8004934 <xPortStartScheduler+0xdc>)
 80048f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048fa:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <xPortStartScheduler+0xdc>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a0d      	ldr	r2, [pc, #52]	; (8004934 <xPortStartScheduler+0xdc>)
 8004900:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004904:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004906:	f000 f8b9 	bl	8004a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800490a:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <xPortStartScheduler+0xe0>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004910:	f7ff ff92 	bl	8004838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004914:	f7ff fd5a 	bl	80043cc <vTaskSwitchContext>
	prvTaskExitError();
 8004918:	f7ff ff48 	bl	80047ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	e000e400 	.word	0xe000e400
 800492c:	20000914 	.word	0x20000914
 8004930:	20000918 	.word	0x20000918
 8004934:	e000ed20 	.word	0xe000ed20
 8004938:	20000054 	.word	0x20000054

0800493c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
	__asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	607b      	str	r3, [r7, #4]
}
 8004954:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004956:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <vPortEnterCritical+0x58>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3301      	adds	r3, #1
 800495c:	4a0d      	ldr	r2, [pc, #52]	; (8004994 <vPortEnterCritical+0x58>)
 800495e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004960:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <vPortEnterCritical+0x58>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d10f      	bne.n	8004988 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <vPortEnterCritical+0x5c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <vPortEnterCritical+0x4c>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	603b      	str	r3, [r7, #0]
}
 8004984:	bf00      	nop
 8004986:	e7fe      	b.n	8004986 <vPortEnterCritical+0x4a>
	}
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20000054 	.word	0x20000054
 8004998:	e000ed04 	.word	0xe000ed04

0800499c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80049a2:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <vPortExitCritical+0x4c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10a      	bne.n	80049c0 <vPortExitCritical+0x24>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	607b      	str	r3, [r7, #4]
}
 80049bc:	bf00      	nop
 80049be:	e7fe      	b.n	80049be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049c0:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <vPortExitCritical+0x4c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	4a08      	ldr	r2, [pc, #32]	; (80049e8 <vPortExitCritical+0x4c>)
 80049c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80049ca:	4b07      	ldr	r3, [pc, #28]	; (80049e8 <vPortExitCritical+0x4c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d105      	bne.n	80049de <vPortExitCritical+0x42>
 80049d2:	2300      	movs	r3, #0
 80049d4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr
 80049e8:	20000054 	.word	0x20000054
 80049ec:	00000000 	.word	0x00000000

080049f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049f0:	f3ef 8009 	mrs	r0, PSP
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	4b0d      	ldr	r3, [pc, #52]	; (8004a30 <pxCurrentTCBConst>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a00:	6010      	str	r0, [r2, #0]
 8004a02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004a06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a0a:	f380 8811 	msr	BASEPRI, r0
 8004a0e:	f7ff fcdd 	bl	80043cc <vTaskSwitchContext>
 8004a12:	f04f 0000 	mov.w	r0, #0
 8004a16:	f380 8811 	msr	BASEPRI, r0
 8004a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004a1e:	6819      	ldr	r1, [r3, #0]
 8004a20:	6808      	ldr	r0, [r1, #0]
 8004a22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a26:	f380 8809 	msr	PSP, r0
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	4770      	bx	lr

08004a30 <pxCurrentTCBConst>:
 8004a30:	200007e8 	.word	0x200007e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop

08004a38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	607b      	str	r3, [r7, #4]
}
 8004a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a52:	f7ff fbfd 	bl	8004250 <xTaskIncrementTick>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <xPortSysTickHandler+0x40>)
 8004a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	2300      	movs	r3, #0
 8004a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	f383 8811 	msr	BASEPRI, r3
}
 8004a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a70:	bf00      	nop
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a80:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <vPortSetupTimerInterrupt+0x30>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a86:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <vPortSetupTimerInterrupt+0x34>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a8c:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <vPortSetupTimerInterrupt+0x38>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a09      	ldr	r2, [pc, #36]	; (8004ab8 <vPortSetupTimerInterrupt+0x3c>)
 8004a92:	fba2 2303 	umull	r2, r3, r2, r3
 8004a96:	099b      	lsrs	r3, r3, #6
 8004a98:	4a08      	ldr	r2, [pc, #32]	; (8004abc <vPortSetupTimerInterrupt+0x40>)
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a9e:	4b03      	ldr	r3, [pc, #12]	; (8004aac <vPortSetupTimerInterrupt+0x30>)
 8004aa0:	2207      	movs	r2, #7
 8004aa2:	601a      	str	r2, [r3, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr
 8004aac:	e000e010 	.word	0xe000e010
 8004ab0:	e000e018 	.word	0xe000e018
 8004ab4:	20000018 	.word	0x20000018
 8004ab8:	10624dd3 	.word	0x10624dd3
 8004abc:	e000e014 	.word	0xe000e014

08004ac0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08a      	sub	sp, #40	; 0x28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004acc:	f7ff fb16 	bl	80040fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ad0:	4b58      	ldr	r3, [pc, #352]	; (8004c34 <pvPortMalloc+0x174>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ad8:	f000 f910 	bl	8004cfc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004adc:	4b56      	ldr	r3, [pc, #344]	; (8004c38 <pvPortMalloc+0x178>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f040 808e 	bne.w	8004c06 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d01d      	beq.n	8004b2c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004af0:	2208      	movs	r2, #8
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4413      	add	r3, r2
 8004af6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d014      	beq.n	8004b2c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f023 0307 	bic.w	r3, r3, #7
 8004b08:	3308      	adds	r3, #8
 8004b0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <pvPortMalloc+0x6c>
	__asm volatile
 8004b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1a:	f383 8811 	msr	BASEPRI, r3
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	617b      	str	r3, [r7, #20]
}
 8004b28:	bf00      	nop
 8004b2a:	e7fe      	b.n	8004b2a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d069      	beq.n	8004c06 <pvPortMalloc+0x146>
 8004b32:	4b42      	ldr	r3, [pc, #264]	; (8004c3c <pvPortMalloc+0x17c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d864      	bhi.n	8004c06 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b3c:	4b40      	ldr	r3, [pc, #256]	; (8004c40 <pvPortMalloc+0x180>)
 8004b3e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b40:	4b3f      	ldr	r3, [pc, #252]	; (8004c40 <pvPortMalloc+0x180>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b46:	e004      	b.n	8004b52 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d903      	bls.n	8004b64 <pvPortMalloc+0xa4>
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f1      	bne.n	8004b48 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b64:	4b33      	ldr	r3, [pc, #204]	; (8004c34 <pvPortMalloc+0x174>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d04b      	beq.n	8004c06 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2208      	movs	r2, #8
 8004b74:	4413      	add	r3, r2
 8004b76:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	1ad2      	subs	r2, r2, r3
 8004b88:	2308      	movs	r3, #8
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d91f      	bls.n	8004bd0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4413      	add	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <pvPortMalloc+0xf8>
	__asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	613b      	str	r3, [r7, #16]
}
 8004bb4:	bf00      	nop
 8004bb6:	e7fe      	b.n	8004bb6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	1ad2      	subs	r2, r2, r3
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bca:	69b8      	ldr	r0, [r7, #24]
 8004bcc:	f000 f8f8 	bl	8004dc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bd0:	4b1a      	ldr	r3, [pc, #104]	; (8004c3c <pvPortMalloc+0x17c>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	4a18      	ldr	r2, [pc, #96]	; (8004c3c <pvPortMalloc+0x17c>)
 8004bdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bde:	4b17      	ldr	r3, [pc, #92]	; (8004c3c <pvPortMalloc+0x17c>)
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	4b18      	ldr	r3, [pc, #96]	; (8004c44 <pvPortMalloc+0x184>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d203      	bcs.n	8004bf2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bea:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <pvPortMalloc+0x17c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a15      	ldr	r2, [pc, #84]	; (8004c44 <pvPortMalloc+0x184>)
 8004bf0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	4b10      	ldr	r3, [pc, #64]	; (8004c38 <pvPortMalloc+0x178>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c06:	f7ff fa87 	bl	8004118 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <pvPortMalloc+0x16a>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	60fb      	str	r3, [r7, #12]
}
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <pvPortMalloc+0x168>
	return pvReturn;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3728      	adds	r7, #40	; 0x28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	20001524 	.word	0x20001524
 8004c38:	20001530 	.word	0x20001530
 8004c3c:	20001528 	.word	0x20001528
 8004c40:	2000151c 	.word	0x2000151c
 8004c44:	2000152c 	.word	0x2000152c

08004c48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d048      	beq.n	8004cec <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	425b      	negs	r3, r3
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4413      	add	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	4b21      	ldr	r3, [pc, #132]	; (8004cf4 <vPortFree+0xac>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4013      	ands	r3, r2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10a      	bne.n	8004c8c <vPortFree+0x44>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	60fb      	str	r3, [r7, #12]
}
 8004c88:	bf00      	nop
 8004c8a:	e7fe      	b.n	8004c8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <vPortFree+0x62>
	__asm volatile
 8004c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	60bb      	str	r3, [r7, #8]
}
 8004ca6:	bf00      	nop
 8004ca8:	e7fe      	b.n	8004ca8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <vPortFree+0xac>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d019      	beq.n	8004cec <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d115      	bne.n	8004cec <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <vPortFree+0xac>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	401a      	ands	r2, r3
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004cd0:	f7ff fa14 	bl	80040fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <vPortFree+0xb0>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4413      	add	r3, r2
 8004cde:	4a06      	ldr	r2, [pc, #24]	; (8004cf8 <vPortFree+0xb0>)
 8004ce0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ce2:	6938      	ldr	r0, [r7, #16]
 8004ce4:	f000 f86c 	bl	8004dc0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ce8:	f7ff fa16 	bl	8004118 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004cec:	bf00      	nop
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20001530 	.word	0x20001530
 8004cf8:	20001528 	.word	0x20001528

08004cfc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004d06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d08:	4b27      	ldr	r3, [pc, #156]	; (8004da8 <prvHeapInit+0xac>)
 8004d0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00c      	beq.n	8004d30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3307      	adds	r3, #7
 8004d1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0307 	bic.w	r3, r3, #7
 8004d22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	4a1f      	ldr	r2, [pc, #124]	; (8004da8 <prvHeapInit+0xac>)
 8004d2c:	4413      	add	r3, r2
 8004d2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d34:	4a1d      	ldr	r2, [pc, #116]	; (8004dac <prvHeapInit+0xb0>)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d3a:	4b1c      	ldr	r3, [pc, #112]	; (8004dac <prvHeapInit+0xb0>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	4413      	add	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d48:	2208      	movs	r2, #8
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0307 	bic.w	r3, r3, #7
 8004d56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4a15      	ldr	r2, [pc, #84]	; (8004db0 <prvHeapInit+0xb4>)
 8004d5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d5e:	4b14      	ldr	r3, [pc, #80]	; (8004db0 <prvHeapInit+0xb4>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2200      	movs	r2, #0
 8004d64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d66:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <prvHeapInit+0xb4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	1ad2      	subs	r2, r2, r3
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <prvHeapInit+0xb4>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	4a0a      	ldr	r2, [pc, #40]	; (8004db4 <prvHeapInit+0xb8>)
 8004d8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	4a09      	ldr	r2, [pc, #36]	; (8004db8 <prvHeapInit+0xbc>)
 8004d92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d94:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <prvHeapInit+0xc0>)
 8004d96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d9a:	601a      	str	r2, [r3, #0]
}
 8004d9c:	bf00      	nop
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	2000091c 	.word	0x2000091c
 8004dac:	2000151c 	.word	0x2000151c
 8004db0:	20001524 	.word	0x20001524
 8004db4:	2000152c 	.word	0x2000152c
 8004db8:	20001528 	.word	0x20001528
 8004dbc:	20001530 	.word	0x20001530

08004dc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004dc8:	4b27      	ldr	r3, [pc, #156]	; (8004e68 <prvInsertBlockIntoFreeList+0xa8>)
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	e002      	b.n	8004dd4 <prvInsertBlockIntoFreeList+0x14>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d8f7      	bhi.n	8004dce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	4413      	add	r3, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d108      	bne.n	8004e02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	441a      	add	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	441a      	add	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d118      	bne.n	8004e48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <prvInsertBlockIntoFreeList+0xac>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d00d      	beq.n	8004e3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	441a      	add	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	e008      	b.n	8004e50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <prvInsertBlockIntoFreeList+0xac>)
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	e003      	b.n	8004e50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d002      	beq.n	8004e5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e5e:	bf00      	nop
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr
 8004e68:	2000151c 	.word	0x2000151c
 8004e6c:	20001524 	.word	0x20001524

08004e70 <memset>:
 8004e70:	4603      	mov	r3, r0
 8004e72:	4402      	add	r2, r0
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d100      	bne.n	8004e7a <memset+0xa>
 8004e78:	4770      	bx	lr
 8004e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e7e:	e7f9      	b.n	8004e74 <memset+0x4>

08004e80 <_reclaim_reent>:
 8004e80:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <_reclaim_reent+0xa8>)
 8004e82:	b570      	push	{r4, r5, r6, lr}
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4604      	mov	r4, r0
 8004e88:	4283      	cmp	r3, r0
 8004e8a:	d04b      	beq.n	8004f24 <_reclaim_reent+0xa4>
 8004e8c:	69c3      	ldr	r3, [r0, #28]
 8004e8e:	b143      	cbz	r3, 8004ea2 <_reclaim_reent+0x22>
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d144      	bne.n	8004f20 <_reclaim_reent+0xa0>
 8004e96:	69e3      	ldr	r3, [r4, #28]
 8004e98:	6819      	ldr	r1, [r3, #0]
 8004e9a:	b111      	cbz	r1, 8004ea2 <_reclaim_reent+0x22>
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f000 f86b 	bl	8004f78 <_free_r>
 8004ea2:	6961      	ldr	r1, [r4, #20]
 8004ea4:	b111      	cbz	r1, 8004eac <_reclaim_reent+0x2c>
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f000 f866 	bl	8004f78 <_free_r>
 8004eac:	69e1      	ldr	r1, [r4, #28]
 8004eae:	b111      	cbz	r1, 8004eb6 <_reclaim_reent+0x36>
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f000 f861 	bl	8004f78 <_free_r>
 8004eb6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004eb8:	b111      	cbz	r1, 8004ec0 <_reclaim_reent+0x40>
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f000 f85c 	bl	8004f78 <_free_r>
 8004ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ec2:	b111      	cbz	r1, 8004eca <_reclaim_reent+0x4a>
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f000 f857 	bl	8004f78 <_free_r>
 8004eca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ecc:	b111      	cbz	r1, 8004ed4 <_reclaim_reent+0x54>
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f000 f852 	bl	8004f78 <_free_r>
 8004ed4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004ed6:	b111      	cbz	r1, 8004ede <_reclaim_reent+0x5e>
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f000 f84d 	bl	8004f78 <_free_r>
 8004ede:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004ee0:	b111      	cbz	r1, 8004ee8 <_reclaim_reent+0x68>
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f000 f848 	bl	8004f78 <_free_r>
 8004ee8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004eea:	b111      	cbz	r1, 8004ef2 <_reclaim_reent+0x72>
 8004eec:	4620      	mov	r0, r4
 8004eee:	f000 f843 	bl	8004f78 <_free_r>
 8004ef2:	6a23      	ldr	r3, [r4, #32]
 8004ef4:	b1b3      	cbz	r3, 8004f24 <_reclaim_reent+0xa4>
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004efc:	4718      	bx	r3
 8004efe:	5949      	ldr	r1, [r1, r5]
 8004f00:	b941      	cbnz	r1, 8004f14 <_reclaim_reent+0x94>
 8004f02:	3504      	adds	r5, #4
 8004f04:	69e3      	ldr	r3, [r4, #28]
 8004f06:	2d80      	cmp	r5, #128	; 0x80
 8004f08:	68d9      	ldr	r1, [r3, #12]
 8004f0a:	d1f8      	bne.n	8004efe <_reclaim_reent+0x7e>
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f000 f833 	bl	8004f78 <_free_r>
 8004f12:	e7c0      	b.n	8004e96 <_reclaim_reent+0x16>
 8004f14:	680e      	ldr	r6, [r1, #0]
 8004f16:	4620      	mov	r0, r4
 8004f18:	f000 f82e 	bl	8004f78 <_free_r>
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	e7ef      	b.n	8004f00 <_reclaim_reent+0x80>
 8004f20:	2500      	movs	r5, #0
 8004f22:	e7ef      	b.n	8004f04 <_reclaim_reent+0x84>
 8004f24:	bd70      	pop	{r4, r5, r6, pc}
 8004f26:	bf00      	nop
 8004f28:	200000a4 	.word	0x200000a4

08004f2c <__libc_init_array>:
 8004f2c:	b570      	push	{r4, r5, r6, lr}
 8004f2e:	2600      	movs	r6, #0
 8004f30:	4d0c      	ldr	r5, [pc, #48]	; (8004f64 <__libc_init_array+0x38>)
 8004f32:	4c0d      	ldr	r4, [pc, #52]	; (8004f68 <__libc_init_array+0x3c>)
 8004f34:	1b64      	subs	r4, r4, r5
 8004f36:	10a4      	asrs	r4, r4, #2
 8004f38:	42a6      	cmp	r6, r4
 8004f3a:	d109      	bne.n	8004f50 <__libc_init_array+0x24>
 8004f3c:	f000 f870 	bl	8005020 <_init>
 8004f40:	2600      	movs	r6, #0
 8004f42:	4d0a      	ldr	r5, [pc, #40]	; (8004f6c <__libc_init_array+0x40>)
 8004f44:	4c0a      	ldr	r4, [pc, #40]	; (8004f70 <__libc_init_array+0x44>)
 8004f46:	1b64      	subs	r4, r4, r5
 8004f48:	10a4      	asrs	r4, r4, #2
 8004f4a:	42a6      	cmp	r6, r4
 8004f4c:	d105      	bne.n	8004f5a <__libc_init_array+0x2e>
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}
 8004f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f54:	4798      	blx	r3
 8004f56:	3601      	adds	r6, #1
 8004f58:	e7ee      	b.n	8004f38 <__libc_init_array+0xc>
 8004f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5e:	4798      	blx	r3
 8004f60:	3601      	adds	r6, #1
 8004f62:	e7f2      	b.n	8004f4a <__libc_init_array+0x1e>
 8004f64:	08005328 	.word	0x08005328
 8004f68:	08005328 	.word	0x08005328
 8004f6c:	08005328 	.word	0x08005328
 8004f70:	0800532c 	.word	0x0800532c

08004f74 <__retarget_lock_acquire_recursive>:
 8004f74:	4770      	bx	lr

08004f76 <__retarget_lock_release_recursive>:
 8004f76:	4770      	bx	lr

08004f78 <_free_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	4605      	mov	r5, r0
 8004f7c:	2900      	cmp	r1, #0
 8004f7e:	d040      	beq.n	8005002 <_free_r+0x8a>
 8004f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f84:	1f0c      	subs	r4, r1, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bfb8      	it	lt
 8004f8a:	18e4      	addlt	r4, r4, r3
 8004f8c:	f000 f83c 	bl	8005008 <__malloc_lock>
 8004f90:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <_free_r+0x8c>)
 8004f92:	6813      	ldr	r3, [r2, #0]
 8004f94:	b933      	cbnz	r3, 8004fa4 <_free_r+0x2c>
 8004f96:	6063      	str	r3, [r4, #4]
 8004f98:	6014      	str	r4, [r2, #0]
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fa0:	f000 b838 	b.w	8005014 <__malloc_unlock>
 8004fa4:	42a3      	cmp	r3, r4
 8004fa6:	d908      	bls.n	8004fba <_free_r+0x42>
 8004fa8:	6820      	ldr	r0, [r4, #0]
 8004faa:	1821      	adds	r1, r4, r0
 8004fac:	428b      	cmp	r3, r1
 8004fae:	bf01      	itttt	eq
 8004fb0:	6819      	ldreq	r1, [r3, #0]
 8004fb2:	685b      	ldreq	r3, [r3, #4]
 8004fb4:	1809      	addeq	r1, r1, r0
 8004fb6:	6021      	streq	r1, [r4, #0]
 8004fb8:	e7ed      	b.n	8004f96 <_free_r+0x1e>
 8004fba:	461a      	mov	r2, r3
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	b10b      	cbz	r3, 8004fc4 <_free_r+0x4c>
 8004fc0:	42a3      	cmp	r3, r4
 8004fc2:	d9fa      	bls.n	8004fba <_free_r+0x42>
 8004fc4:	6811      	ldr	r1, [r2, #0]
 8004fc6:	1850      	adds	r0, r2, r1
 8004fc8:	42a0      	cmp	r0, r4
 8004fca:	d10b      	bne.n	8004fe4 <_free_r+0x6c>
 8004fcc:	6820      	ldr	r0, [r4, #0]
 8004fce:	4401      	add	r1, r0
 8004fd0:	1850      	adds	r0, r2, r1
 8004fd2:	4283      	cmp	r3, r0
 8004fd4:	6011      	str	r1, [r2, #0]
 8004fd6:	d1e0      	bne.n	8004f9a <_free_r+0x22>
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4408      	add	r0, r1
 8004fde:	6010      	str	r0, [r2, #0]
 8004fe0:	6053      	str	r3, [r2, #4]
 8004fe2:	e7da      	b.n	8004f9a <_free_r+0x22>
 8004fe4:	d902      	bls.n	8004fec <_free_r+0x74>
 8004fe6:	230c      	movs	r3, #12
 8004fe8:	602b      	str	r3, [r5, #0]
 8004fea:	e7d6      	b.n	8004f9a <_free_r+0x22>
 8004fec:	6820      	ldr	r0, [r4, #0]
 8004fee:	1821      	adds	r1, r4, r0
 8004ff0:	428b      	cmp	r3, r1
 8004ff2:	bf01      	itttt	eq
 8004ff4:	6819      	ldreq	r1, [r3, #0]
 8004ff6:	685b      	ldreq	r3, [r3, #4]
 8004ff8:	1809      	addeq	r1, r1, r0
 8004ffa:	6021      	streq	r1, [r4, #0]
 8004ffc:	6063      	str	r3, [r4, #4]
 8004ffe:	6054      	str	r4, [r2, #4]
 8005000:	e7cb      	b.n	8004f9a <_free_r+0x22>
 8005002:	bd38      	pop	{r3, r4, r5, pc}
 8005004:	20001670 	.word	0x20001670

08005008 <__malloc_lock>:
 8005008:	4801      	ldr	r0, [pc, #4]	; (8005010 <__malloc_lock+0x8>)
 800500a:	f7ff bfb3 	b.w	8004f74 <__retarget_lock_acquire_recursive>
 800500e:	bf00      	nop
 8005010:	2000166c 	.word	0x2000166c

08005014 <__malloc_unlock>:
 8005014:	4801      	ldr	r0, [pc, #4]	; (800501c <__malloc_unlock+0x8>)
 8005016:	f7ff bfae 	b.w	8004f76 <__retarget_lock_release_recursive>
 800501a:	bf00      	nop
 800501c:	2000166c 	.word	0x2000166c

08005020 <_init>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr

0800502c <_fini>:
 800502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502e:	bf00      	nop
 8005030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005032:	bc08      	pop	{r3}
 8005034:	469e      	mov	lr, r3
 8005036:	4770      	bx	lr
