
ModbusTelnet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f28  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005038  08005038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800510c  0800510c  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800510c  0800510c  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800510c  0800510c  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005110  08005110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08005114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015d4  200000a8  080051bc  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000167c  080051bc  0002167c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d492  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c7c  00000000  00000000  0002d5a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  00030228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d1  00000000  00000000  00030f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019129  00000000  00000000  000318f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ee4b  00000000  00000000  0004aa22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d505  00000000  00000000  0005986d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035c0  00000000  00000000  000e6d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000ea334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a8 	.word	0x200000a8
 800012c:	00000000 	.word	0x00000000
 8000130:	08005020 	.word	0x08005020

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000ac 	.word	0x200000ac
 800014c:	08005020 	.word	0x08005020

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	200000c4 	.word	0x200000c4
 800018c:	20000164 	.word	0x20000164

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b08e      	sub	sp, #56	; 0x38
 8000194:	af00      	add	r7, sp, #0

  HAL_Init();
 8000196:	f001 ff99 	bl	80020cc <HAL_Init>

  SystemClock_Config();
 800019a:	f000 f83b 	bl	8000214 <SystemClock_Config>

  MX_GPIO_Init();
 800019e:	f000 f8b5 	bl	800030c <MX_GPIO_Init>
  MX_SPI1_Init();
 80001a2:	f000 f87d 	bl	80002a0 <MX_SPI1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TelnetServer */
  osThreadDef(TelnetServer, StartDefaultTask, osPriorityLow, 0, 128);
 80001a6:	4b16      	ldr	r3, [pc, #88]	; (8000200 <main+0x70>)
 80001a8:	f107 041c 	add.w	r4, r7, #28
 80001ac:	461d      	mov	r5, r3
 80001ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TelnetServerHandle = osThreadCreate(osThread(TelnetServer), NULL);
 80001ba:	f107 031c 	add.w	r3, r7, #28
 80001be:	2100      	movs	r1, #0
 80001c0:	4618      	mov	r0, r3
 80001c2:	f003 fc4d 	bl	8003a60 <osThreadCreate>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <main+0x74>)
 80001ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of ModbusTask */
  osThreadDef(ModbusTask, StartTask02, osPriorityNormal, 0, 128);
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <main+0x78>)
 80001ce:	463c      	mov	r4, r7
 80001d0:	461d      	mov	r5, r3
 80001d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusTaskHandle = osThreadCreate(osThread(ModbusTask), NULL);
 80001de:	463b      	mov	r3, r7
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f003 fc3c 	bl	8003a60 <osThreadCreate>
 80001e8:	4603      	mov	r3, r0
 80001ea:	4a08      	ldr	r2, [pc, #32]	; (800020c <main+0x7c>)
 80001ec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  W5500Init();
 80001ee:	f000 feb5 	bl	8000f5c <W5500Init>
  ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO2);
 80001f2:	4907      	ldr	r1, [pc, #28]	; (8000210 <main+0x80>)
 80001f4:	2000      	movs	r0, #0
 80001f6:	f001 f8b3 	bl	8001360 <ctlnetwork>
  osKernelStart();
 80001fa:	f003 fc2a 	bl	8003a52 <osKernelStart>
//  ctlnetwork(CN_SET_NETMODE, (void*) &gNetMode);
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fe:	e7fe      	b.n	80001fe <main+0x6e>
 8000200:	08005048 	.word	0x08005048
 8000204:	200003bc 	.word	0x200003bc
 8000208:	08005070 	.word	0x08005070
 800020c:	200003c0 	.word	0x200003c0
 8000210:	20000000 	.word	0x20000000

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b090      	sub	sp, #64	; 0x40
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0318 	add.w	r3, r7, #24
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f004 fe24 	bl	8004e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]
 8000234:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000236:	2301      	movs	r3, #1
 8000238:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000244:	2301      	movs	r3, #1
 8000246:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000248:	2302      	movs	r3, #2
 800024a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000250:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000252:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000256:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 0318 	add.w	r3, r7, #24
 800025c:	4618      	mov	r0, r3
 800025e:	f002 fa55 	bl	800270c <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000268:	f000 f8fa 	bl	8000460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	230f      	movs	r3, #15
 800026e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000270:	2302      	movs	r3, #2
 8000272:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2100      	movs	r1, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f002 fcc3 	bl	8002c10 <HAL_RCC_ClockConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000290:	f000 f8e6 	bl	8000460 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000294:	f002 fda6 	bl	8002de4 <HAL_RCC_EnableCSS>
}
 8000298:	bf00      	nop
 800029a:	3740      	adds	r7, #64	; 0x40
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <MX_SPI1_Init+0x64>)
 80002a6:	4a18      	ldr	r2, [pc, #96]	; (8000308 <MX_SPI1_Init+0x68>)
 80002a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002aa:	4b16      	ldr	r3, [pc, #88]	; (8000304 <MX_SPI1_Init+0x64>)
 80002ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <MX_SPI1_Init+0x64>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <MX_SPI1_Init+0x64>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80002be:	4b11      	ldr	r3, [pc, #68]	; (8000304 <MX_SPI1_Init+0x64>)
 80002c0:	2202      	movs	r2, #2
 80002c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80002c4:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <MX_SPI1_Init+0x64>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <MX_SPI1_Init+0x64>)
 80002cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <MX_SPI1_Init+0x64>)
 80002d4:	2220      	movs	r2, #32
 80002d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002d8:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <MX_SPI1_Init+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <MX_SPI1_Init+0x64>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <MX_SPI1_Init+0x64>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002ea:	4b06      	ldr	r3, [pc, #24]	; (8000304 <MX_SPI1_Init+0x64>)
 80002ec:	220a      	movs	r2, #10
 80002ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002f0:	4804      	ldr	r0, [pc, #16]	; (8000304 <MX_SPI1_Init+0x64>)
 80002f2:	f002 fe0f 	bl	8002f14 <HAL_SPI_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002fc:	f000 f8b0 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000300:	bf00      	nop
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000364 	.word	0x20000364
 8000308:	40013000 	.word	0x40013000

0800030c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b088      	sub	sp, #32
 8000310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	f107 0310 	add.w	r3, r7, #16
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000320:	4b3e      	ldr	r3, [pc, #248]	; (800041c <MX_GPIO_Init+0x110>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a3d      	ldr	r2, [pc, #244]	; (800041c <MX_GPIO_Init+0x110>)
 8000326:	f043 0310 	orr.w	r3, r3, #16
 800032a:	6193      	str	r3, [r2, #24]
 800032c:	4b3b      	ldr	r3, [pc, #236]	; (800041c <MX_GPIO_Init+0x110>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	f003 0310 	and.w	r3, r3, #16
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000338:	4b38      	ldr	r3, [pc, #224]	; (800041c <MX_GPIO_Init+0x110>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a37      	ldr	r2, [pc, #220]	; (800041c <MX_GPIO_Init+0x110>)
 800033e:	f043 0320 	orr.w	r3, r3, #32
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b35      	ldr	r3, [pc, #212]	; (800041c <MX_GPIO_Init+0x110>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0320 	and.w	r3, r3, #32
 800034c:	60bb      	str	r3, [r7, #8]
 800034e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000350:	4b32      	ldr	r3, [pc, #200]	; (800041c <MX_GPIO_Init+0x110>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a31      	ldr	r2, [pc, #196]	; (800041c <MX_GPIO_Init+0x110>)
 8000356:	f043 0304 	orr.w	r3, r3, #4
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b2f      	ldr	r3, [pc, #188]	; (800041c <MX_GPIO_Init+0x110>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0304 	and.w	r3, r3, #4
 8000364:	607b      	str	r3, [r7, #4]
 8000366:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000368:	4b2c      	ldr	r3, [pc, #176]	; (800041c <MX_GPIO_Init+0x110>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a2b      	ldr	r2, [pc, #172]	; (800041c <MX_GPIO_Init+0x110>)
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b29      	ldr	r3, [pc, #164]	; (800041c <MX_GPIO_Init+0x110>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0308 	and.w	r3, r3, #8
 800037c:	603b      	str	r3, [r7, #0]
 800037e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000386:	4826      	ldr	r0, [pc, #152]	; (8000420 <MX_GPIO_Init+0x114>)
 8000388:	f002 f98e 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	2103      	movs	r1, #3
 8000390:	4824      	ldr	r0, [pc, #144]	; (8000424 <MX_GPIO_Init+0x118>)
 8000392:	f002 f989 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800039c:	4822      	ldr	r0, [pc, #136]	; (8000428 <MX_GPIO_Init+0x11c>)
 800039e:	f002 f983 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a8:	2301      	movs	r3, #1
 80003aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ac:	2300      	movs	r3, #0
 80003ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b0:	2302      	movs	r3, #2
 80003b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003b4:	f107 0310 	add.w	r3, r7, #16
 80003b8:	4619      	mov	r1, r3
 80003ba:	4819      	ldr	r0, [pc, #100]	; (8000420 <MX_GPIO_Init+0x114>)
 80003bc:	f001 fff0 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80003c0:	2303      	movs	r3, #3
 80003c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c4:	2301      	movs	r3, #1
 80003c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003cc:	2302      	movs	r3, #2
 80003ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	4619      	mov	r1, r3
 80003d6:	4813      	ldr	r0, [pc, #76]	; (8000424 <MX_GPIO_Init+0x118>)
 80003d8:	f001 ffe2 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e2:	2301      	movs	r3, #1
 80003e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ea:	2302      	movs	r3, #2
 80003ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	4619      	mov	r1, r3
 80003f4:	480c      	ldr	r0, [pc, #48]	; (8000428 <MX_GPIO_Init+0x11c>)
 80003f6:	f001 ffd3 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80003fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	4619      	mov	r1, r3
 800040e:	4806      	ldr	r0, [pc, #24]	; (8000428 <MX_GPIO_Init+0x11c>)
 8000410:	f001 ffc6 	bl	80023a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000414:	bf00      	nop
 8000416:	3720      	adds	r7, #32
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40021000 	.word	0x40021000
 8000420:	40011000 	.word	0x40011000
 8000424:	40010800 	.word	0x40010800
 8000428:	40010c00 	.word	0x40010c00

0800042c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		startTelnet();
 8000434:	f000 f942 	bl	80006bc <startTelnet>
	    osDelay(1);
 8000438:	2001      	movs	r0, #1
 800043a:	f003 fb5d 	bl	8003af8 <osDelay>
		startTelnet();
 800043e:	e7f9      	b.n	8000434 <StartDefaultTask+0x8>

08000440 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 8000448:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800044c:	4803      	ldr	r0, [pc, #12]	; (800045c <StartTask02+0x1c>)
 800044e:	f002 f943 	bl	80026d8 <HAL_GPIO_TogglePin>
	  osDelay(500);  // Adjust the delay as needed for the desired blink rate
 8000452:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000456:	f003 fb4f 	bl	8003af8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 800045a:	e7f5      	b.n	8000448 <StartTask02+0x8>
 800045c:	40010c00 	.word	0x40010c00

08000460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000464:	b672      	cpsid	i
}
 8000466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000468:	e7fe      	b.n	8000468 <Error_Handler+0x8>
	...

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000472:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <HAL_MspInit+0x68>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4a17      	ldr	r2, [pc, #92]	; (80004d4 <HAL_MspInit+0x68>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6193      	str	r3, [r2, #24]
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <HAL_MspInit+0x68>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <HAL_MspInit+0x68>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a11      	ldr	r2, [pc, #68]	; (80004d4 <HAL_MspInit+0x68>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <HAL_MspInit+0x68>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	210f      	movs	r1, #15
 80004a6:	f06f 0001 	mvn.w	r0, #1
 80004aa:	f001 ff50 	bl	800234e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <HAL_MspInit+0x6c>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <HAL_MspInit+0x6c>)
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ca:	bf00      	nop
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010000 	.word	0x40010000

080004dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <HAL_SPI_MspInit+0x88>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d12f      	bne.n	800055c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004fc:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <HAL_SPI_MspInit+0x8c>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a19      	ldr	r2, [pc, #100]	; (8000568 <HAL_SPI_MspInit+0x8c>)
 8000502:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b17      	ldr	r3, [pc, #92]	; (8000568 <HAL_SPI_MspInit+0x8c>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <HAL_SPI_MspInit+0x8c>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a13      	ldr	r2, [pc, #76]	; (8000568 <HAL_SPI_MspInit+0x8c>)
 800051a:	f043 0304 	orr.w	r3, r3, #4
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <HAL_SPI_MspInit+0x8c>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0304 	and.w	r3, r3, #4
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800052c:	23a0      	movs	r3, #160	; 0xa0
 800052e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000530:	2302      	movs	r3, #2
 8000532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000534:	2303      	movs	r3, #3
 8000536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4619      	mov	r1, r3
 800053e:	480b      	ldr	r0, [pc, #44]	; (800056c <HAL_SPI_MspInit+0x90>)
 8000540:	f001 ff2e 	bl	80023a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000544:	2340      	movs	r3, #64	; 0x40
 8000546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	4619      	mov	r1, r3
 8000556:	4805      	ldr	r0, [pc, #20]	; (800056c <HAL_SPI_MspInit+0x90>)
 8000558:	f001 ff22 	bl	80023a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800055c:	bf00      	nop
 800055e:	3720      	adds	r7, #32
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40013000 	.word	0x40013000
 8000568:	40021000 	.word	0x40021000
 800056c:	40010800 	.word	0x40010800

08000570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000574:	f002 fc96 	bl	8002ea4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <NMI_Handler+0x8>

0800057a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057e:	e7fe      	b.n	800057e <HardFault_Handler+0x4>

08000580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <MemManage_Handler+0x4>

08000586 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <BusFault_Handler+0x4>

0800058c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <UsageFault_Handler+0x4>

08000592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr

0800059e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a2:	f001 fdd9 	bl	8002158 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80005a6:	f004 f851 	bl	800464c <xTaskGetSchedulerState>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d001      	beq.n	80005b4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80005b0:	f004 fa42 	bl	8004a38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <writeMessage>:

uint8_t buffer[MAX_BUFFER_SIZE];  // Assuming buffer is declared globally or passed as an argument
uint8_t telnetSocket = 0;
uint16_t telnetPort = 23;

void writeMessage(const char* message) {
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    send(telnetSocket, (void*)message, strlen(message));
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <writeMessage+0x28>)
 80005ce:	781c      	ldrb	r4, [r3, #0]
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f7ff fdbd 	bl	8000150 <strlen>
 80005d6:	4603      	mov	r3, r0
 80005d8:	b29b      	uxth	r3, r3
 80005da:	461a      	mov	r2, r3
 80005dc:	6879      	ldr	r1, [r7, #4]
 80005de:	4620      	mov	r0, r4
 80005e0:	f000 fa98 	bl	8000b14 <send>
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd90      	pop	{r4, r7, pc}
 80005ec:	200007c4 	.word	0x200007c4

080005f0 <readMessage>:

uint8_t* readMessage() {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0

    int receivedSize = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
    int indexChar = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
    uint8_t receivedChar;

    while (1) {
		receivedSize = recv(telnetSocket, &receivedChar, 1);
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <readMessage+0x70>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	1df9      	adds	r1, r7, #7
 8000604:	2201      	movs	r2, #1
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fb7e 	bl	8000d08 <recv>
 800060c:	60b8      	str	r0, [r7, #8]

		// Check for errors or connection closure
		if (receivedSize <= 0) {
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	2b00      	cmp	r3, #0
 8000612:	dd17      	ble.n	8000644 <readMessage+0x54>
			// Handle error or connection closure
			break;
		}
		// Check if the received character is a newline
		if (receivedChar == '\n') {
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	2b0a      	cmp	r3, #10
 8000618:	d105      	bne.n	8000626 <readMessage+0x36>
			// If yes, terminate the string and break out of the loop
			buffer[indexChar] = '\0';
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <readMessage+0x74>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4413      	add	r3, r2
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
			break;
 8000624:	e011      	b.n	800064a <readMessage+0x5a>
		}
		// Otherwise, add the character to the buffer
		buffer[indexChar] = receivedChar;
 8000626:	79f9      	ldrb	r1, [r7, #7]
 8000628:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <readMessage+0x74>)
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	4413      	add	r3, r2
 800062e:	460a      	mov	r2, r1
 8000630:	701a      	strb	r2, [r3, #0]
		// Increment the receivedSize counter
		indexChar++;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3301      	adds	r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
		// Check if the buffer is full (adjust the size accordingly)
		if (indexChar >= MAX_BUFFER_SIZE - 1) {
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800063e:	4293      	cmp	r3, r2
 8000640:	dc02      	bgt.n	8000648 <readMessage+0x58>
		receivedSize = recv(telnetSocket, &receivedChar, 1);
 8000642:	e7dc      	b.n	80005fe <readMessage+0xe>
			break;
 8000644:	bf00      	nop
 8000646:	e000      	b.n	800064a <readMessage+0x5a>
			// Handle buffer full condition
			break;
 8000648:	bf00      	nop
		}
    }
    // Add null terminator to make it a valid C string
    buffer[indexChar] = '\0';
 800064a:	4a06      	ldr	r2, [pc, #24]	; (8000664 <readMessage+0x74>)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	4413      	add	r3, r2
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
    // Return the buffer (or you might return something else based on your needs)
    return buffer;
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <readMessage+0x74>)
}
 8000656:	4618      	mov	r0, r3
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200007c4 	.word	0x200007c4
 8000664:	200003c4 	.word	0x200003c4

08000668 <toggleLeds>:

void toggleLeds(uint8_t* clientMessage) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
    if (clientMessage[0] == 'l'&&clientMessage[1]=='1') {
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b6c      	cmp	r3, #108	; 0x6c
 8000676:	d10a      	bne.n	800068e <toggleLeds+0x26>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3301      	adds	r3, #1
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b31      	cmp	r3, #49	; 0x31
 8000680:	d105      	bne.n	800068e <toggleLeds+0x26>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000686:	480b      	ldr	r0, [pc, #44]	; (80006b4 <toggleLeds+0x4c>)
 8000688:	f002 f826 	bl	80026d8 <HAL_GPIO_TogglePin>
    } else if (clientMessage[0] == 'l'&&clientMessage[1]=='2') {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
    }
}
 800068c:	e00d      	b.n	80006aa <toggleLeds+0x42>
    } else if (clientMessage[0] == 'l'&&clientMessage[1]=='2') {
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b6c      	cmp	r3, #108	; 0x6c
 8000694:	d109      	bne.n	80006aa <toggleLeds+0x42>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3301      	adds	r3, #1
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b32      	cmp	r3, #50	; 0x32
 800069e:	d104      	bne.n	80006aa <toggleLeds+0x42>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 80006a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <toggleLeds+0x50>)
 80006a6:	f002 f817 	bl	80026d8 <HAL_GPIO_TogglePin>
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40011000 	.word	0x40011000
 80006b8:	40010c00 	.word	0x40010c00

080006bc <startTelnet>:
void mainMenu(){
	writeMessage("Select your inputs\r\n1. ");
}

void startTelnet() {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    // Initialize the socket outside the loop
    socket(telnetSocket, Sn_MR_TCP, 23, 0);
 80006c0:	4b24      	ldr	r3, [pc, #144]	; (8000754 <startTelnet+0x98>)
 80006c2:	7818      	ldrb	r0, [r3, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2217      	movs	r2, #23
 80006c8:	2101      	movs	r1, #1
 80006ca:	f000 f847 	bl	800075c <socket>
    listen(telnetSocket);
 80006ce:	4b21      	ldr	r3, [pc, #132]	; (8000754 <startTelnet+0x98>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f9c4 	bl	8000a60 <listen>

    while (1) {
        if (getSn_SR(telnetSocket) == SOCK_ESTABLISHED) {
 80006d8:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <startTelnet+0x98>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	3301      	adds	r3, #1
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fa22 	bl	8001b30 <WIZCHIP_READ>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b17      	cmp	r3, #23
 80006f0:	d116      	bne.n	8000720 <startTelnet+0x64>
            writeMessage("\033[32mTelnet Configuration Session\033[37m\r\n");
 80006f2:	4819      	ldr	r0, [pc, #100]	; (8000758 <startTelnet+0x9c>)
 80006f4:	f7ff ff66 	bl	80005c4 <writeMessage>
            toggleLeds(readMessage());
 80006f8:	f7ff ff7a 	bl	80005f0 <readMessage>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ffb2 	bl	8000668 <toggleLeds>
            // Optionally, add a delay to avoid rapid reconnection attempts
            HAL_Delay(300);
            continue;//continue to the next iteration of loop
        }
        // Add a condition to break out of the loop or handle other logic
        if (getSn_SR(telnetSocket) != SOCK_ESTABLISHED) {
 8000704:	4b13      	ldr	r3, [pc, #76]	; (8000754 <startTelnet+0x98>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	3301      	adds	r3, #1
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fa0c 	bl	8001b30 <WIZCHIP_READ>
 8000718:	4603      	mov	r3, r0
 800071a:	2b17      	cmp	r3, #23
 800071c:	d0dc      	beq.n	80006d8 <startTelnet+0x1c>
        	break;
 800071e:	e016      	b.n	800074e <startTelnet+0x92>
            close(telnetSocket);
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <startTelnet+0x98>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f92d 	bl	8000984 <close>
            socket(telnetSocket, Sn_MR_TCP, 23, 0);
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <startTelnet+0x98>)
 800072c:	7818      	ldrb	r0, [r3, #0]
 800072e:	2300      	movs	r3, #0
 8000730:	2217      	movs	r2, #23
 8000732:	2101      	movs	r1, #1
 8000734:	f000 f812 	bl	800075c <socket>
            listen(telnetSocket);
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <startTelnet+0x98>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 f98f 	bl	8000a60 <listen>
            HAL_Delay(300);
 8000742:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000746:	f001 fd23 	bl	8002190 <HAL_Delay>
            continue;//continue to the next iteration of loop
 800074a:	bf00      	nop
        if (getSn_SR(telnetSocket) == SOCK_ESTABLISHED) {
 800074c:	e7c4      	b.n	80006d8 <startTelnet+0x1c>
        }

    }
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200007c4 	.word	0x200007c4
 8000758:	080050a4 	.word	0x080050a4

0800075c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	4604      	mov	r4, r0
 8000764:	4608      	mov	r0, r1
 8000766:	4611      	mov	r1, r2
 8000768:	461a      	mov	r2, r3
 800076a:	4623      	mov	r3, r4
 800076c:	71fb      	strb	r3, [r7, #7]
 800076e:	4603      	mov	r3, r0
 8000770:	71bb      	strb	r3, [r7, #6]
 8000772:	460b      	mov	r3, r1
 8000774:	80bb      	strh	r3, [r7, #4]
 8000776:	4613      	mov	r3, r2
 8000778:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b08      	cmp	r3, #8
 800077e:	d902      	bls.n	8000786 <socket+0x2a>
 8000780:	f04f 33ff 	mov.w	r3, #4294967295
 8000784:	e0f0      	b.n	8000968 <socket+0x20c>
	switch(protocol)
 8000786:	79bb      	ldrb	r3, [r7, #6]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d005      	beq.n	8000798 <socket+0x3c>
 800078c:	2b00      	cmp	r3, #0
 800078e:	dd11      	ble.n	80007b4 <socket+0x58>
 8000790:	3b02      	subs	r3, #2
 8000792:	2b02      	cmp	r3, #2
 8000794:	d80e      	bhi.n	80007b4 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000796:	e011      	b.n	80007bc <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2204      	movs	r2, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80007a4:	f001 fa5e 	bl	8001c64 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d105      	bne.n	80007ba <socket+0x5e>
 80007ae:	f06f 0302 	mvn.w	r3, #2
 80007b2:	e0d9      	b.n	8000968 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80007b4:	f06f 0304 	mvn.w	r3, #4
 80007b8:	e0d6      	b.n	8000968 <socket+0x20c>
	    break;
 80007ba:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <socket+0x70>
 80007c6:	f06f 0305 	mvn.w	r3, #5
 80007ca:	e0cd      	b.n	8000968 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80007cc:	78fb      	ldrb	r3, [r7, #3]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d028      	beq.n	8000824 <socket+0xc8>
	{
   	switch(protocol)
 80007d2:	79bb      	ldrb	r3, [r7, #6]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d002      	beq.n	80007de <socket+0x82>
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d008      	beq.n	80007ee <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80007dc:	e022      	b.n	8000824 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d11a      	bne.n	800081e <socket+0xc2>
 80007e8:	f06f 0305 	mvn.w	r3, #5
 80007ec:	e0bc      	b.n	8000968 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	f003 0320 	and.w	r3, r3, #32
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d006      	beq.n	8000806 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80007f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db02      	blt.n	8000806 <socket+0xaa>
 8000800:	f06f 0305 	mvn.w	r3, #5
 8000804:	e0b0      	b.n	8000968 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8000806:	78fb      	ldrb	r3, [r7, #3]
 8000808:	f003 0310 	and.w	r3, r3, #16
 800080c:	2b00      	cmp	r3, #0
 800080e:	d008      	beq.n	8000822 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000810:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000814:	2b00      	cmp	r3, #0
 8000816:	db04      	blt.n	8000822 <socket+0xc6>
 8000818:	f06f 0305 	mvn.w	r3, #5
 800081c:	e0a4      	b.n	8000968 <socket+0x20c>
   	      break;
 800081e:	bf00      	nop
 8000820:	e000      	b.n	8000824 <socket+0xc8>
   	      break;
 8000822:	bf00      	nop
   	}
   }
	close(sn);
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f8ac 	bl	8000984 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	3301      	adds	r3, #1
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	4618      	mov	r0, r3
 8000836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800083a:	f023 030f 	bic.w	r3, r3, #15
 800083e:	b25a      	sxtb	r2, r3
 8000840:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000844:	4313      	orrs	r3, r2
 8000846:	b25b      	sxtb	r3, r3
 8000848:	b2db      	uxtb	r3, r3
 800084a:	4619      	mov	r1, r3
 800084c:	f001 f9bc 	bl	8001bc8 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8000850:	88bb      	ldrh	r3, [r7, #4]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d110      	bne.n	8000878 <socket+0x11c>
	{
	   port = sock_any_port++;
 8000856:	4b46      	ldr	r3, [pc, #280]	; (8000970 <socket+0x214>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	b291      	uxth	r1, r2
 800085e:	4a44      	ldr	r2, [pc, #272]	; (8000970 <socket+0x214>)
 8000860:	8011      	strh	r1, [r2, #0]
 8000862:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000864:	4b42      	ldr	r3, [pc, #264]	; (8000970 <socket+0x214>)
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800086c:	4293      	cmp	r3, r2
 800086e:	d103      	bne.n	8000878 <socket+0x11c>
 8000870:	4b3f      	ldr	r3, [pc, #252]	; (8000970 <socket+0x214>)
 8000872:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000876:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	3301      	adds	r3, #1
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000884:	461a      	mov	r2, r3
 8000886:	88bb      	ldrh	r3, [r7, #4]
 8000888:	0a1b      	lsrs	r3, r3, #8
 800088a:	b29b      	uxth	r3, r3
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4619      	mov	r1, r3
 8000890:	4610      	mov	r0, r2
 8000892:	f001 f999 	bl	8001bc8 <WIZCHIP_WRITE>
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	3301      	adds	r3, #1
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80008a2:	461a      	mov	r2, r3
 80008a4:	88bb      	ldrh	r3, [r7, #4]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	4610      	mov	r0, r2
 80008ac:	f001 f98c 	bl	8001bc8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	3301      	adds	r3, #1
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80008bc:	2101      	movs	r1, #1
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 f982 	bl	8001bc8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80008c4:	bf00      	nop
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	3301      	adds	r3, #1
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 f92c 	bl	8001b30 <WIZCHIP_READ>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f3      	bne.n	80008c6 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2201      	movs	r2, #1
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	b21b      	sxth	r3, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	b21a      	sxth	r2, r3
 80008ec:	4b21      	ldr	r3, [pc, #132]	; (8000974 <socket+0x218>)
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	b21b      	sxth	r3, r3
 80008f2:	4013      	ands	r3, r2
 80008f4:	b21b      	sxth	r3, r3
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <socket+0x218>)
 80008fa:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80008fc:	78fb      	ldrb	r3, [r7, #3]
 80008fe:	f003 0201 	and.w	r2, r3, #1
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	b21a      	sxth	r2, r3
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <socket+0x218>)
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	b21b      	sxth	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b21b      	sxth	r3, r3
 8000914:	b29a      	uxth	r2, r3
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <socket+0x218>)
 8000918:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2201      	movs	r2, #1
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	b21b      	sxth	r3, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	b21a      	sxth	r2, r3
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <socket+0x21c>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	b21b      	sxth	r3, r3
 800092e:	4013      	ands	r3, r2
 8000930:	b21b      	sxth	r3, r3
 8000932:	b29a      	uxth	r2, r3
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <socket+0x21c>)
 8000936:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	4a10      	ldr	r2, [pc, #64]	; (800097c <socket+0x220>)
 800093c:	2100      	movs	r1, #0
 800093e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <socket+0x224>)
 8000946:	2100      	movs	r1, #0
 8000948:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800094a:	bf00      	nop
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	3301      	adds	r3, #1
 8000952:	00db      	lsls	r3, r3, #3
 8000954:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000958:	4618      	mov	r0, r3
 800095a:	f001 f8e9 	bl	8001b30 <WIZCHIP_READ>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0f3      	beq.n	800094c <socket+0x1f0>
   return (int8_t)sn;
 8000964:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000968:	4618      	mov	r0, r3
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	bd90      	pop	{r4, r7, pc}
 8000970:	2000001c 	.word	0x2000001c
 8000974:	200007c6 	.word	0x200007c6
 8000978:	200007c8 	.word	0x200007c8
 800097c:	200007cc 	.word	0x200007cc
 8000980:	200007dc 	.word	0x200007dc

08000984 <close>:

int8_t close(uint8_t sn)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	2b08      	cmp	r3, #8
 8000992:	d902      	bls.n	800099a <close+0x16>
 8000994:	f04f 33ff 	mov.w	r3, #4294967295
 8000998:	e055      	b.n	8000a46 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	3301      	adds	r3, #1
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80009a6:	2110      	movs	r1, #16
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 f90d 	bl	8001bc8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80009ae:	bf00      	nop
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	3301      	adds	r3, #1
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80009bc:	4618      	mov	r0, r3
 80009be:	f001 f8b7 	bl	8001b30 <WIZCHIP_READ>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1f3      	bne.n	80009b0 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	3301      	adds	r3, #1
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80009d4:	211f      	movs	r1, #31
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 f8f6 	bl	8001bc8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2201      	movs	r2, #1
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	b21b      	sxth	r3, r3
 80009e6:	43db      	mvns	r3, r3
 80009e8:	b21a      	sxth	r2, r3
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <close+0xcc>)
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	4013      	ands	r3, r2
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <close+0xcc>)
 80009f8:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2201      	movs	r2, #1
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	b21b      	sxth	r3, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	b21a      	sxth	r2, r3
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <close+0xd0>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	4013      	ands	r3, r2
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <close+0xd0>)
 8000a16:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <close+0xd4>)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <close+0xd8>)
 8000a26:	2100      	movs	r1, #0
 8000a28:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000a2a:	bf00      	nop
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	3301      	adds	r3, #1
 8000a32:	00db      	lsls	r3, r3, #3
 8000a34:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 f879 	bl	8001b30 <WIZCHIP_READ>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1f3      	bne.n	8000a2c <close+0xa8>
	return SOCK_OK;
 8000a44:	2301      	movs	r3, #1
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200007c6 	.word	0x200007c6
 8000a54:	200007c8 	.word	0x200007c8
 8000a58:	200007cc 	.word	0x200007cc
 8000a5c:	200007dc 	.word	0x200007dc

08000a60 <listen>:

int8_t listen(uint8_t sn)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b08      	cmp	r3, #8
 8000a6e:	d902      	bls.n	8000a76 <listen+0x16>
 8000a70:	f04f 33ff 	mov.w	r3, #4294967295
 8000a74:	e049      	b.n	8000b0a <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 f856 	bl	8001b30 <WIZCHIP_READ>
 8000a84:	4603      	mov	r3, r0
 8000a86:	f003 030f 	and.w	r3, r3, #15
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d002      	beq.n	8000a94 <listen+0x34>
 8000a8e:	f06f 0304 	mvn.w	r3, #4
 8000a92:	e03a      	b.n	8000b0a <listen+0xaa>
	CHECK_SOCKINIT();
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	3301      	adds	r3, #1
 8000a9a:	00db      	lsls	r3, r3, #3
 8000a9c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 f845 	bl	8001b30 <WIZCHIP_READ>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b13      	cmp	r3, #19
 8000aaa:	d002      	beq.n	8000ab2 <listen+0x52>
 8000aac:	f06f 0302 	mvn.w	r3, #2
 8000ab0:	e02b      	b.n	8000b0a <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000abe:	2102      	movs	r1, #2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 f881 	bl	8001bc8 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8000ac6:	bf00      	nop
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	3301      	adds	r3, #1
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f001 f82b 	bl	8001b30 <WIZCHIP_READ>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1f3      	bne.n	8000ac8 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000ae0:	e006      	b.n	8000af0 <listen+0x90>
   {
         close(sn);
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff4d 	bl	8000984 <close>
         return SOCKERR_SOCKCLOSED;
 8000aea:	f06f 0303 	mvn.w	r3, #3
 8000aee:	e00c      	b.n	8000b0a <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	3301      	adds	r3, #1
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 f817 	bl	8001b30 <WIZCHIP_READ>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b14      	cmp	r3, #20
 8000b06:	d1ec      	bne.n	8000ae2 <listen+0x82>
   }
   return SOCK_OK;
 8000b08:	2301      	movs	r3, #1
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
 8000b20:	4613      	mov	r3, r2
 8000b22:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	2b08      	cmp	r3, #8
 8000b30:	d902      	bls.n	8000b38 <send+0x24>
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	e0de      	b.n	8000cf6 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fff5 	bl	8001b30 <WIZCHIP_READ>
 8000b46:	4603      	mov	r3, r0
 8000b48:	f003 030f 	and.w	r3, r3, #15
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d002      	beq.n	8000b56 <send+0x42>
 8000b50:	f06f 0304 	mvn.w	r3, #4
 8000b54:	e0cf      	b.n	8000cf6 <send+0x1e2>
   CHECK_SOCKDATA();
 8000b56:	88bb      	ldrh	r3, [r7, #4]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d102      	bne.n	8000b62 <send+0x4e>
 8000b5c:	f06f 030d 	mvn.w	r3, #13
 8000b60:	e0c9      	b.n	8000cf6 <send+0x1e2>
   tmp = getSn_SR(sn);
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	3301      	adds	r3, #1
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 ffde 	bl	8001b30 <WIZCHIP_READ>
 8000b74:	4603      	mov	r3, r0
 8000b76:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	2b17      	cmp	r3, #23
 8000b7c:	d005      	beq.n	8000b8a <send+0x76>
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	2b1c      	cmp	r3, #28
 8000b82:	d002      	beq.n	8000b8a <send+0x76>
 8000b84:	f06f 0306 	mvn.w	r3, #6
 8000b88:	e0b5      	b.n	8000cf6 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8000b8a:	4b5d      	ldr	r3, [pc, #372]	; (8000d00 <send+0x1ec>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	fa42 f303 	asr.w	r3, r2, r3
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d039      	beq.n	8000c12 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 ffc0 	bl	8001b30 <WIZCHIP_READ>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	f003 031f 	and.w	r3, r3, #31
 8000bb6:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d019      	beq.n	8000bf6 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bce:	2110      	movs	r1, #16
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 fff9 	bl	8001bc8 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2201      	movs	r2, #1
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	4b46      	ldr	r3, [pc, #280]	; (8000d00 <send+0x1ec>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	4013      	ands	r3, r2
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	4b43      	ldr	r3, [pc, #268]	; (8000d00 <send+0x1ec>)
 8000bf2:	801a      	strh	r2, [r3, #0]
 8000bf4:	e00d      	b.n	8000c12 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	f003 0308 	and.w	r3, r3, #8
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d006      	beq.n	8000c0e <send+0xfa>
      {
         close(sn);
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff febe 	bl	8000984 <close>
         return SOCKERR_TIMEOUT;
 8000c08:	f06f 030c 	mvn.w	r3, #12
 8000c0c:	e073      	b.n	8000cf6 <send+0x1e2>
      }
      else return SOCK_BUSY;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e071      	b.n	8000cf6 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	3301      	adds	r3, #1
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 ff86 	bl	8001b30 <WIZCHIP_READ>
 8000c24:	4603      	mov	r3, r0
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	029b      	lsls	r3, r3, #10
 8000c2a:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000c2c:	88ba      	ldrh	r2, [r7, #4]
 8000c2e:	89bb      	ldrh	r3, [r7, #12]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d901      	bls.n	8000c38 <send+0x124>
 8000c34:	89bb      	ldrh	r3, [r7, #12]
 8000c36:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 f8d2 	bl	8001de4 <getSn_TX_FSR>
 8000c40:	4603      	mov	r3, r0
 8000c42:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	3301      	adds	r3, #1
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 ff6d 	bl	8001b30 <WIZCHIP_READ>
 8000c56:	4603      	mov	r3, r0
 8000c58:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	2b17      	cmp	r3, #23
 8000c5e:	d009      	beq.n	8000c74 <send+0x160>
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	2b1c      	cmp	r3, #28
 8000c64:	d006      	beq.n	8000c74 <send+0x160>
      {
         close(sn);
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fe8b 	bl	8000984 <close>
         return SOCKERR_SOCKSTATUS;
 8000c6e:	f06f 0306 	mvn.w	r3, #6
 8000c72:	e040      	b.n	8000cf6 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000c74:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <send+0x1f0>)
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	fa42 f303 	asr.w	r3, r2, r3
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d005      	beq.n	8000c94 <send+0x180>
 8000c88:	88ba      	ldrh	r2, [r7, #4]
 8000c8a:	89bb      	ldrh	r3, [r7, #12]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d901      	bls.n	8000c94 <send+0x180>
 8000c90:	2300      	movs	r3, #0
 8000c92:	e030      	b.n	8000cf6 <send+0x1e2>
      if(len <= freesize) break;
 8000c94:	88ba      	ldrh	r2, [r7, #4]
 8000c96:	89bb      	ldrh	r3, [r7, #12]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d900      	bls.n	8000c9e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8000c9c:	e7cc      	b.n	8000c38 <send+0x124>
      if(len <= freesize) break;
 8000c9e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8000ca0:	88ba      	ldrh	r2, [r7, #4]
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	6839      	ldr	r1, [r7, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 f932 	bl	8001f10 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000cb8:	2120      	movs	r1, #32
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 ff84 	bl	8001bc8 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8000cc0:	bf00      	nop
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 ff2e 	bl	8001b30 <WIZCHIP_READ>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1f3      	bne.n	8000cc2 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	b21a      	sxth	r2, r3
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <send+0x1ec>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	b21b      	sxth	r3, r3
 8000cea:	4313      	orrs	r3, r2
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <send+0x1ec>)
 8000cf2:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8000cf4:	88bb      	ldrh	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200007c8 	.word	0x200007c8
 8000d04:	200007c6 	.word	0x200007c6

08000d08 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
 8000d14:	4613      	mov	r3, r2
 8000d16:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	2b08      	cmp	r3, #8
 8000d24:	d902      	bls.n	8000d2c <recv+0x24>
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	e09c      	b.n	8000e66 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	3301      	adds	r3, #1
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 fefb 	bl	8001b30 <WIZCHIP_READ>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	f003 030f 	and.w	r3, r3, #15
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d002      	beq.n	8000d4a <recv+0x42>
 8000d44:	f06f 0304 	mvn.w	r3, #4
 8000d48:	e08d      	b.n	8000e66 <recv+0x15e>
   CHECK_SOCKDATA();
 8000d4a:	88bb      	ldrh	r3, [r7, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <recv+0x4e>
 8000d50:	f06f 030d 	mvn.w	r3, #13
 8000d54:	e087      	b.n	8000e66 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 fee4 	bl	8001b30 <WIZCHIP_READ>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	029b      	lsls	r3, r3, #10
 8000d6e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8000d70:	89ba      	ldrh	r2, [r7, #12]
 8000d72:	88bb      	ldrh	r3, [r7, #4]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d201      	bcs.n	8000d7c <recv+0x74>
 8000d78:	89bb      	ldrh	r3, [r7, #12]
 8000d7a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 f87b 	bl	8001e7a <getSn_RX_RSR>
 8000d84:	4603      	mov	r3, r0
 8000d86:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 fecb 	bl	8001b30 <WIZCHIP_READ>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	2b17      	cmp	r3, #23
 8000da2:	d026      	beq.n	8000df2 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	2b1c      	cmp	r3, #28
 8000da8:	d11c      	bne.n	8000de4 <recv+0xdc>
            {
               if(recvsize != 0) break;
 8000daa:	89bb      	ldrh	r3, [r7, #12]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d133      	bne.n	8000e18 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 f816 	bl	8001de4 <getSn_TX_FSR>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461c      	mov	r4, r3
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 feb1 	bl	8001b30 <WIZCHIP_READ>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	029b      	lsls	r3, r3, #10
 8000dd2:	429c      	cmp	r4, r3
 8000dd4:	d10d      	bne.n	8000df2 <recv+0xea>
               {
                  close(sn);
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fdd3 	bl	8000984 <close>
                  return SOCKERR_SOCKSTATUS;
 8000dde:	f06f 0306 	mvn.w	r3, #6
 8000de2:	e040      	b.n	8000e66 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fdcc 	bl	8000984 <close>
               return SOCKERR_SOCKSTATUS;
 8000dec:	f06f 0306 	mvn.w	r3, #6
 8000df0:	e039      	b.n	8000e66 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <recv+0x168>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	fa42 f303 	asr.w	r3, r2, r3
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d004      	beq.n	8000e10 <recv+0x108>
 8000e06:	89bb      	ldrh	r3, [r7, #12]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d101      	bne.n	8000e10 <recv+0x108>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e02a      	b.n	8000e66 <recv+0x15e>
         if(recvsize != 0) break;
 8000e10:	89bb      	ldrh	r3, [r7, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d102      	bne.n	8000e1c <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8000e16:	e7b1      	b.n	8000d7c <recv+0x74>
               if(recvsize != 0) break;
 8000e18:	bf00      	nop
 8000e1a:	e000      	b.n	8000e1e <recv+0x116>
         if(recvsize != 0) break;
 8000e1c:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8000e1e:	89ba      	ldrh	r2, [r7, #12]
 8000e20:	88bb      	ldrh	r3, [r7, #4]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d201      	bcs.n	8000e2a <recv+0x122>
 8000e26:	89bb      	ldrh	r3, [r7, #12]
 8000e28:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8000e2a:	88ba      	ldrh	r2, [r7, #4]
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	6839      	ldr	r1, [r7, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f001 f8c9 	bl	8001fc8 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e42:	2140      	movs	r1, #64	; 0x40
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 febf 	bl	8001bc8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000e4a:	bf00      	nop
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	3301      	adds	r3, #1
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 fe69 	bl	8001b30 <WIZCHIP_READ>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1f3      	bne.n	8000e4c <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8000e64:	88bb      	ldrh	r3, [r7, #4]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd90      	pop	{r4, r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200007c6 	.word	0x200007c6

08000e74 <wizchip_select>:
#include "wizchip_conf.h"
#include "stdio.h"

extern SPI_HandleTypeDef hspi1;

void wizchip_select(void){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <wizchip_select+0x14>)
 8000e7e:	f001 fc13 	bl	80026a8 <HAL_GPIO_WritePin>
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40010800 	.word	0x40010800

08000e8c <wizchip_deselect>:

void wizchip_deselect(void){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2102      	movs	r1, #2
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <wizchip_deselect+0x14>)
 8000e96:	f001 fc07 	bl	80026a8 <HAL_GPIO_WritePin>
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40010800 	.word	0x40010800

08000ea4 <wizchip_read>:
// Single byte read function
uint8_t wizchip_read(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
    uint8_t rbuf;
    HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 8000eaa:	1df9      	adds	r1, r7, #7
 8000eac:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <wizchip_read+0x20>)
 8000eb4:	f002 f9f5 	bl	80032a2 <HAL_SPI_Receive>
    return rbuf;
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000364 	.word	0x20000364

08000ec8 <wizchip_write>:

// Single byte write function
void wizchip_write(uint8_t b) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 8000ed2:	1df9      	adds	r1, r7, #7
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed8:	2201      	movs	r2, #1
 8000eda:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <wizchip_write+0x20>)
 8000edc:	f002 f89e 	bl	800301c <HAL_SPI_Transmit>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000364 	.word	0x20000364

08000eec <wizchip_read_burst>:

// Read burst function
void wizchip_read_burst(uint8_t* pBuf, uint16_t len) {
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < len; i++) {
 8000ef8:	2300      	movs	r3, #0
 8000efa:	81fb      	strh	r3, [r7, #14]
 8000efc:	e009      	b.n	8000f12 <wizchip_read_burst+0x26>
        pBuf[i] = wizchip_read();
 8000efe:	89fb      	ldrh	r3, [r7, #14]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	18d4      	adds	r4, r2, r3
 8000f04:	f7ff ffce 	bl	8000ea4 <wizchip_read>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < len; i++) {
 8000f0c:	89fb      	ldrh	r3, [r7, #14]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	81fb      	strh	r3, [r7, #14]
 8000f12:	89fa      	ldrh	r2, [r7, #14]
 8000f14:	887b      	ldrh	r3, [r7, #2]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d3f1      	bcc.n	8000efe <wizchip_read_burst+0x12>
    }
}
 8000f1a:	bf00      	nop
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd90      	pop	{r4, r7, pc}

08000f24 <wizchip_write_burst>:

// Write burst function
void wizchip_write_burst(uint8_t* pBuf, uint16_t len) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < len; i++) {
 8000f30:	2300      	movs	r3, #0
 8000f32:	81fb      	strh	r3, [r7, #14]
 8000f34:	e009      	b.n	8000f4a <wizchip_write_burst+0x26>
        wizchip_write(pBuf[i]);
 8000f36:	89fb      	ldrh	r3, [r7, #14]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ffc2 	bl	8000ec8 <wizchip_write>
    for (uint16_t i = 0; i < len; i++) {
 8000f44:	89fb      	ldrh	r3, [r7, #14]
 8000f46:	3301      	adds	r3, #1
 8000f48:	81fb      	strh	r3, [r7, #14]
 8000f4a:	89fa      	ldrh	r2, [r7, #14]
 8000f4c:	887b      	ldrh	r3, [r7, #2]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d3f1      	bcc.n	8000f36 <wizchip_write_burst+0x12>
    }
}
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <W5500Init>:

void W5500Init(){
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af00      	add	r7, sp, #0
	uint8_t tmp;
	uint8_t memsize[2][8]={{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8000f62:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <W5500Init+0x74>)
 8000f64:	1d3c      	adds	r4, r7, #4
 8000f66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);//Chip Select high by default
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2102      	movs	r1, #2
 8000f70:	4818      	ldr	r0, [pc, #96]	; (8000fd4 <W5500Init+0x78>)
 8000f72:	f001 fb99 	bl	80026a8 <HAL_GPIO_WritePin>

	//send pulse on reset pin
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2101      	movs	r1, #1
 8000f7a:	4816      	ldr	r0, [pc, #88]	; (8000fd4 <W5500Init+0x78>)
 8000f7c:	f001 fb94 	bl	80026a8 <HAL_GPIO_WritePin>
	tmp=0xff;
 8000f80:	23ff      	movs	r3, #255	; 0xff
 8000f82:	75fb      	strb	r3, [r7, #23]
	while(tmp--);//small delay
 8000f84:	bf00      	nop
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
 8000f88:	1e5a      	subs	r2, r3, #1
 8000f8a:	75fa      	strb	r2, [r7, #23]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1fa      	bne.n	8000f86 <W5500Init+0x2a>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2101      	movs	r1, #1
 8000f94:	480f      	ldr	r0, [pc, #60]	; (8000fd4 <W5500Init+0x78>)
 8000f96:	f001 fb87 	bl	80026a8 <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8000f9a:	490f      	ldr	r1, [pc, #60]	; (8000fd8 <W5500Init+0x7c>)
 8000f9c:	480f      	ldr	r0, [pc, #60]	; (8000fdc <W5500Init+0x80>)
 8000f9e:	f000 f881 	bl	80010a4 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8000fa2:	490f      	ldr	r1, [pc, #60]	; (8000fe0 <W5500Init+0x84>)
 8000fa4:	480f      	ldr	r0, [pc, #60]	; (8000fe4 <W5500Init+0x88>)
 8000fa6:	f000 f8a1 	bl	80010ec <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_read_burst, wizchip_write_burst);
 8000faa:	490f      	ldr	r1, [pc, #60]	; (8000fe8 <W5500Init+0x8c>)
 8000fac:	480f      	ldr	r0, [pc, #60]	; (8000fec <W5500Init+0x90>)
 8000fae:	f000 f8c9 	bl	8001144 <reg_wizchip_spiburst_cbfunc>

	if(ctlwizchip(CW_INIT_WIZCHIP, (void*)memsize)==-1){
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f000 f8f0 	bl	800119c <ctlwizchip>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc2:	d100      	bne.n	8000fc6 <W5500Init+0x6a>
//		printf("wizchip Initialization failed\r\n");
		while(1);
 8000fc4:	e7fe      	b.n	8000fc4 <W5500Init+0x68>
	}
//	printf("wizchip initialization success\r\n");

}
 8000fc6:	bf00      	nop
 8000fc8:	371c      	adds	r7, #28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd90      	pop	{r4, r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	080050d0 	.word	0x080050d0
 8000fd4:	40010800 	.word	0x40010800
 8000fd8:	08000e8d 	.word	0x08000e8d
 8000fdc:	08000e75 	.word	0x08000e75
 8000fe0:	08000ec9 	.word	0x08000ec9
 8000fe4:	08000ea5 	.word	0x08000ea5
 8000fe8:	08000f25 	.word	0x08000f25
 8000fec:	08000eed 	.word	0x08000eed

08000ff0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	78fa      	ldrb	r2, [r7, #3]
 8001048:	701a      	strb	r2, [r3, #0]
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
 8001058:	2300      	movs	r3, #0
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr

08001062 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	460b      	mov	r3, r1
 8001080:	807b      	strh	r3, [r7, #2]
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
	...

080010a4 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <reg_wizchip_cs_cbfunc+0x16>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d106      	bne.n	80010c8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <reg_wizchip_cs_cbfunc+0x3c>)
 80010bc:	4a09      	ldr	r2, [pc, #36]	; (80010e4 <reg_wizchip_cs_cbfunc+0x40>)
 80010be:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <reg_wizchip_cs_cbfunc+0x3c>)
 80010c2:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <reg_wizchip_cs_cbfunc+0x44>)
 80010c4:	619a      	str	r2, [r3, #24]
 80010c6:	e006      	b.n	80010d6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80010c8:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <reg_wizchip_cs_cbfunc+0x3c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80010ce:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <reg_wizchip_cs_cbfunc+0x3c>)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	6193      	str	r3, [r2, #24]
   }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	20000020 	.word	0x20000020
 80010e4:	08001009 	.word	0x08001009
 80010e8:	08001015 	.word	0x08001015

080010ec <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80010f6:	bf00      	nop
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <reg_wizchip_spi_cbfunc+0x4c>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f9      	beq.n	80010f8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d002      	beq.n	8001110 <reg_wizchip_spi_cbfunc+0x24>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d106      	bne.n	800111e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <reg_wizchip_spi_cbfunc+0x4c>)
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <reg_wizchip_spi_cbfunc+0x50>)
 8001114:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <reg_wizchip_spi_cbfunc+0x4c>)
 8001118:	4a09      	ldr	r2, [pc, #36]	; (8001140 <reg_wizchip_spi_cbfunc+0x54>)
 800111a:	621a      	str	r2, [r3, #32]
 800111c:	e006      	b.n	800112c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800111e:	4a06      	ldr	r2, [pc, #24]	; (8001138 <reg_wizchip_spi_cbfunc+0x4c>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <reg_wizchip_spi_cbfunc+0x4c>)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	6213      	str	r3, [r2, #32]
   }
}
 800112a:	bf00      	nop
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000020 	.word	0x20000020
 800113c:	08001055 	.word	0x08001055
 8001140:	08001063 	.word	0x08001063

08001144 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800114e:	bf00      	nop
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f9      	beq.n	8001150 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <reg_wizchip_spiburst_cbfunc+0x24>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d106      	bne.n	8001176 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <reg_wizchip_spiburst_cbfunc+0x50>)
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001170:	4a09      	ldr	r2, [pc, #36]	; (8001198 <reg_wizchip_spiburst_cbfunc+0x54>)
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
 8001174:	e006      	b.n	8001184 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8001176:	4a06      	ldr	r2, [pc, #24]	; (8001190 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8001182:	bf00      	nop
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000020 	.word	0x20000020
 8001194:	08001077 	.word	0x08001077
 8001198:	0800108d 	.word	0x0800108d

0800119c <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	2b0f      	cmp	r3, #15
 80011b8:	f200 80c7 	bhi.w	800134a <ctlwizchip+0x1ae>
 80011bc:	a201      	add	r2, pc, #4	; (adr r2, 80011c4 <ctlwizchip+0x28>)
 80011be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c2:	bf00      	nop
 80011c4:	08001205 	.word	0x08001205
 80011c8:	0800120b 	.word	0x0800120b
 80011cc:	08001237 	.word	0x08001237
 80011d0:	0800122b 	.word	0x0800122b
 80011d4:	08001245 	.word	0x08001245
 80011d8:	08001251 	.word	0x08001251
 80011dc:	0800125f 	.word	0x0800125f
 80011e0:	08001285 	.word	0x08001285
 80011e4:	080012ab 	.word	0x080012ab
 80011e8:	080012ef 	.word	0x080012ef
 80011ec:	080012f5 	.word	0x080012f5
 80011f0:	080012fd 	.word	0x080012fd
 80011f4:	08001351 	.word	0x08001351
 80011f8:	08001305 	.word	0x08001305
 80011fc:	08001313 	.word	0x08001313
 8001200:	0800132f 	.word	0x0800132f
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8001204:	f000 f8ea 	bl	80013dc <wizchip_sw_reset>
         break;
 8001208:	e0a3      	b.n	8001352 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d004      	beq.n	800121a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3308      	adds	r3, #8
 8001218:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f927 	bl	8001474 <wizchip_init>
 8001226:	4603      	mov	r3, r0
 8001228:	e094      	b.n	8001354 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f9ac 	bl	800158c <wizchip_clrinterrupt>
         break;
 8001234:	e08d      	b.n	8001352 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8001236:	f000 f9dd 	bl	80015f4 <wizchip_getinterrupt>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	801a      	strh	r2, [r3, #0]
         break;
 8001242:	e086      	b.n	8001352 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f000 f9f8 	bl	800163e <wizchip_setinterruptmask>
         break;         
 800124e:	e080      	b.n	8001352 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8001250:	f000 fa10 	bl	8001674 <wizchip_getinterruptmask>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	801a      	strh	r2, [r3, #0]
         break;
 800125c:	e079      	b.n	8001352 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	0a1b      	lsrs	r3, r3, #8
 8001264:	b29b      	uxth	r3, r3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	4619      	mov	r1, r3
 800126a:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800126e:	f000 fcab 	bl	8001bc8 <WIZCHIP_WRITE>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	4619      	mov	r1, r3
 800127a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800127e:	f000 fca3 	bl	8001bc8 <WIZCHIP_WRITE>
         break;
 8001282:	e066      	b.n	8001352 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8001284:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8001288:	f000 fc52 	bl	8001b30 <WIZCHIP_READ>
 800128c:	4603      	mov	r3, r0
 800128e:	b29b      	uxth	r3, r3
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	b29c      	uxth	r4, r3
 8001294:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001298:	f000 fc4a 	bl	8001b30 <WIZCHIP_READ>
 800129c:	4603      	mov	r3, r0
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4423      	add	r3, r4
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	801a      	strh	r2, [r3, #0]
         break;
 80012a8:	e053      	b.n	8001352 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <ctlwizchip+0x1c0>)
 80012ac:	789a      	ldrb	r2, [r3, #2]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	4a29      	ldr	r2, [pc, #164]	; (800135c <ctlwizchip+0x1c0>)
 80012b8:	78d2      	ldrb	r2, [r2, #3]
 80012ba:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	3302      	adds	r3, #2
 80012c0:	4a26      	ldr	r2, [pc, #152]	; (800135c <ctlwizchip+0x1c0>)
 80012c2:	7912      	ldrb	r2, [r2, #4]
 80012c4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	3303      	adds	r3, #3
 80012ca:	4a24      	ldr	r2, [pc, #144]	; (800135c <ctlwizchip+0x1c0>)
 80012cc:	7952      	ldrb	r2, [r2, #5]
 80012ce:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	3304      	adds	r3, #4
 80012d4:	4a21      	ldr	r2, [pc, #132]	; (800135c <ctlwizchip+0x1c0>)
 80012d6:	7992      	ldrb	r2, [r2, #6]
 80012d8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	3305      	adds	r3, #5
 80012de:	4a1f      	ldr	r2, [pc, #124]	; (800135c <ctlwizchip+0x1c0>)
 80012e0:	79d2      	ldrb	r2, [r2, #7]
 80012e2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	3306      	adds	r3, #6
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
         break;
 80012ec:	e031      	b.n	8001352 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80012ee:	f000 fa13 	bl	8001718 <wizphy_reset>
         break;
 80012f2:	e02e      	b.n	8001352 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80012f4:	6838      	ldr	r0, [r7, #0]
 80012f6:	f000 fa36 	bl	8001766 <wizphy_setphyconf>
         break;
 80012fa:	e02a      	b.n	8001352 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80012fc:	6838      	ldr	r0, [r7, #0]
 80012fe:	f000 fa75 	bl	80017ec <wizphy_getphyconf>
         break;
 8001302:	e026      	b.n	8001352 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f000 fad9 	bl	80018c0 <wizphy_setphypmode>
 800130e:	4603      	mov	r3, r0
 8001310:	e020      	b.n	8001354 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8001312:	f000 f9e8 	bl	80016e6 <wizphy_getphypmode>
 8001316:	4603      	mov	r3, r0
 8001318:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800131a:	7dfb      	ldrb	r3, [r7, #23]
 800131c:	2bff      	cmp	r3, #255	; 0xff
 800131e:	d102      	bne.n	8001326 <ctlwizchip+0x18a>
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	e016      	b.n	8001354 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	7dfa      	ldrb	r2, [r7, #23]
 800132a:	701a      	strb	r2, [r3, #0]
         break;
 800132c:	e011      	b.n	8001352 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 800132e:	f000 f9c4 	bl	80016ba <wizphy_getphylink>
 8001332:	4603      	mov	r3, r0
 8001334:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8001336:	7dfb      	ldrb	r3, [r7, #23]
 8001338:	2bff      	cmp	r3, #255	; 0xff
 800133a:	d102      	bne.n	8001342 <ctlwizchip+0x1a6>
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
 8001340:	e008      	b.n	8001354 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	7dfa      	ldrb	r2, [r7, #23]
 8001346:	701a      	strb	r2, [r3, #0]
         break;
 8001348:	e003      	b.n	8001352 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	e001      	b.n	8001354 <ctlwizchip+0x1b8>
         break;
 8001350:	bf00      	nop
   }
   return 0;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	371c      	adds	r7, #28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd90      	pop	{r4, r7, pc}
 800135c:	20000020 	.word	0x20000020

08001360 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	2b05      	cmp	r3, #5
 8001370:	d82c      	bhi.n	80013cc <ctlnetwork+0x6c>
 8001372:	a201      	add	r2, pc, #4	; (adr r2, 8001378 <ctlnetwork+0x18>)
 8001374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001378:	08001391 	.word	0x08001391
 800137c:	08001399 	.word	0x08001399
 8001380:	080013a1 	.word	0x080013a1
 8001384:	080013af 	.word	0x080013af
 8001388:	080013bd 	.word	0x080013bd
 800138c:	080013c5 	.word	0x080013c5
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8001390:	6838      	ldr	r0, [r7, #0]
 8001392:	f000 fadf 	bl	8001954 <wizchip_setnetinfo>
         break;
 8001396:	e01c      	b.n	80013d2 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8001398:	6838      	ldr	r0, [r7, #0]
 800139a:	f000 fb1b 	bl	80019d4 <wizchip_getnetinfo>
         break;
 800139e:	e018      	b.n	80013d2 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 fb55 	bl	8001a54 <wizchip_setnetmode>
 80013aa:	4603      	mov	r3, r0
 80013ac:	e012      	b.n	80013d4 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80013ae:	f000 fb73 	bl	8001a98 <wizchip_getnetmode>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	701a      	strb	r2, [r3, #0]
         break;
 80013ba:	e00a      	b.n	80013d2 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 80013bc:	6838      	ldr	r0, [r7, #0]
 80013be:	f000 fb73 	bl	8001aa8 <wizchip_settimeout>
         break;
 80013c2:	e006      	b.n	80013d2 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80013c4:	6838      	ldr	r0, [r7, #0]
 80013c6:	f000 fb90 	bl	8001aea <wizchip_gettimeout>
         break;
 80013ca:	e002      	b.n	80013d2 <ctlnetwork+0x72>
      default:
         return -1;
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
 80013d0:	e000      	b.n	80013d4 <ctlnetwork+0x74>
   }
   return 0;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2206      	movs	r2, #6
 80013e6:	4619      	mov	r1, r3
 80013e8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80013ec:	f000 fc3a 	bl	8001c64 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	2204      	movs	r2, #4
 80013f6:	4619      	mov	r1, r3
 80013f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013fc:	f000 fc32 	bl	8001c64 <WIZCHIP_READ_BUF>
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	2204      	movs	r2, #4
 8001406:	4619      	mov	r1, r3
 8001408:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800140c:	f000 fc2a 	bl	8001c64 <WIZCHIP_READ_BUF>
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	2204      	movs	r2, #4
 8001416:	4619      	mov	r1, r3
 8001418:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800141c:	f000 fc22 	bl	8001c64 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	2000      	movs	r0, #0
 8001424:	f000 fbd0 	bl	8001bc8 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001428:	2000      	movs	r0, #0
 800142a:	f000 fb81 	bl	8001b30 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2206      	movs	r2, #6
 8001432:	4619      	mov	r1, r3
 8001434:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001438:	f000 fc74 	bl	8001d24 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2204      	movs	r2, #4
 8001442:	4619      	mov	r1, r3
 8001444:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001448:	f000 fc6c 	bl	8001d24 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	2204      	movs	r2, #4
 8001452:	4619      	mov	r1, r3
 8001454:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001458:	f000 fc64 	bl	8001d24 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	2204      	movs	r2, #4
 8001462:	4619      	mov	r1, r3
 8001464:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001468:	f000 fc5c 	bl	8001d24 <WIZCHIP_WRITE_BUF>
}
 800146c:	bf00      	nop
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001482:	f7ff ffab 	bl	80013dc <wizchip_sw_reset>
   if(txsize)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d03b      	beq.n	8001504 <wizchip_init+0x90>
   {
      tmp = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001490:	2300      	movs	r3, #0
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	e015      	b.n	80014c2 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	7bbb      	ldrb	r3, [r7, #14]
 80014a2:	4413      	add	r3, r2
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80014a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014ac:	2b10      	cmp	r3, #16
 80014ae:	dd02      	ble.n	80014b6 <wizchip_init+0x42>
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
 80014b4:	e066      	b.n	8001584 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	3301      	adds	r3, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c6:	2b07      	cmp	r3, #7
 80014c8:	dde5      	ble.n	8001496 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	e015      	b.n	80014fc <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80014d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	3301      	adds	r3, #1
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80014de:	4618      	mov	r0, r3
 80014e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4619      	mov	r1, r3
 80014ec:	f000 fb6c 	bl	8001bc8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80014f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	3301      	adds	r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001500:	2b07      	cmp	r3, #7
 8001502:	dde5      	ble.n	80014d0 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d03b      	beq.n	8001582 <wizchip_init+0x10e>
   {
      tmp = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]
 8001512:	e015      	b.n	8001540 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8001514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	4413      	add	r3, r2
 800151c:	781a      	ldrb	r2, [r3, #0]
 800151e:	7bbb      	ldrb	r3, [r7, #14]
 8001520:	4413      	add	r3, r2
 8001522:	b2db      	uxtb	r3, r3
 8001524:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8001526:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800152a:	2b10      	cmp	r3, #16
 800152c:	dd02      	ble.n	8001534 <wizchip_init+0xc0>
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	e027      	b.n	8001584 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	3301      	adds	r3, #1
 800153c:	b2db      	uxtb	r3, r3
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001544:	2b07      	cmp	r3, #7
 8001546:	dde5      	ble.n	8001514 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	e015      	b.n	800157a <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800154e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	3301      	adds	r3, #1
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800155c:	4618      	mov	r0, r3
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	4413      	add	r3, r2
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f000 fb2d 	bl	8001bc8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800156e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	3301      	adds	r3, #1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	73fb      	strb	r3, [r7, #15]
 800157a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157e:	2b07      	cmp	r3, #7
 8001580:	dde5      	ble.n	800154e <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	b29b      	uxth	r3, r3
 80015a0:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	f023 030f 	bic.w	r3, r3, #15
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	4619      	mov	r1, r3
 80015ac:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80015b0:	f000 fb0a 	bl	8001bc8 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	e014      	b.n	80015e4 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 80015ba:	7bba      	ldrb	r2, [r7, #14]
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	fa42 f303 	asr.w	r3, r2, r3
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d009      	beq.n	80015de <wizchip_clrinterrupt+0x52>
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	3301      	adds	r3, #1
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015d6:	211f      	movs	r1, #31
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 faf5 	bl	8001bc8 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	3301      	adds	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	2b07      	cmp	r3, #7
 80015e8:	d9e7      	bls.n	80015ba <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80015ea:	bf00      	nop
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8001606:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800160a:	f000 fa91 	bl	8001b30 <WIZCHIP_READ>
 800160e:	4603      	mov	r3, r0
 8001610:	f023 030f 	bic.w	r3, r3, #15
 8001614:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8001616:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 800161a:	f000 fa89 	bl	8001b30 <WIZCHIP_READ>
 800161e:	4603      	mov	r3, r0
 8001620:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8001622:	79bb      	ldrb	r3, [r7, #6]
 8001624:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8001626:	88bb      	ldrh	r3, [r7, #4]
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	b29a      	uxth	r2, r3
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	b29b      	uxth	r3, r3
 8001630:	4413      	add	r3, r2
 8001632:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001634:	88bb      	ldrh	r3, [r7, #4]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	b29b      	uxth	r3, r3
 8001652:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	4619      	mov	r1, r3
 8001658:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800165c:	f000 fab4 	bl	8001bc8 <WIZCHIP_WRITE>
   setSIMR(simr);
 8001660:	7bbb      	ldrb	r3, [r7, #14]
 8001662:	4619      	mov	r1, r3
 8001664:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001668:	f000 faae 	bl	8001bc8 <WIZCHIP_WRITE>
#endif   
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8001686:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800168a:	f000 fa51 	bl	8001b30 <WIZCHIP_READ>
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8001692:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001696:	f000 fa4b 	bl	8001b30 <WIZCHIP_READ>
 800169a:	4603      	mov	r3, r0
 800169c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800169e:	79bb      	ldrb	r3, [r7, #6]
 80016a0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80016a2:	88bb      	ldrh	r3, [r7, #4]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	4413      	add	r3, r2
 80016ae:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80016b0:	88bb      	ldrh	r3, [r7, #4]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80016c0:	2300      	movs	r3, #0
 80016c2:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80016c4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80016c8:	f000 fa32 	bl	8001b30 <WIZCHIP_READ>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80016d6:	2301      	movs	r3, #1
 80016d8:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80016f0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80016f4:	f000 fa1c 	bl	8001b30 <WIZCHIP_READ>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016fe:	2b30      	cmp	r3, #48	; 0x30
 8001700:	d102      	bne.n	8001708 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8001702:	2301      	movs	r3, #1
 8001704:	71fb      	strb	r3, [r7, #7]
 8001706:	e001      	b.n	800170c <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8001708:	2300      	movs	r3, #0
 800170a:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 800171e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001722:	f000 fa05 	bl	8001b30 <WIZCHIP_READ>
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001730:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800173a:	f000 fa45 	bl	8001bc8 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800173e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001742:	f000 f9f5 	bl	8001b30 <WIZCHIP_READ>
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001750:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	4619      	mov	r1, r3
 8001756:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800175a:	f000 fa35 	bl	8001bc8 <WIZCHIP_WRITE>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d104      	bne.n	8001784 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001780:	73fb      	strb	r3, [r7, #15]
 8001782:	e003      	b.n	800178c <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800178a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	785b      	ldrb	r3, [r3, #1]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d104      	bne.n	800179e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800179a:	73fb      	strb	r3, [r7, #15]
 800179c:	e019      	b.n	80017d2 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	78db      	ldrb	r3, [r3, #3]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d10d      	bne.n	80017c2 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	789b      	ldrb	r3, [r3, #2]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d104      	bne.n	80017b8 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	f043 0318 	orr.w	r3, r3, #24
 80017b4:	73fb      	strb	r3, [r7, #15]
 80017b6:	e00c      	b.n	80017d2 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	f043 0308 	orr.w	r3, r3, #8
 80017be:	73fb      	strb	r3, [r7, #15]
 80017c0:	e007      	b.n	80017d2 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	789b      	ldrb	r3, [r3, #2]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d103      	bne.n	80017d2 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	f043 0310 	orr.w	r3, r3, #16
 80017d0:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80017da:	f000 f9f5 	bl	8001bc8 <WIZCHIP_WRITE>
   wizphy_reset();
 80017de:	f7ff ff9b 	bl	8001718 <wizphy_reset>
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80017f8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80017fc:	f000 f998 	bl	8001b30 <WIZCHIP_READ>
 8001800:	4603      	mov	r3, r0
 8001802:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	119b      	asrs	r3, r3, #6
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	b2da      	uxtb	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800181a:	2b20      	cmp	r3, #32
 800181c:	d001      	beq.n	8001822 <wizphy_getphyconf+0x36>
 800181e:	2b38      	cmp	r3, #56	; 0x38
 8001820:	d103      	bne.n	800182a <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	705a      	strb	r2, [r3, #1]
         break;
 8001828:	e003      	b.n	8001832 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	705a      	strb	r2, [r3, #1]
         break;
 8001830:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001838:	3b10      	subs	r3, #16
 800183a:	2b10      	cmp	r3, #16
 800183c:	bf8c      	ite	hi
 800183e:	2201      	movhi	r2, #1
 8001840:	2200      	movls	r2, #0
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	2a00      	cmp	r2, #0
 8001846:	d10f      	bne.n	8001868 <wizphy_getphyconf+0x7c>
 8001848:	4a1b      	ldr	r2, [pc, #108]	; (80018b8 <wizphy_getphyconf+0xcc>)
 800184a:	fa22 f303 	lsr.w	r3, r2, r3
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	bf14      	ite	ne
 8001856:	2301      	movne	r3, #1
 8001858:	2300      	moveq	r3, #0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	709a      	strb	r2, [r3, #2]
         break;
 8001866:	e003      	b.n	8001870 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	709a      	strb	r2, [r3, #2]
         break;
 800186e:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001876:	3b08      	subs	r3, #8
 8001878:	2b18      	cmp	r3, #24
 800187a:	bf8c      	ite	hi
 800187c:	2201      	movhi	r2, #1
 800187e:	2200      	movls	r2, #0
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	2a00      	cmp	r2, #0
 8001884:	d10f      	bne.n	80018a6 <wizphy_getphyconf+0xba>
 8001886:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <wizphy_getphyconf+0xd0>)
 8001888:	fa22 f303 	lsr.w	r3, r2, r3
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf14      	ite	ne
 8001894:	2301      	movne	r3, #1
 8001896:	2300      	moveq	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	70da      	strb	r2, [r3, #3]
         break;
 80018a4:	e003      	b.n	80018ae <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	70da      	strb	r2, [r3, #3]
         break;
 80018ac:	bf00      	nop
   }
}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	00010101 	.word	0x00010101
 80018bc:	01010001 	.word	0x01010001

080018c0 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80018ce:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80018d2:	f000 f92d 	bl	8001b30 <WIZCHIP_READ>
 80018d6:	4603      	mov	r3, r0
 80018d8:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <wizphy_setphypmode+0x2a>
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
 80018e8:	e030      	b.n	800194c <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80018f0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d104      	bne.n	8001902 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	e003      	b.n	800190a <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001908:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	4619      	mov	r1, r3
 800190e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001912:	f000 f959 	bl	8001bc8 <WIZCHIP_WRITE>
   wizphy_reset();
 8001916:	f7ff feff 	bl	8001718 <wizphy_reset>
   tmp = getPHYCFGR();
 800191a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800191e:	f000 f907 	bl	8001b30 <WIZCHIP_READ>
 8001922:	4603      	mov	r3, r0
 8001924:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d106      	bne.n	800193a <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001932:	2b00      	cmp	r3, #0
 8001934:	d008      	beq.n	8001948 <wizphy_setphypmode+0x88>
 8001936:	2300      	movs	r3, #0
 8001938:	e008      	b.n	800194c <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <wizphy_setphypmode+0x88>
 8001944:	2300      	movs	r3, #0
 8001946:	e001      	b.n	800194c <wizphy_setphypmode+0x8c>
   }
   return -1;
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2206      	movs	r2, #6
 8001960:	4619      	mov	r1, r3
 8001962:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001966:	f000 f9dd 	bl	8001d24 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	330e      	adds	r3, #14
 800196e:	2204      	movs	r2, #4
 8001970:	4619      	mov	r1, r3
 8001972:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001976:	f000 f9d5 	bl	8001d24 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	330a      	adds	r3, #10
 800197e:	2204      	movs	r2, #4
 8001980:	4619      	mov	r1, r3
 8001982:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001986:	f000 f9cd 	bl	8001d24 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3306      	adds	r3, #6
 800198e:	2204      	movs	r2, #4
 8001990:	4619      	mov	r1, r3
 8001992:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001996:	f000 f9c5 	bl	8001d24 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7c9a      	ldrb	r2, [r3, #18]
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <wizchip_setnetinfo+0x78>)
 80019a0:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7cda      	ldrb	r2, [r3, #19]
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <wizchip_setnetinfo+0x78>)
 80019a8:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7d1a      	ldrb	r2, [r3, #20]
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <wizchip_setnetinfo+0x78>)
 80019b0:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7d5a      	ldrb	r2, [r3, #21]
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <wizchip_setnetinfo+0x78>)
 80019b8:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7d9a      	ldrb	r2, [r3, #22]
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <wizchip_setnetinfo+0x7c>)
 80019c0:	701a      	strb	r2, [r3, #0]
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200007e4 	.word	0x200007e4
 80019d0:	200007e8 	.word	0x200007e8

080019d4 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2206      	movs	r2, #6
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80019e6:	f000 f93d 	bl	8001c64 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	330e      	adds	r3, #14
 80019ee:	2204      	movs	r2, #4
 80019f0:	4619      	mov	r1, r3
 80019f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80019f6:	f000 f935 	bl	8001c64 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	330a      	adds	r3, #10
 80019fe:	2204      	movs	r2, #4
 8001a00:	4619      	mov	r1, r3
 8001a02:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001a06:	f000 f92d 	bl	8001c64 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3306      	adds	r3, #6
 8001a0e:	2204      	movs	r2, #4
 8001a10:	4619      	mov	r1, r3
 8001a12:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001a16:	f000 f925 	bl	8001c64 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <wizchip_getnetinfo+0x78>)
 8001a1c:	781a      	ldrb	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <wizchip_getnetinfo+0x78>)
 8001a24:	785a      	ldrb	r2, [r3, #1]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <wizchip_getnetinfo+0x78>)
 8001a2c:	789a      	ldrb	r2, [r3, #2]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <wizchip_getnetinfo+0x78>)
 8001a34:	78da      	ldrb	r2, [r3, #3]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <wizchip_getnetinfo+0x7c>)
 8001a3c:	781a      	ldrb	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	759a      	strb	r2, [r3, #22]
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200007e4 	.word	0x200007e4
 8001a50:	200007e8 	.word	0x200007e8

08001a54 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <wizchip_setnetmode+0x1e>
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a70:	e00e      	b.n	8001a90 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8001a72:	2000      	movs	r0, #0
 8001a74:	f000 f85c 	bl	8001b30 <WIZCHIP_READ>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8001a7c:	7bfa      	ldrb	r2, [r7, #15]
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	4619      	mov	r1, r3
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f000 f89d 	bl	8001bc8 <WIZCHIP_WRITE>
   return 0;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f000 f847 	bl	8001b30 <WIZCHIP_READ>
 8001aa2:	4603      	mov	r3, r0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001aba:	f000 f885 	bl	8001bc8 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	885b      	ldrh	r3, [r3, #2]
 8001ac2:	0a1b      	lsrs	r3, r3, #8
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001ace:	f000 f87b 	bl	8001bc8 <WIZCHIP_WRITE>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	885b      	ldrh	r3, [r3, #2]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001ade:	f000 f873 	bl	8001bc8 <WIZCHIP_WRITE>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8001aea:	b590      	push	{r4, r7, lr}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8001af2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001af6:	f000 f81b 	bl	8001b30 <WIZCHIP_READ>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8001b02:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001b06:	f000 f813 	bl	8001b30 <WIZCHIP_READ>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	b29c      	uxth	r4, r3
 8001b12:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001b16:	f000 f80b 	bl	8001b30 <WIZCHIP_READ>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4423      	add	r3, r4
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	805a      	strh	r2, [r3, #2]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd90      	pop	{r4, r7, pc}
	...

08001b30 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001b38:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <WIZCHIP_READ+0x94>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001b3e:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <WIZCHIP_READ+0x94>)
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001b44:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <WIZCHIP_READ+0x94>)
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <WIZCHIP_READ+0x24>
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <WIZCHIP_READ+0x94>)
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d114      	bne.n	8001b7e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <WIZCHIP_READ+0x94>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	0c12      	lsrs	r2, r2, #16
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001b62:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <WIZCHIP_READ+0x94>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	0a12      	lsrs	r2, r2, #8
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <WIZCHIP_READ+0x94>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4798      	blx	r3
 8001b7c:	e011      	b.n	8001ba2 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	0c1b      	lsrs	r3, r3, #16
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <WIZCHIP_READ+0x94>)
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	f107 020c 	add.w	r2, r7, #12
 8001b9c:	2103      	movs	r1, #3
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <WIZCHIP_READ+0x94>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4798      	blx	r3
 8001ba8:	4603      	mov	r3, r0
 8001baa:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <WIZCHIP_READ+0x94>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <WIZCHIP_READ+0x94>)
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	4798      	blx	r3
   return ret;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000020 	.word	0x20000020

08001bc8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <WIZCHIP_WRITE+0x98>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001bda:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <WIZCHIP_WRITE+0x98>)
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f043 0304 	orr.w	r3, r3, #4
 8001be6:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <WIZCHIP_WRITE+0x98>)
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d119      	bne.n	8001c24 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <WIZCHIP_WRITE+0x98>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	0c12      	lsrs	r2, r2, #16
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <WIZCHIP_WRITE+0x98>)
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	0a12      	lsrs	r2, r2, #8
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <WIZCHIP_WRITE+0x98>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	4610      	mov	r0, r2
 8001c16:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <WIZCHIP_WRITE+0x98>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	78fa      	ldrb	r2, [r7, #3]
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4798      	blx	r3
 8001c22:	e013      	b.n	8001c4c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	0c1b      	lsrs	r3, r3, #16
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	0a1b      	lsrs	r3, r3, #8
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <WIZCHIP_WRITE+0x98>)
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	f107 020c 	add.w	r2, r7, #12
 8001c46:	2104      	movs	r1, #4
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <WIZCHIP_WRITE+0x98>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001c52:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <WIZCHIP_WRITE+0x98>)
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	4798      	blx	r3
}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000020 	.word	0x20000020

08001c64 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001c72:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <WIZCHIP_READ_BUF+0xbc>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001c78:	4b29      	ldr	r3, [pc, #164]	; (8001d20 <WIZCHIP_READ_BUF+0xbc>)
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001c7e:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <WIZCHIP_READ_BUF+0xbc>)
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <WIZCHIP_READ_BUF+0x2a>
 8001c86:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <WIZCHIP_READ_BUF+0xbc>)
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d126      	bne.n	8001cdc <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001c8e:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <WIZCHIP_READ_BUF+0xbc>)
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	0c12      	lsrs	r2, r2, #16
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001c9c:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <WIZCHIP_READ_BUF+0xbc>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	0a12      	lsrs	r2, r2, #8
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <WIZCHIP_READ_BUF+0xbc>)
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	82fb      	strh	r3, [r7, #22]
 8001cba:	e00a      	b.n	8001cd2 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <WIZCHIP_READ_BUF+0xbc>)
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	8afa      	ldrh	r2, [r7, #22]
 8001cc2:	68b9      	ldr	r1, [r7, #8]
 8001cc4:	188c      	adds	r4, r1, r2
 8001cc6:	4798      	blx	r3
 8001cc8:	4603      	mov	r3, r0
 8001cca:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8001ccc:	8afb      	ldrh	r3, [r7, #22]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	82fb      	strh	r3, [r7, #22]
 8001cd2:	8afa      	ldrh	r2, [r7, #22]
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d3f0      	bcc.n	8001cbc <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001cda:	e017      	b.n	8001d0c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	0c1b      	lsrs	r3, r3, #16
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	0a1b      	lsrs	r3, r3, #8
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <WIZCHIP_READ_BUF+0xbc>)
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	f107 0210 	add.w	r2, r7, #16
 8001cfa:	2103      	movs	r1, #3
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001d00:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <WIZCHIP_READ_BUF+0xbc>)
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	88fa      	ldrh	r2, [r7, #6]
 8001d06:	4611      	mov	r1, r2
 8001d08:	68b8      	ldr	r0, [r7, #8]
 8001d0a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <WIZCHIP_READ_BUF+0xbc>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001d12:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <WIZCHIP_READ_BUF+0xbc>)
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	4798      	blx	r3
}
 8001d18:	bf00      	nop
 8001d1a:	371c      	adds	r7, #28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd90      	pop	{r4, r7, pc}
 8001d20:	20000020 	.word	0x20000020

08001d24 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001d32:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001d38:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001d46:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d126      	bne.n	8001d9c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001d4e:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	0c12      	lsrs	r2, r2, #16
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001d5c:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	0a12      	lsrs	r2, r2, #8
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	4610      	mov	r0, r2
 8001d68:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	4610      	mov	r0, r2
 8001d74:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	82fb      	strh	r3, [r7, #22]
 8001d7a:	e00a      	b.n	8001d92 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001d7c:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	8afa      	ldrh	r2, [r7, #22]
 8001d82:	68b9      	ldr	r1, [r7, #8]
 8001d84:	440a      	add	r2, r1
 8001d86:	7812      	ldrb	r2, [r2, #0]
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001d8c:	8afb      	ldrh	r3, [r7, #22]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	82fb      	strh	r3, [r7, #22]
 8001d92:	8afa      	ldrh	r2, [r7, #22]
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d3f0      	bcc.n	8001d7c <WIZCHIP_WRITE_BUF+0x58>
 8001d9a:	e017      	b.n	8001dcc <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	0c1b      	lsrs	r3, r3, #16
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	0a1b      	lsrs	r3, r3, #8
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	f107 0210 	add.w	r2, r7, #16
 8001dba:	2103      	movs	r1, #3
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc4:	88fa      	ldrh	r2, [r7, #6]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	68b8      	ldr	r0, [r7, #8]
 8001dca:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001dd2:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	4798      	blx	r3
}
 8001dd8:	bf00      	nop
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000020 	.word	0x20000020

08001de4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001de4:	b590      	push	{r4, r7, lr}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	81fb      	strh	r3, [r7, #14]
 8001df2:	2300      	movs	r3, #0
 8001df4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fe94 	bl	8001b30 <WIZCHIP_READ>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001e0c:	89bb      	ldrh	r3, [r7, #12]
 8001e0e:	021b      	lsls	r3, r3, #8
 8001e10:	b29c      	uxth	r4, r3
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	3301      	adds	r3, #1
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fe86 	bl	8001b30 <WIZCHIP_READ>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	4423      	add	r3, r4
 8001e2a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001e2c:	89bb      	ldrh	r3, [r7, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d01a      	beq.n	8001e68 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	3301      	adds	r3, #1
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fe76 	bl	8001b30 <WIZCHIP_READ>
 8001e44:	4603      	mov	r3, r0
 8001e46:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001e48:	89fb      	ldrh	r3, [r7, #14]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	b29c      	uxth	r4, r3
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	3301      	adds	r3, #1
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fe68 	bl	8001b30 <WIZCHIP_READ>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	4423      	add	r3, r4
 8001e66:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001e68:	89fa      	ldrh	r2, [r7, #14]
 8001e6a:	89bb      	ldrh	r3, [r7, #12]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1c2      	bne.n	8001df6 <getSn_TX_FSR+0x12>
   return val;
 8001e70:	89fb      	ldrh	r3, [r7, #14]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd90      	pop	{r4, r7, pc}

08001e7a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001e7a:	b590      	push	{r4, r7, lr}
 8001e7c:	b085      	sub	sp, #20
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	81fb      	strh	r3, [r7, #14]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	3301      	adds	r3, #1
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fe49 	bl	8001b30 <WIZCHIP_READ>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001ea2:	89bb      	ldrh	r3, [r7, #12]
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	b29c      	uxth	r4, r3
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	3301      	adds	r3, #1
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fe3b 	bl	8001b30 <WIZCHIP_READ>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	4423      	add	r3, r4
 8001ec0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001ec2:	89bb      	ldrh	r3, [r7, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01a      	beq.n	8001efe <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	3301      	adds	r3, #1
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fe2b 	bl	8001b30 <WIZCHIP_READ>
 8001eda:	4603      	mov	r3, r0
 8001edc:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001ede:	89fb      	ldrh	r3, [r7, #14]
 8001ee0:	021b      	lsls	r3, r3, #8
 8001ee2:	b29c      	uxth	r4, r3
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	3301      	adds	r3, #1
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fe1d 	bl	8001b30 <WIZCHIP_READ>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	4423      	add	r3, r4
 8001efc:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001efe:	89fa      	ldrh	r2, [r7, #14]
 8001f00:	89bb      	ldrh	r3, [r7, #12]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d1c2      	bne.n	8001e8c <getSn_RX_RSR+0x12>
   return val;
 8001f06:	89fb      	ldrh	r3, [r7, #14]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd90      	pop	{r4, r7, pc}

08001f10 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001f10:	b590      	push	{r4, r7, lr}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	6039      	str	r1, [r7, #0]
 8001f1a:	71fb      	strb	r3, [r7, #7]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001f28:	88bb      	ldrh	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d048      	beq.n	8001fc0 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	3301      	adds	r3, #1
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fdf8 	bl	8001b30 <WIZCHIP_READ>
 8001f40:	4603      	mov	r3, r0
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	b29c      	uxth	r4, r3
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fdeb 	bl	8001b30 <WIZCHIP_READ>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	4423      	add	r3, r4
 8001f60:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001f62:	89fb      	ldrh	r3, [r7, #14]
 8001f64:	021b      	lsls	r3, r3, #8
 8001f66:	79fa      	ldrb	r2, [r7, #7]
 8001f68:	0092      	lsls	r2, r2, #2
 8001f6a:	3202      	adds	r2, #2
 8001f6c:	00d2      	lsls	r2, r2, #3
 8001f6e:	4413      	add	r3, r2
 8001f70:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001f72:	88bb      	ldrh	r3, [r7, #4]
 8001f74:	461a      	mov	r2, r3
 8001f76:	6839      	ldr	r1, [r7, #0]
 8001f78:	68b8      	ldr	r0, [r7, #8]
 8001f7a:	f7ff fed3 	bl	8001d24 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001f7e:	89fa      	ldrh	r2, [r7, #14]
 8001f80:	88bb      	ldrh	r3, [r7, #4]
 8001f82:	4413      	add	r3, r2
 8001f84:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001f92:	461a      	mov	r2, r3
 8001f94:	89fb      	ldrh	r3, [r7, #14]
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	f7ff fe12 	bl	8001bc8 <WIZCHIP_WRITE>
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	3301      	adds	r3, #1
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	89fb      	ldrh	r3, [r7, #14]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4610      	mov	r0, r2
 8001fba:	f7ff fe05 	bl	8001bc8 <WIZCHIP_WRITE>
 8001fbe:	e000      	b.n	8001fc2 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8001fc0:	bf00      	nop
}
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd90      	pop	{r4, r7, pc}

08001fc8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	71fb      	strb	r3, [r7, #7]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8001fe0:	88bb      	ldrh	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d048      	beq.n	8002078 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	3301      	adds	r3, #1
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fd9c 	bl	8001b30 <WIZCHIP_READ>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	b29c      	uxth	r4, r3
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	3301      	adds	r3, #1
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fd8f 	bl	8001b30 <WIZCHIP_READ>
 8002012:	4603      	mov	r3, r0
 8002014:	b29b      	uxth	r3, r3
 8002016:	4423      	add	r3, r4
 8002018:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800201a:	89fb      	ldrh	r3, [r7, #14]
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	79fa      	ldrb	r2, [r7, #7]
 8002020:	0092      	lsls	r2, r2, #2
 8002022:	3203      	adds	r2, #3
 8002024:	00d2      	lsls	r2, r2, #3
 8002026:	4413      	add	r3, r2
 8002028:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800202a:	88bb      	ldrh	r3, [r7, #4]
 800202c:	461a      	mov	r2, r3
 800202e:	6839      	ldr	r1, [r7, #0]
 8002030:	68b8      	ldr	r0, [r7, #8]
 8002032:	f7ff fe17 	bl	8001c64 <WIZCHIP_READ_BUF>
   ptr += len;
 8002036:	89fa      	ldrh	r2, [r7, #14]
 8002038:	88bb      	ldrh	r3, [r7, #4]
 800203a:	4413      	add	r3, r2
 800203c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	3301      	adds	r3, #1
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800204a:	461a      	mov	r2, r3
 800204c:	89fb      	ldrh	r3, [r7, #14]
 800204e:	0a1b      	lsrs	r3, r3, #8
 8002050:	b29b      	uxth	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	4619      	mov	r1, r3
 8002056:	4610      	mov	r0, r2
 8002058:	f7ff fdb6 	bl	8001bc8 <WIZCHIP_WRITE>
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	3301      	adds	r3, #1
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002068:	461a      	mov	r2, r3
 800206a:	89fb      	ldrh	r3, [r7, #14]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	4619      	mov	r1, r3
 8002070:	4610      	mov	r0, r2
 8002072:	f7ff fda9 	bl	8001bc8 <WIZCHIP_WRITE>
 8002076:	e000      	b.n	800207a <wiz_recv_data+0xb2>
   if(len == 0) return;
 8002078:	bf00      	nop
}
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	bd90      	pop	{r4, r7, pc}

08002080 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002080:	f7fe fa9a 	bl	80005b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002084:	480b      	ldr	r0, [pc, #44]	; (80020b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002086:	490c      	ldr	r1, [pc, #48]	; (80020b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002088:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800208c:	e002      	b.n	8002094 <LoopCopyDataInit>

0800208e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002092:	3304      	adds	r3, #4

08002094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002098:	d3f9      	bcc.n	800208e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209a:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800209c:	4c09      	ldr	r4, [pc, #36]	; (80020c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a0:	e001      	b.n	80020a6 <LoopFillZerobss>

080020a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a4:	3204      	adds	r2, #4

080020a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a8:	d3fb      	bcc.n	80020a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020aa:	f002 ff3f 	bl	8004f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020ae:	f7fe f86f 	bl	8000190 <main>
  bx lr
 80020b2:	4770      	bx	lr
  ldr r0, =_sdata
 80020b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b8:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80020bc:	08005114 	.word	0x08005114
  ldr r2, =_sbss
 80020c0:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80020c4:	2000167c 	.word	0x2000167c

080020c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020c8:	e7fe      	b.n	80020c8 <ADC1_2_IRQHandler>
	...

080020cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_Init+0x28>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a07      	ldr	r2, [pc, #28]	; (80020f4 <HAL_Init+0x28>)
 80020d6:	f043 0310 	orr.w	r3, r3, #16
 80020da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020dc:	2003      	movs	r0, #3
 80020de:	f000 f92b 	bl	8002338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e2:	200f      	movs	r0, #15
 80020e4:	f000 f808 	bl	80020f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e8:	f7fe f9c0 	bl	800046c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40022000 	.word	0x40022000

080020f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_InitTick+0x54>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_InitTick+0x58>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002112:	fbb2 f3f3 	udiv	r3, r2, r3
 8002116:	4618      	mov	r0, r3
 8002118:	f000 f935 	bl	8002386 <HAL_SYSTICK_Config>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e00e      	b.n	8002144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b0f      	cmp	r3, #15
 800212a:	d80a      	bhi.n	8002142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800212c:	2200      	movs	r2, #0
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	f04f 30ff 	mov.w	r0, #4294967295
 8002134:	f000 f90b 	bl	800234e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002138:	4a06      	ldr	r2, [pc, #24]	; (8002154 <HAL_InitTick+0x5c>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e000      	b.n	8002144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000018 	.word	0x20000018
 8002150:	20000050 	.word	0x20000050
 8002154:	2000004c 	.word	0x2000004c

08002158 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_IncTick+0x1c>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_IncTick+0x20>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4413      	add	r3, r2
 8002168:	4a03      	ldr	r2, [pc, #12]	; (8002178 <HAL_IncTick+0x20>)
 800216a:	6013      	str	r3, [r2, #0]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	20000050 	.word	0x20000050
 8002178:	200007ec 	.word	0x200007ec

0800217c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return uwTick;
 8002180:	4b02      	ldr	r3, [pc, #8]	; (800218c <HAL_GetTick+0x10>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	200007ec 	.word	0x200007ec

08002190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff fff0 	bl	800217c <HAL_GetTick>
 800219c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d005      	beq.n	80021b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <HAL_Delay+0x44>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021b6:	bf00      	nop
 80021b8:	f7ff ffe0 	bl	800217c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d8f7      	bhi.n	80021b8 <HAL_Delay+0x28>
  {
  }
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000050 	.word	0x20000050

080021d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <__NVIC_SetPriorityGrouping+0x44>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021f4:	4013      	ands	r3, r2
 80021f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220a:	4a04      	ldr	r2, [pc, #16]	; (800221c <__NVIC_SetPriorityGrouping+0x44>)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	60d3      	str	r3, [r2, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <__NVIC_GetPriorityGrouping+0x18>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	0a1b      	lsrs	r3, r3, #8
 800222a:	f003 0307 	and.w	r3, r3, #7
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	6039      	str	r1, [r7, #0]
 8002246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224c:	2b00      	cmp	r3, #0
 800224e:	db0a      	blt.n	8002266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	490c      	ldr	r1, [pc, #48]	; (8002288 <__NVIC_SetPriority+0x4c>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	0112      	lsls	r2, r2, #4
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	440b      	add	r3, r1
 8002260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002264:	e00a      	b.n	800227c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4908      	ldr	r1, [pc, #32]	; (800228c <__NVIC_SetPriority+0x50>)
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	3b04      	subs	r3, #4
 8002274:	0112      	lsls	r2, r2, #4
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	440b      	add	r3, r1
 800227a:	761a      	strb	r2, [r3, #24]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000e100 	.word	0xe000e100
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f1c3 0307 	rsb	r3, r3, #7
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	bf28      	it	cs
 80022ae:	2304      	movcs	r3, #4
 80022b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3304      	adds	r3, #4
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d902      	bls.n	80022c0 <NVIC_EncodePriority+0x30>
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3b03      	subs	r3, #3
 80022be:	e000      	b.n	80022c2 <NVIC_EncodePriority+0x32>
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	f04f 32ff 	mov.w	r2, #4294967295
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	401a      	ands	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d8:	f04f 31ff 	mov.w	r1, #4294967295
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	fa01 f303 	lsl.w	r3, r1, r3
 80022e2:	43d9      	mvns	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	4313      	orrs	r3, r2
         );
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3724      	adds	r7, #36	; 0x24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3b01      	subs	r3, #1
 8002300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002304:	d301      	bcc.n	800230a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002306:	2301      	movs	r3, #1
 8002308:	e00f      	b.n	800232a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800230a:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <SysTick_Config+0x40>)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3b01      	subs	r3, #1
 8002310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002312:	210f      	movs	r1, #15
 8002314:	f04f 30ff 	mov.w	r0, #4294967295
 8002318:	f7ff ff90 	bl	800223c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <SysTick_Config+0x40>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002322:	4b04      	ldr	r3, [pc, #16]	; (8002334 <SysTick_Config+0x40>)
 8002324:	2207      	movs	r2, #7
 8002326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	e000e010 	.word	0xe000e010

08002338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff ff49 	bl	80021d8 <__NVIC_SetPriorityGrouping>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800234e:	b580      	push	{r7, lr}
 8002350:	b086      	sub	sp, #24
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002360:	f7ff ff5e 	bl	8002220 <__NVIC_GetPriorityGrouping>
 8002364:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68b9      	ldr	r1, [r7, #8]
 800236a:	6978      	ldr	r0, [r7, #20]
 800236c:	f7ff ff90 	bl	8002290 <NVIC_EncodePriority>
 8002370:	4602      	mov	r2, r0
 8002372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff5f 	bl	800223c <__NVIC_SetPriority>
}
 800237e:	bf00      	nop
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ffb0 	bl	80022f4 <SysTick_Config>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b08b      	sub	sp, #44	; 0x2c
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b2:	e169      	b.n	8002688 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023b4:	2201      	movs	r2, #1
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	f040 8158 	bne.w	8002682 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4a9a      	ldr	r2, [pc, #616]	; (8002640 <HAL_GPIO_Init+0x2a0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d05e      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 80023dc:	4a98      	ldr	r2, [pc, #608]	; (8002640 <HAL_GPIO_Init+0x2a0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d875      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 80023e2:	4a98      	ldr	r2, [pc, #608]	; (8002644 <HAL_GPIO_Init+0x2a4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d058      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 80023e8:	4a96      	ldr	r2, [pc, #600]	; (8002644 <HAL_GPIO_Init+0x2a4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d86f      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 80023ee:	4a96      	ldr	r2, [pc, #600]	; (8002648 <HAL_GPIO_Init+0x2a8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d052      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 80023f4:	4a94      	ldr	r2, [pc, #592]	; (8002648 <HAL_GPIO_Init+0x2a8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d869      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 80023fa:	4a94      	ldr	r2, [pc, #592]	; (800264c <HAL_GPIO_Init+0x2ac>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d04c      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 8002400:	4a92      	ldr	r2, [pc, #584]	; (800264c <HAL_GPIO_Init+0x2ac>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d863      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 8002406:	4a92      	ldr	r2, [pc, #584]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d046      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 800240c:	4a90      	ldr	r2, [pc, #576]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d85d      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 8002412:	2b12      	cmp	r3, #18
 8002414:	d82a      	bhi.n	800246c <HAL_GPIO_Init+0xcc>
 8002416:	2b12      	cmp	r3, #18
 8002418:	d859      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 800241a:	a201      	add	r2, pc, #4	; (adr r2, 8002420 <HAL_GPIO_Init+0x80>)
 800241c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002420:	0800249b 	.word	0x0800249b
 8002424:	08002475 	.word	0x08002475
 8002428:	08002487 	.word	0x08002487
 800242c:	080024c9 	.word	0x080024c9
 8002430:	080024cf 	.word	0x080024cf
 8002434:	080024cf 	.word	0x080024cf
 8002438:	080024cf 	.word	0x080024cf
 800243c:	080024cf 	.word	0x080024cf
 8002440:	080024cf 	.word	0x080024cf
 8002444:	080024cf 	.word	0x080024cf
 8002448:	080024cf 	.word	0x080024cf
 800244c:	080024cf 	.word	0x080024cf
 8002450:	080024cf 	.word	0x080024cf
 8002454:	080024cf 	.word	0x080024cf
 8002458:	080024cf 	.word	0x080024cf
 800245c:	080024cf 	.word	0x080024cf
 8002460:	080024cf 	.word	0x080024cf
 8002464:	0800247d 	.word	0x0800247d
 8002468:	08002491 	.word	0x08002491
 800246c:	4a79      	ldr	r2, [pc, #484]	; (8002654 <HAL_GPIO_Init+0x2b4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002472:	e02c      	b.n	80024ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	623b      	str	r3, [r7, #32]
          break;
 800247a:	e029      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	3304      	adds	r3, #4
 8002482:	623b      	str	r3, [r7, #32]
          break;
 8002484:	e024      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	3308      	adds	r3, #8
 800248c:	623b      	str	r3, [r7, #32]
          break;
 800248e:	e01f      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	330c      	adds	r3, #12
 8002496:	623b      	str	r3, [r7, #32]
          break;
 8002498:	e01a      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d102      	bne.n	80024a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024a2:	2304      	movs	r3, #4
 80024a4:	623b      	str	r3, [r7, #32]
          break;
 80024a6:	e013      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d105      	bne.n	80024bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b0:	2308      	movs	r3, #8
 80024b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	611a      	str	r2, [r3, #16]
          break;
 80024ba:	e009      	b.n	80024d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024bc:	2308      	movs	r3, #8
 80024be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	615a      	str	r2, [r3, #20]
          break;
 80024c6:	e003      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024c8:	2300      	movs	r3, #0
 80024ca:	623b      	str	r3, [r7, #32]
          break;
 80024cc:	e000      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          break;
 80024ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2bff      	cmp	r3, #255	; 0xff
 80024d4:	d801      	bhi.n	80024da <HAL_GPIO_Init+0x13a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	e001      	b.n	80024de <HAL_GPIO_Init+0x13e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3304      	adds	r3, #4
 80024de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2bff      	cmp	r3, #255	; 0xff
 80024e4:	d802      	bhi.n	80024ec <HAL_GPIO_Init+0x14c>
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	e002      	b.n	80024f2 <HAL_GPIO_Init+0x152>
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	3b08      	subs	r3, #8
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	210f      	movs	r1, #15
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	401a      	ands	r2, r3
 8002504:	6a39      	ldr	r1, [r7, #32]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	431a      	orrs	r2, r3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 80b1 	beq.w	8002682 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002520:	4b4d      	ldr	r3, [pc, #308]	; (8002658 <HAL_GPIO_Init+0x2b8>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	4a4c      	ldr	r2, [pc, #304]	; (8002658 <HAL_GPIO_Init+0x2b8>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6193      	str	r3, [r2, #24]
 800252c:	4b4a      	ldr	r3, [pc, #296]	; (8002658 <HAL_GPIO_Init+0x2b8>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002538:	4a48      	ldr	r2, [pc, #288]	; (800265c <HAL_GPIO_Init+0x2bc>)
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002544:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	220f      	movs	r2, #15
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4013      	ands	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a40      	ldr	r2, [pc, #256]	; (8002660 <HAL_GPIO_Init+0x2c0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d013      	beq.n	800258c <HAL_GPIO_Init+0x1ec>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a3f      	ldr	r2, [pc, #252]	; (8002664 <HAL_GPIO_Init+0x2c4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00d      	beq.n	8002588 <HAL_GPIO_Init+0x1e8>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a3e      	ldr	r2, [pc, #248]	; (8002668 <HAL_GPIO_Init+0x2c8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d007      	beq.n	8002584 <HAL_GPIO_Init+0x1e4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a3d      	ldr	r2, [pc, #244]	; (800266c <HAL_GPIO_Init+0x2cc>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d101      	bne.n	8002580 <HAL_GPIO_Init+0x1e0>
 800257c:	2303      	movs	r3, #3
 800257e:	e006      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 8002580:	2304      	movs	r3, #4
 8002582:	e004      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 8002584:	2302      	movs	r3, #2
 8002586:	e002      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 800258c:	2300      	movs	r3, #0
 800258e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002590:	f002 0203 	and.w	r2, r2, #3
 8002594:	0092      	lsls	r2, r2, #2
 8002596:	4093      	lsls	r3, r2
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800259e:	492f      	ldr	r1, [pc, #188]	; (800265c <HAL_GPIO_Init+0x2bc>)
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	089b      	lsrs	r3, r3, #2
 80025a4:	3302      	adds	r3, #2
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d006      	beq.n	80025c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025b8:	4b2d      	ldr	r3, [pc, #180]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	492c      	ldr	r1, [pc, #176]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	608b      	str	r3, [r1, #8]
 80025c4:	e006      	b.n	80025d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025c6:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	4928      	ldr	r1, [pc, #160]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d006      	beq.n	80025ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025e0:	4b23      	ldr	r3, [pc, #140]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	4922      	ldr	r1, [pc, #136]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60cb      	str	r3, [r1, #12]
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025ee:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	491e      	ldr	r1, [pc, #120]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d006      	beq.n	8002616 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	4918      	ldr	r1, [pc, #96]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
 8002614:	e006      	b.n	8002624 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002616:	4b16      	ldr	r3, [pc, #88]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	43db      	mvns	r3, r3
 800261e:	4914      	ldr	r1, [pc, #80]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 8002620:	4013      	ands	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d021      	beq.n	8002674 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	490e      	ldr	r1, [pc, #56]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]
 800263c:	e021      	b.n	8002682 <HAL_GPIO_Init+0x2e2>
 800263e:	bf00      	nop
 8002640:	10320000 	.word	0x10320000
 8002644:	10310000 	.word	0x10310000
 8002648:	10220000 	.word	0x10220000
 800264c:	10210000 	.word	0x10210000
 8002650:	10120000 	.word	0x10120000
 8002654:	10110000 	.word	0x10110000
 8002658:	40021000 	.word	0x40021000
 800265c:	40010000 	.word	0x40010000
 8002660:	40010800 	.word	0x40010800
 8002664:	40010c00 	.word	0x40010c00
 8002668:	40011000 	.word	0x40011000
 800266c:	40011400 	.word	0x40011400
 8002670:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_GPIO_Init+0x304>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	43db      	mvns	r3, r3
 800267c:	4909      	ldr	r1, [pc, #36]	; (80026a4 <HAL_GPIO_Init+0x304>)
 800267e:	4013      	ands	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	3301      	adds	r3, #1
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	fa22 f303 	lsr.w	r3, r2, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	f47f ae8e 	bne.w	80023b4 <HAL_GPIO_Init+0x14>
  }
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	372c      	adds	r7, #44	; 0x2c
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	40010400 	.word	0x40010400

080026a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
 80026b4:	4613      	mov	r3, r2
 80026b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026b8:	787b      	ldrb	r3, [r7, #1]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026c4:	e003      	b.n	80026ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026c6:	887b      	ldrh	r3, [r7, #2]
 80026c8:	041a      	lsls	r2, r3, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	611a      	str	r2, [r3, #16]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026ea:	887a      	ldrh	r2, [r7, #2]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4013      	ands	r3, r2
 80026f0:	041a      	lsls	r2, r3, #16
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	43d9      	mvns	r1, r3
 80026f6:	887b      	ldrh	r3, [r7, #2]
 80026f8:	400b      	ands	r3, r1
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	611a      	str	r2, [r3, #16]
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
	...

0800270c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e272      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 8087 	beq.w	800283a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800272c:	4b92      	ldr	r3, [pc, #584]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 030c 	and.w	r3, r3, #12
 8002734:	2b04      	cmp	r3, #4
 8002736:	d00c      	beq.n	8002752 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002738:	4b8f      	ldr	r3, [pc, #572]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 030c 	and.w	r3, r3, #12
 8002740:	2b08      	cmp	r3, #8
 8002742:	d112      	bne.n	800276a <HAL_RCC_OscConfig+0x5e>
 8002744:	4b8c      	ldr	r3, [pc, #560]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002750:	d10b      	bne.n	800276a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002752:	4b89      	ldr	r3, [pc, #548]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d06c      	beq.n	8002838 <HAL_RCC_OscConfig+0x12c>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d168      	bne.n	8002838 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e24c      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002772:	d106      	bne.n	8002782 <HAL_RCC_OscConfig+0x76>
 8002774:	4b80      	ldr	r3, [pc, #512]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a7f      	ldr	r2, [pc, #508]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 800277a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	e02e      	b.n	80027e0 <HAL_RCC_OscConfig+0xd4>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x98>
 800278a:	4b7b      	ldr	r3, [pc, #492]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a7a      	ldr	r2, [pc, #488]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	4b78      	ldr	r3, [pc, #480]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a77      	ldr	r2, [pc, #476]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 800279c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	e01d      	b.n	80027e0 <HAL_RCC_OscConfig+0xd4>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCC_OscConfig+0xbc>
 80027ae:	4b72      	ldr	r3, [pc, #456]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a71      	ldr	r2, [pc, #452]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	4b6f      	ldr	r3, [pc, #444]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a6e      	ldr	r2, [pc, #440]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	e00b      	b.n	80027e0 <HAL_RCC_OscConfig+0xd4>
 80027c8:	4b6b      	ldr	r3, [pc, #428]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a6a      	ldr	r2, [pc, #424]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	4b68      	ldr	r3, [pc, #416]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a67      	ldr	r2, [pc, #412]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d013      	beq.n	8002810 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7ff fcc8 	bl	800217c <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f0:	f7ff fcc4 	bl	800217c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	; 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e200      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	4b5d      	ldr	r3, [pc, #372]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0xe4>
 800280e:	e014      	b.n	800283a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7ff fcb4 	bl	800217c <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002818:	f7ff fcb0 	bl	800217c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	; 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e1ec      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282a:	4b53      	ldr	r3, [pc, #332]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x10c>
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d063      	beq.n	800290e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002846:	4b4c      	ldr	r3, [pc, #304]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00b      	beq.n	800286a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002852:	4b49      	ldr	r3, [pc, #292]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b08      	cmp	r3, #8
 800285c:	d11c      	bne.n	8002898 <HAL_RCC_OscConfig+0x18c>
 800285e:	4b46      	ldr	r3, [pc, #280]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d116      	bne.n	8002898 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	4b43      	ldr	r3, [pc, #268]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <HAL_RCC_OscConfig+0x176>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d001      	beq.n	8002882 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e1c0      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002882:	4b3d      	ldr	r3, [pc, #244]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4939      	ldr	r1, [pc, #228]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002896:	e03a      	b.n	800290e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d020      	beq.n	80028e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a0:	4b36      	ldr	r3, [pc, #216]	; (800297c <HAL_RCC_OscConfig+0x270>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a6:	f7ff fc69 	bl	800217c <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ae:	f7ff fc65 	bl	800217c <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e1a1      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c0:	4b2d      	ldr	r3, [pc, #180]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b2a      	ldr	r3, [pc, #168]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4927      	ldr	r1, [pc, #156]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	600b      	str	r3, [r1, #0]
 80028e0:	e015      	b.n	800290e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e2:	4b26      	ldr	r3, [pc, #152]	; (800297c <HAL_RCC_OscConfig+0x270>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7ff fc48 	bl	800217c <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f0:	f7ff fc44 	bl	800217c <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e180      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002902:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d03a      	beq.n	8002990 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d019      	beq.n	8002956 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002922:	4b17      	ldr	r3, [pc, #92]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 8002924:	2201      	movs	r2, #1
 8002926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002928:	f7ff fc28 	bl	800217c <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002930:	f7ff fc24 	bl	800217c <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e160      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002942:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800294e:	2001      	movs	r0, #1
 8002950:	f000 fabc 	bl	8002ecc <RCC_Delay>
 8002954:	e01c      	b.n	8002990 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002956:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295c:	f7ff fc0e 	bl	800217c <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002962:	e00f      	b.n	8002984 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002964:	f7ff fc0a 	bl	800217c <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d908      	bls.n	8002984 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e146      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000
 800297c:	42420000 	.word	0x42420000
 8002980:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002984:	4b92      	ldr	r3, [pc, #584]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1e9      	bne.n	8002964 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80a6 	beq.w	8002aea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299e:	2300      	movs	r3, #0
 80029a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a2:	4b8b      	ldr	r3, [pc, #556]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10d      	bne.n	80029ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ae:	4b88      	ldr	r3, [pc, #544]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	4a87      	ldr	r2, [pc, #540]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b8:	61d3      	str	r3, [r2, #28]
 80029ba:	4b85      	ldr	r3, [pc, #532]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ca:	4b82      	ldr	r3, [pc, #520]	; (8002bd4 <HAL_RCC_OscConfig+0x4c8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d118      	bne.n	8002a08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d6:	4b7f      	ldr	r3, [pc, #508]	; (8002bd4 <HAL_RCC_OscConfig+0x4c8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a7e      	ldr	r2, [pc, #504]	; (8002bd4 <HAL_RCC_OscConfig+0x4c8>)
 80029dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e2:	f7ff fbcb 	bl	800217c <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ea:	f7ff fbc7 	bl	800217c <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b64      	cmp	r3, #100	; 0x64
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e103      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	4b75      	ldr	r3, [pc, #468]	; (8002bd4 <HAL_RCC_OscConfig+0x4c8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_OscConfig+0x312>
 8002a10:	4b6f      	ldr	r3, [pc, #444]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	4a6e      	ldr	r2, [pc, #440]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6213      	str	r3, [r2, #32]
 8002a1c:	e02d      	b.n	8002a7a <HAL_RCC_OscConfig+0x36e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x334>
 8002a26:	4b6a      	ldr	r3, [pc, #424]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	4a69      	ldr	r2, [pc, #420]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	f023 0301 	bic.w	r3, r3, #1
 8002a30:	6213      	str	r3, [r2, #32]
 8002a32:	4b67      	ldr	r3, [pc, #412]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	4a66      	ldr	r2, [pc, #408]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	f023 0304 	bic.w	r3, r3, #4
 8002a3c:	6213      	str	r3, [r2, #32]
 8002a3e:	e01c      	b.n	8002a7a <HAL_RCC_OscConfig+0x36e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b05      	cmp	r3, #5
 8002a46:	d10c      	bne.n	8002a62 <HAL_RCC_OscConfig+0x356>
 8002a48:	4b61      	ldr	r3, [pc, #388]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	4a60      	ldr	r2, [pc, #384]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a4e:	f043 0304 	orr.w	r3, r3, #4
 8002a52:	6213      	str	r3, [r2, #32]
 8002a54:	4b5e      	ldr	r3, [pc, #376]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	4a5d      	ldr	r2, [pc, #372]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6213      	str	r3, [r2, #32]
 8002a60:	e00b      	b.n	8002a7a <HAL_RCC_OscConfig+0x36e>
 8002a62:	4b5b      	ldr	r3, [pc, #364]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	4a5a      	ldr	r2, [pc, #360]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	6213      	str	r3, [r2, #32]
 8002a6e:	4b58      	ldr	r3, [pc, #352]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	4a57      	ldr	r2, [pc, #348]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a74:	f023 0304 	bic.w	r3, r3, #4
 8002a78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d015      	beq.n	8002aae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7ff fb7b 	bl	800217c <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7ff fb77 	bl	800217c <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0b1      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa0:	4b4b      	ldr	r3, [pc, #300]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0ee      	beq.n	8002a8a <HAL_RCC_OscConfig+0x37e>
 8002aac:	e014      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aae:	f7ff fb65 	bl	800217c <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab4:	e00a      	b.n	8002acc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	f7ff fb61 	bl	800217c <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e09b      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002acc:	4b40      	ldr	r3, [pc, #256]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1ee      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ad8:	7dfb      	ldrb	r3, [r7, #23]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d105      	bne.n	8002aea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ade:	4b3c      	ldr	r3, [pc, #240]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4a3b      	ldr	r2, [pc, #236]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8087 	beq.w	8002c02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af4:	4b36      	ldr	r3, [pc, #216]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 030c 	and.w	r3, r3, #12
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d061      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d146      	bne.n	8002b96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b08:	4b33      	ldr	r3, [pc, #204]	; (8002bd8 <HAL_RCC_OscConfig+0x4cc>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0e:	f7ff fb35 	bl	800217c <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b16:	f7ff fb31 	bl	800217c <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e06d      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b28:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f0      	bne.n	8002b16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3c:	d108      	bne.n	8002b50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b3e:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	4921      	ldr	r1, [pc, #132]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b50:	4b1f      	ldr	r3, [pc, #124]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a19      	ldr	r1, [r3, #32]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	430b      	orrs	r3, r1
 8002b62:	491b      	ldr	r1, [pc, #108]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <HAL_RCC_OscConfig+0x4cc>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7ff fb05 	bl	800217c <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b76:	f7ff fb01 	bl	800217c <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e03d      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x46a>
 8002b94:	e035      	b.n	8002c02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b96:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <HAL_RCC_OscConfig+0x4cc>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7ff faee 	bl	800217c <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7ff faea 	bl	800217c <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e026      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x498>
 8002bc2:	e01e      	b.n	8002c02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e019      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_RCC_OscConfig+0x500>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d106      	bne.n	8002bfe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000

08002c10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0d0      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c24:	4b6a      	ldr	r3, [pc, #424]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d910      	bls.n	8002c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b67      	ldr	r3, [pc, #412]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 0207 	bic.w	r2, r3, #7
 8002c3a:	4965      	ldr	r1, [pc, #404]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b63      	ldr	r3, [pc, #396]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0b8      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d020      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c6c:	4b59      	ldr	r3, [pc, #356]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4a58      	ldr	r2, [pc, #352]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c84:	4b53      	ldr	r3, [pc, #332]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4a52      	ldr	r2, [pc, #328]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c90:	4b50      	ldr	r3, [pc, #320]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	494d      	ldr	r1, [pc, #308]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d040      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d107      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d115      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e07f      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cce:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e073      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cde:	4b3d      	ldr	r3, [pc, #244]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e06b      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cee:	4b39      	ldr	r3, [pc, #228]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f023 0203 	bic.w	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4936      	ldr	r1, [pc, #216]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d00:	f7ff fa3c 	bl	800217c <HAL_GetTick>
 8002d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d08:	f7ff fa38 	bl	800217c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e053      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1e:	4b2d      	ldr	r3, [pc, #180]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 020c 	and.w	r2, r3, #12
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d1eb      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d30:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d210      	bcs.n	8002d60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b24      	ldr	r3, [pc, #144]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 0207 	bic.w	r2, r3, #7
 8002d46:	4922      	ldr	r1, [pc, #136]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e032      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d6c:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4916      	ldr	r1, [pc, #88]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d8a:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	490e      	ldr	r1, [pc, #56]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d9e:	f000 f82d 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002da2:	4602      	mov	r2, r0
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	490a      	ldr	r1, [pc, #40]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002db0:	5ccb      	ldrb	r3, [r1, r3]
 8002db2:	fa22 f303 	lsr.w	r3, r2, r3
 8002db6:	4a09      	ldr	r2, [pc, #36]	; (8002ddc <HAL_RCC_ClockConfig+0x1cc>)
 8002db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dba:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_RCC_ClockConfig+0x1d0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff f99a 	bl	80020f8 <HAL_InitTick>

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40022000 	.word	0x40022000
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	080050e8 	.word	0x080050e8
 8002ddc:	20000018 	.word	0x20000018
 8002de0:	2000004c 	.word	0x2000004c

08002de4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <HAL_RCC_EnableCSS+0x14>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	601a      	str	r2, [r3, #0]
}
 8002dee:	bf00      	nop
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	4242004c 	.word	0x4242004c

08002dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e16:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d002      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x30>
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d003      	beq.n	8002e32 <HAL_RCC_GetSysClockFreq+0x36>
 8002e2a:	e027      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e2c:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e2e:	613b      	str	r3, [r7, #16]
      break;
 8002e30:	e027      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	0c9b      	lsrs	r3, r3, #18
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e3c:	5cd3      	ldrb	r3, [r2, r3]
 8002e3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d010      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	0c5b      	lsrs	r3, r3, #17
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	4a11      	ldr	r2, [pc, #68]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e56:	5cd3      	ldrb	r3, [r2, r3]
 8002e58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a0d      	ldr	r2, [pc, #52]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e5e:	fb03 f202 	mul.w	r2, r3, r2
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	e004      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e70:	fb02 f303 	mul.w	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	613b      	str	r3, [r7, #16]
      break;
 8002e7a:	e002      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e7e:	613b      	str	r3, [r7, #16]
      break;
 8002e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e82:	693b      	ldr	r3, [r7, #16]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	371c      	adds	r7, #28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	007a1200 	.word	0x007a1200
 8002e98:	080050f8 	.word	0x080050f8
 8002e9c:	08005108 	.word	0x08005108
 8002ea0:	003d0900 	.word	0x003d0900

08002ea4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb0:	2b80      	cmp	r3, #128	; 0x80
 8002eb2:	d104      	bne.n	8002ebe <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002eb4:	f000 f828 	bl	8002f08 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002eba:	2280      	movs	r2, #128	; 0x80
 8002ebc:	701a      	strb	r2, [r3, #0]
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	4002100a 	.word	0x4002100a

08002ecc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <RCC_Delay+0x34>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <RCC_Delay+0x38>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	0a5b      	lsrs	r3, r3, #9
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	fb02 f303 	mul.w	r3, r2, r3
 8002ee6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ee8:	bf00      	nop
  }
  while (Delay --);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1e5a      	subs	r2, r3, #1
 8002eee:	60fa      	str	r2, [r7, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f9      	bne.n	8002ee8 <RCC_Delay+0x1c>
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr
 8002f00:	20000018 	.word	0x20000018
 8002f04:	10624dd3 	.word	0x10624dd3

08002f08 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e076      	b.n	8003014 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d108      	bne.n	8002f40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f36:	d009      	beq.n	8002f4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	61da      	str	r2, [r3, #28]
 8002f3e:	e005      	b.n	8002f4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fd fab8 	bl	80004dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd0:	ea42 0103 	orr.w	r1, r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	0c1a      	lsrs	r2, r3, #16
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f002 0204 	and.w	r2, r2, #4
 8002ff2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	69da      	ldr	r2, [r3, #28]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003002:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	4613      	mov	r3, r2
 800302a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_SPI_Transmit+0x22>
 800303a:	2302      	movs	r3, #2
 800303c:	e12d      	b.n	800329a <HAL_SPI_Transmit+0x27e>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003046:	f7ff f899 	bl	800217c <HAL_GetTick>
 800304a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d002      	beq.n	8003062 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800305c:	2302      	movs	r3, #2
 800305e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003060:	e116      	b.n	8003290 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_SPI_Transmit+0x52>
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003072:	e10d      	b.n	8003290 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2203      	movs	r2, #3
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	88fa      	ldrh	r2, [r7, #6]
 800308c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	88fa      	ldrh	r2, [r7, #6]
 8003092:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ba:	d10f      	bne.n	80030dc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e6:	2b40      	cmp	r3, #64	; 0x40
 80030e8:	d007      	beq.n	80030fa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003102:	d14f      	bne.n	80031a4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <HAL_SPI_Transmit+0xf6>
 800310c:	8afb      	ldrh	r3, [r7, #22]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d142      	bne.n	8003198 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	881a      	ldrh	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	1c9a      	adds	r2, r3, #2
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003136:	e02f      	b.n	8003198 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b02      	cmp	r3, #2
 8003144:	d112      	bne.n	800316c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	881a      	ldrh	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	1c9a      	adds	r2, r3, #2
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	86da      	strh	r2, [r3, #54]	; 0x36
 800316a:	e015      	b.n	8003198 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800316c:	f7ff f806 	bl	800217c <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d803      	bhi.n	8003184 <HAL_SPI_Transmit+0x168>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003182:	d102      	bne.n	800318a <HAL_SPI_Transmit+0x16e>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003196:	e07b      	b.n	8003290 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1ca      	bne.n	8003138 <HAL_SPI_Transmit+0x11c>
 80031a2:	e050      	b.n	8003246 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <HAL_SPI_Transmit+0x196>
 80031ac:	8afb      	ldrh	r3, [r7, #22]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d144      	bne.n	800323c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	330c      	adds	r3, #12
 80031bc:	7812      	ldrb	r2, [r2, #0]
 80031be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031d8:	e030      	b.n	800323c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d113      	bne.n	8003210 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	330c      	adds	r3, #12
 80031f2:	7812      	ldrb	r2, [r2, #0]
 80031f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003204:	b29b      	uxth	r3, r3
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	86da      	strh	r2, [r3, #54]	; 0x36
 800320e:	e015      	b.n	800323c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003210:	f7fe ffb4 	bl	800217c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d803      	bhi.n	8003228 <HAL_SPI_Transmit+0x20c>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003226:	d102      	bne.n	800322e <HAL_SPI_Transmit+0x212>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800323a:	e029      	b.n	8003290 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1c9      	bne.n	80031da <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	6839      	ldr	r1, [r7, #0]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fbcc 	bl	80039e8 <SPI_EndRxTxTransaction>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003264:	2300      	movs	r3, #0
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e003      	b.n	8003290 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003298:	7ffb      	ldrb	r3, [r7, #31]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3720      	adds	r7, #32
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b088      	sub	sp, #32
 80032a6:	af02      	add	r7, sp, #8
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	603b      	str	r3, [r7, #0]
 80032ae:	4613      	mov	r3, r2
 80032b0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d002      	beq.n	80032c8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80032c2:	2302      	movs	r3, #2
 80032c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80032c6:	e0fb      	b.n	80034c0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032d0:	d112      	bne.n	80032f8 <HAL_SPI_Receive+0x56>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10e      	bne.n	80032f8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2204      	movs	r2, #4
 80032de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80032e2:	88fa      	ldrh	r2, [r7, #6]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f8ef 	bl	80034d2 <HAL_SPI_TransmitReceive>
 80032f4:	4603      	mov	r3, r0
 80032f6:	e0e8      	b.n	80034ca <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_SPI_Receive+0x64>
 8003302:	2302      	movs	r3, #2
 8003304:	e0e1      	b.n	80034ca <HAL_SPI_Receive+0x228>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800330e:	f7fe ff35 	bl	800217c <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_SPI_Receive+0x7e>
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003324:	e0cc      	b.n	80034c0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2204      	movs	r2, #4
 800332a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	88fa      	ldrh	r2, [r7, #6]
 800333e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	88fa      	ldrh	r2, [r7, #6]
 8003344:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800336c:	d10f      	bne.n	800338e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800337c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800338c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003398:	2b40      	cmp	r3, #64	; 0x40
 800339a:	d007      	beq.n	80033ac <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d16a      	bne.n	800348a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80033b4:	e032      	b.n	800341c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d115      	bne.n	80033f0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f103 020c 	add.w	r2, r3, #12
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	7812      	ldrb	r2, [r2, #0]
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033ee:	e015      	b.n	800341c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033f0:	f7fe fec4 	bl	800217c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d803      	bhi.n	8003408 <HAL_SPI_Receive+0x166>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003406:	d102      	bne.n	800340e <HAL_SPI_Receive+0x16c>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800341a:	e051      	b.n	80034c0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1c7      	bne.n	80033b6 <HAL_SPI_Receive+0x114>
 8003426:	e035      	b.n	8003494 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b01      	cmp	r3, #1
 8003434:	d113      	bne.n	800345e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	b292      	uxth	r2, r2
 8003442:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003448:	1c9a      	adds	r2, r3, #2
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800345c:	e015      	b.n	800348a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800345e:	f7fe fe8d 	bl	800217c <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d803      	bhi.n	8003476 <HAL_SPI_Receive+0x1d4>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d102      	bne.n	800347c <HAL_SPI_Receive+0x1da>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d106      	bne.n	800348a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003488:	e01a      	b.n	80034c0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1c9      	bne.n	8003428 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	6839      	ldr	r1, [r7, #0]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fa53 	bl	8003944 <SPI_EndRxTransaction>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	75fb      	strb	r3, [r7, #23]
 80034b6:	e003      	b.n	80034c0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b08c      	sub	sp, #48	; 0x30
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034e0:	2301      	movs	r3, #1
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_SPI_TransmitReceive+0x26>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e198      	b.n	800382a <HAL_SPI_TransmitReceive+0x358>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003500:	f7fe fe3c 	bl	800217c <HAL_GetTick>
 8003504:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800350c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003516:	887b      	ldrh	r3, [r7, #2]
 8003518:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800351a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800351e:	2b01      	cmp	r3, #1
 8003520:	d00f      	beq.n	8003542 <HAL_SPI_TransmitReceive+0x70>
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003528:	d107      	bne.n	800353a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d103      	bne.n	800353a <HAL_SPI_TransmitReceive+0x68>
 8003532:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003536:	2b04      	cmp	r3, #4
 8003538:	d003      	beq.n	8003542 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800353a:	2302      	movs	r3, #2
 800353c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003540:	e16d      	b.n	800381e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_SPI_TransmitReceive+0x82>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_SPI_TransmitReceive+0x82>
 800354e:	887b      	ldrh	r3, [r7, #2]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d103      	bne.n	800355c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800355a:	e160      	b.n	800381e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b04      	cmp	r3, #4
 8003566:	d003      	beq.n	8003570 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2205      	movs	r2, #5
 800356c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	887a      	ldrh	r2, [r7, #2]
 8003580:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	887a      	ldrh	r2, [r7, #2]
 8003586:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	887a      	ldrh	r2, [r7, #2]
 8003592:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	887a      	ldrh	r2, [r7, #2]
 8003598:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b0:	2b40      	cmp	r3, #64	; 0x40
 80035b2:	d007      	beq.n	80035c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035cc:	d17c      	bne.n	80036c8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_SPI_TransmitReceive+0x10a>
 80035d6:	8b7b      	ldrh	r3, [r7, #26]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d16a      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	881a      	ldrh	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	1c9a      	adds	r2, r3, #2
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003600:	e057      	b.n	80036b2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b02      	cmp	r3, #2
 800360e:	d11b      	bne.n	8003648 <HAL_SPI_TransmitReceive+0x176>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <HAL_SPI_TransmitReceive+0x176>
 800361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361c:	2b01      	cmp	r3, #1
 800361e:	d113      	bne.n	8003648 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	881a      	ldrh	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	1c9a      	adds	r2, r3, #2
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b01      	cmp	r3, #1
 8003654:	d119      	bne.n	800368a <HAL_SPI_TransmitReceive+0x1b8>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d014      	beq.n	800368a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	b292      	uxth	r2, r2
 800366c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	1c9a      	adds	r2, r3, #2
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003686:	2301      	movs	r3, #1
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800368a:	f7fe fd77 	bl	800217c <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003696:	429a      	cmp	r2, r3
 8003698:	d80b      	bhi.n	80036b2 <HAL_SPI_TransmitReceive+0x1e0>
 800369a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d007      	beq.n	80036b2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80036b0:	e0b5      	b.n	800381e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1a2      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x130>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d19d      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x130>
 80036c6:	e080      	b.n	80037ca <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_SPI_TransmitReceive+0x204>
 80036d0:	8b7b      	ldrh	r3, [r7, #26]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d16f      	bne.n	80037b6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	330c      	adds	r3, #12
 80036e0:	7812      	ldrb	r2, [r2, #0]
 80036e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036fc:	e05b      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b02      	cmp	r3, #2
 800370a:	d11c      	bne.n	8003746 <HAL_SPI_TransmitReceive+0x274>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d017      	beq.n	8003746 <HAL_SPI_TransmitReceive+0x274>
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	2b01      	cmp	r3, #1
 800371a:	d114      	bne.n	8003746 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	330c      	adds	r3, #12
 8003726:	7812      	ldrb	r2, [r2, #0]
 8003728:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b01      	cmp	r3, #1
 8003752:	d119      	bne.n	8003788 <HAL_SPI_TransmitReceive+0x2b6>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d014      	beq.n	8003788 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003784:	2301      	movs	r3, #1
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003788:	f7fe fcf8 	bl	800217c <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003794:	429a      	cmp	r2, r3
 8003796:	d803      	bhi.n	80037a0 <HAL_SPI_TransmitReceive+0x2ce>
 8003798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379e:	d102      	bne.n	80037a6 <HAL_SPI_TransmitReceive+0x2d4>
 80037a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d107      	bne.n	80037b6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80037b4:	e033      	b.n	800381e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d19e      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x22c>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d199      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f90a 	bl	80039e8 <SPI_EndRxTxTransaction>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d006      	beq.n	80037e8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80037e6:	e01a      	b.n	800381e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003814:	e003      	b.n	800381e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800382a:	4618      	mov	r0, r3
 800382c:	3730      	adds	r7, #48	; 0x30
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003844:	f7fe fc9a 	bl	800217c <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	4413      	add	r3, r2
 8003852:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003854:	f7fe fc92 	bl	800217c <HAL_GetTick>
 8003858:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800385a:	4b39      	ldr	r3, [pc, #228]	; (8003940 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	015b      	lsls	r3, r3, #5
 8003860:	0d1b      	lsrs	r3, r3, #20
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	fb02 f303 	mul.w	r3, r2, r3
 8003868:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800386a:	e054      	b.n	8003916 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003872:	d050      	beq.n	8003916 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003874:	f7fe fc82 	bl	800217c <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	429a      	cmp	r2, r3
 8003882:	d902      	bls.n	800388a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d13d      	bne.n	8003906 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003898:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038a2:	d111      	bne.n	80038c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ac:	d004      	beq.n	80038b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b6:	d107      	bne.n	80038c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038d0:	d10f      	bne.n	80038f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e017      	b.n	8003936 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	3b01      	subs	r3, #1
 8003914:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4013      	ands	r3, r2
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	429a      	cmp	r2, r3
 8003924:	bf0c      	ite	eq
 8003926:	2301      	moveq	r3, #1
 8003928:	2300      	movne	r3, #0
 800392a:	b2db      	uxtb	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	429a      	cmp	r2, r3
 8003932:	d19b      	bne.n	800386c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000018 	.word	0x20000018

08003944 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af02      	add	r7, sp, #8
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003958:	d111      	bne.n	800397e <SPI_EndRxTransaction+0x3a>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003962:	d004      	beq.n	800396e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396c:	d107      	bne.n	800397e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800397c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003986:	d117      	bne.n	80039b8 <SPI_EndRxTransaction+0x74>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003990:	d112      	bne.n	80039b8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2200      	movs	r2, #0
 800399a:	2101      	movs	r1, #1
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff ff49 	bl	8003834 <SPI_WaitFlagStateUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01a      	beq.n	80039de <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	f043 0220 	orr.w	r2, r3, #32
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e013      	b.n	80039e0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2200      	movs	r2, #0
 80039c0:	2180      	movs	r1, #128	; 0x80
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f7ff ff36 	bl	8003834 <SPI_WaitFlagStateUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d007      	beq.n	80039de <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d2:	f043 0220 	orr.w	r2, r3, #32
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e000      	b.n	80039e0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2200      	movs	r2, #0
 80039fc:	2180      	movs	r1, #128	; 0x80
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f7ff ff18 	bl	8003834 <SPI_WaitFlagStateUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d007      	beq.n	8003a1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0e:	f043 0220 	orr.w	r2, r3, #32
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e000      	b.n	8003a1c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a36:	2b84      	cmp	r3, #132	; 0x84
 8003a38:	d005      	beq.n	8003a46 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4413      	add	r3, r2
 8003a42:	3303      	adds	r3, #3
 8003a44:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a46:	68fb      	ldr	r3, [r7, #12]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr

08003a52 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a56:	f000 fae7 	bl	8004028 <vTaskStartScheduler>
  
  return osOK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a62:	b089      	sub	sp, #36	; 0x24
 8003a64:	af04      	add	r7, sp, #16
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d020      	beq.n	8003ab4 <osThreadCreate+0x54>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d01c      	beq.n	8003ab4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685c      	ldr	r4, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691e      	ldr	r6, [r3, #16]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff ffc9 	bl	8003a24 <makeFreeRtosPriority>
 8003a92:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a9c:	9202      	str	r2, [sp, #8]
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	9100      	str	r1, [sp, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	4632      	mov	r2, r6
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f000 f8e8 	bl	8003c7e <xTaskCreateStatic>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	e01c      	b.n	8003aee <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685c      	ldr	r4, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ac0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ffab 	bl	8003a24 <makeFreeRtosPriority>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	f107 030c 	add.w	r3, r7, #12
 8003ad4:	9301      	str	r3, [sp, #4]
 8003ad6:	9200      	str	r2, [sp, #0]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	4632      	mov	r2, r6
 8003adc:	4629      	mov	r1, r5
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f000 f929 	bl	8003d36 <xTaskCreate>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d001      	beq.n	8003aee <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	e000      	b.n	8003af0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003aee:	68fb      	ldr	r3, [r7, #12]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003af8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <osDelay+0x16>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	e000      	b.n	8003b10 <osDelay+0x18>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fa55 	bl	8003fc0 <vTaskDelay>
  
  return osOK;
 8003b16:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f103 0208 	add.w	r2, r3, #8
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f04f 32ff 	mov.w	r2, #4294967295
 8003b38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f103 0208 	add.w	r2, r3, #8
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f103 0208 	add.w	r2, r3, #8
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b76:	b480      	push	{r7}
 8003b78:	b085      	sub	sp, #20
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	601a      	str	r2, [r3, #0]
}
 8003bb2:	bf00      	nop
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr

08003bbc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd2:	d103      	bne.n	8003bdc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	e00c      	b.n	8003bf6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3308      	adds	r3, #8
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	e002      	b.n	8003bea <vListInsert+0x2e>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d2f6      	bcs.n	8003be4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	601a      	str	r2, [r3, #0]
}
 8003c22:	bf00      	nop
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6892      	ldr	r2, [r2, #8]
 8003c42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6852      	ldr	r2, [r2, #4]
 8003c4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d103      	bne.n	8003c60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	1e5a      	subs	r2, r3, #1
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr

08003c7e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b08e      	sub	sp, #56	; 0x38
 8003c82:	af04      	add	r7, sp, #16
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ca4:	bf00      	nop
 8003ca6:	e7fe      	b.n	8003ca6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <xTaskCreateStatic+0x46>
	__asm volatile
 8003cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	61fb      	str	r3, [r7, #28]
}
 8003cc0:	bf00      	nop
 8003cc2:	e7fe      	b.n	8003cc2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003cc4:	23a0      	movs	r3, #160	; 0xa0
 8003cc6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2ba0      	cmp	r3, #160	; 0xa0
 8003ccc:	d00a      	beq.n	8003ce4 <xTaskCreateStatic+0x66>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	61bb      	str	r3, [r7, #24]
}
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d01e      	beq.n	8003d28 <xTaskCreateStatic+0xaa>
 8003cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01b      	beq.n	8003d28 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cf8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d02:	2300      	movs	r3, #0
 8003d04:	9303      	str	r3, [sp, #12]
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	9302      	str	r3, [sp, #8]
 8003d0a:	f107 0314 	add.w	r3, r7, #20
 8003d0e:	9301      	str	r3, [sp, #4]
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f850 	bl	8003dc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d22:	f000 f8e3 	bl	8003eec <prvAddNewTaskToReadyList>
 8003d26:	e001      	b.n	8003d2c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d2c:	697b      	ldr	r3, [r7, #20]
	}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3728      	adds	r7, #40	; 0x28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b08c      	sub	sp, #48	; 0x30
 8003d3a:	af04      	add	r7, sp, #16
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	4613      	mov	r3, r2
 8003d44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d46:	88fb      	ldrh	r3, [r7, #6]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 feb8 	bl	8004ac0 <pvPortMalloc>
 8003d50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00e      	beq.n	8003d76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003d58:	20a0      	movs	r0, #160	; 0xa0
 8003d5a:	f000 feb1 	bl	8004ac0 <pvPortMalloc>
 8003d5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d6c:	e005      	b.n	8003d7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d6e:	6978      	ldr	r0, [r7, #20]
 8003d70:	f000 ff6a 	bl	8004c48 <vPortFree>
 8003d74:	e001      	b.n	8003d7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d017      	beq.n	8003db0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d88:	88fa      	ldrh	r2, [r7, #6]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	9303      	str	r3, [sp, #12]
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	9302      	str	r3, [sp, #8]
 8003d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d94:	9301      	str	r3, [sp, #4]
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68b9      	ldr	r1, [r7, #8]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f80e 	bl	8003dc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003da4:	69f8      	ldr	r0, [r7, #28]
 8003da6:	f000 f8a1 	bl	8003eec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003daa:	2301      	movs	r3, #1
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	e002      	b.n	8003db6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003db0:	f04f 33ff 	mov.w	r3, #4294967295
 8003db4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003db6:	69bb      	ldr	r3, [r7, #24]
	}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3720      	adds	r7, #32
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f023 0307 	bic.w	r3, r3, #7
 8003de6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	617b      	str	r3, [r7, #20]
}
 8003e04:	bf00      	nop
 8003e06:	e7fe      	b.n	8003e06 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61fb      	str	r3, [r7, #28]
 8003e0c:	e012      	b.n	8003e34 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	4413      	add	r3, r2
 8003e14:	7819      	ldrb	r1, [r3, #0]
 8003e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3334      	adds	r3, #52	; 0x34
 8003e1e:	460a      	mov	r2, r1
 8003e20:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	4413      	add	r3, r2
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d006      	beq.n	8003e3c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3301      	adds	r3, #1
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b0f      	cmp	r3, #15
 8003e38:	d9e9      	bls.n	8003e0e <prvInitialiseNewTask+0x4e>
 8003e3a:	e000      	b.n	8003e3e <prvInitialiseNewTask+0x7e>
		{
			break;
 8003e3c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	2b06      	cmp	r3, #6
 8003e4a:	d901      	bls.n	8003e50 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e4c:	2306      	movs	r3, #6
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5e:	2200      	movs	r2, #0
 8003e60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	3304      	adds	r3, #4
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff fe79 	bl	8003b5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	3318      	adds	r3, #24
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fe74 	bl	8003b5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7e:	f1c3 0207 	rsb	r2, r3, #7
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	334c      	adds	r3, #76	; 0x4c
 8003ea0:	224c      	movs	r2, #76	; 0x4c
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 ffe3 	bl	8004e70 <memset>
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	4a0c      	ldr	r2, [pc, #48]	; (8003ee0 <prvInitialiseNewTask+0x120>)
 8003eae:	651a      	str	r2, [r3, #80]	; 0x50
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	4a0c      	ldr	r2, [pc, #48]	; (8003ee4 <prvInitialiseNewTask+0x124>)
 8003eb4:	655a      	str	r2, [r3, #84]	; 0x54
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb8:	4a0b      	ldr	r2, [pc, #44]	; (8003ee8 <prvInitialiseNewTask+0x128>)
 8003eba:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	68f9      	ldr	r1, [r7, #12]
 8003ec0:	69b8      	ldr	r0, [r7, #24]
 8003ec2:	f000 fc47 	bl	8004754 <pxPortInitialiseStack>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ed8:	bf00      	nop
 8003eda:	3720      	adds	r7, #32
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	2000153c 	.word	0x2000153c
 8003ee4:	200015a4 	.word	0x200015a4
 8003ee8:	2000160c 	.word	0x2000160c

08003eec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ef4:	f000 fd22 	bl	800493c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ef8:	4b2a      	ldr	r3, [pc, #168]	; (8003fa4 <prvAddNewTaskToReadyList+0xb8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3301      	adds	r3, #1
 8003efe:	4a29      	ldr	r2, [pc, #164]	; (8003fa4 <prvAddNewTaskToReadyList+0xb8>)
 8003f00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f02:	4b29      	ldr	r3, [pc, #164]	; (8003fa8 <prvAddNewTaskToReadyList+0xbc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f0a:	4a27      	ldr	r2, [pc, #156]	; (8003fa8 <prvAddNewTaskToReadyList+0xbc>)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f10:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <prvAddNewTaskToReadyList+0xb8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d110      	bne.n	8003f3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f18:	f000 fad2 	bl	80044c0 <prvInitialiseTaskLists>
 8003f1c:	e00d      	b.n	8003f3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f1e:	4b23      	ldr	r3, [pc, #140]	; (8003fac <prvAddNewTaskToReadyList+0xc0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f26:	4b20      	ldr	r3, [pc, #128]	; (8003fa8 <prvAddNewTaskToReadyList+0xbc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d802      	bhi.n	8003f3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f34:	4a1c      	ldr	r2, [pc, #112]	; (8003fa8 <prvAddNewTaskToReadyList+0xbc>)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <prvAddNewTaskToReadyList+0xc4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	4a1b      	ldr	r2, [pc, #108]	; (8003fb0 <prvAddNewTaskToReadyList+0xc4>)
 8003f42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	2201      	movs	r2, #1
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <prvAddNewTaskToReadyList+0xc8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	4a18      	ldr	r2, [pc, #96]	; (8003fb4 <prvAddNewTaskToReadyList+0xc8>)
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4a15      	ldr	r2, [pc, #84]	; (8003fb8 <prvAddNewTaskToReadyList+0xcc>)
 8003f64:	441a      	add	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f7ff fe02 	bl	8003b76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f72:	f000 fd13 	bl	800499c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f76:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <prvAddNewTaskToReadyList+0xc0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00e      	beq.n	8003f9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <prvAddNewTaskToReadyList+0xbc>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d207      	bcs.n	8003f9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f8c:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <prvAddNewTaskToReadyList+0xd0>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f9c:	bf00      	nop
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	200008f0 	.word	0x200008f0
 8003fa8:	200007f0 	.word	0x200007f0
 8003fac:	200008fc 	.word	0x200008fc
 8003fb0:	2000090c 	.word	0x2000090c
 8003fb4:	200008f8 	.word	0x200008f8
 8003fb8:	200007f4 	.word	0x200007f4
 8003fbc:	e000ed04 	.word	0xe000ed04

08003fc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d017      	beq.n	8004002 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003fd2:	4b13      	ldr	r3, [pc, #76]	; (8004020 <vTaskDelay+0x60>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <vTaskDelay+0x30>
	__asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	60bb      	str	r3, [r7, #8]
}
 8003fec:	bf00      	nop
 8003fee:	e7fe      	b.n	8003fee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ff0:	f000 f884 	bl	80040fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fb46 	bl	8004688 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ffc:	f000 f88c 	bl	8004118 <xTaskResumeAll>
 8004000:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d107      	bne.n	8004018 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <vTaskDelay+0x64>)
 800400a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20000918 	.word	0x20000918
 8004024:	e000ed04 	.word	0xe000ed04

08004028 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	; 0x28
 800402c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800402e:	2300      	movs	r3, #0
 8004030:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004032:	2300      	movs	r3, #0
 8004034:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004036:	463a      	mov	r2, r7
 8004038:	1d39      	adds	r1, r7, #4
 800403a:	f107 0308 	add.w	r3, r7, #8
 800403e:	4618      	mov	r0, r3
 8004040:	f7fc f88e 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004044:	6839      	ldr	r1, [r7, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	9202      	str	r2, [sp, #8]
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	2300      	movs	r3, #0
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	2300      	movs	r3, #0
 8004054:	460a      	mov	r2, r1
 8004056:	4921      	ldr	r1, [pc, #132]	; (80040dc <vTaskStartScheduler+0xb4>)
 8004058:	4821      	ldr	r0, [pc, #132]	; (80040e0 <vTaskStartScheduler+0xb8>)
 800405a:	f7ff fe10 	bl	8003c7e <xTaskCreateStatic>
 800405e:	4603      	mov	r3, r0
 8004060:	4a20      	ldr	r2, [pc, #128]	; (80040e4 <vTaskStartScheduler+0xbc>)
 8004062:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004064:	4b1f      	ldr	r3, [pc, #124]	; (80040e4 <vTaskStartScheduler+0xbc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800406c:	2301      	movs	r3, #1
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	e001      	b.n	8004076 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d11b      	bne.n	80040b4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800407c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	613b      	str	r3, [r7, #16]
}
 800408e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004090:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <vTaskStartScheduler+0xc0>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	334c      	adds	r3, #76	; 0x4c
 8004096:	4a15      	ldr	r2, [pc, #84]	; (80040ec <vTaskStartScheduler+0xc4>)
 8004098:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800409a:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <vTaskStartScheduler+0xc8>)
 800409c:	f04f 32ff 	mov.w	r2, #4294967295
 80040a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040a2:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <vTaskStartScheduler+0xcc>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80040a8:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <vTaskStartScheduler+0xd0>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040ae:	f000 fbd3 	bl	8004858 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040b2:	e00e      	b.n	80040d2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ba:	d10a      	bne.n	80040d2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	60fb      	str	r3, [r7, #12]
}
 80040ce:	bf00      	nop
 80040d0:	e7fe      	b.n	80040d0 <vTaskStartScheduler+0xa8>
}
 80040d2:	bf00      	nop
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	080050e0 	.word	0x080050e0
 80040e0:	08004491 	.word	0x08004491
 80040e4:	20000914 	.word	0x20000914
 80040e8:	200007f0 	.word	0x200007f0
 80040ec:	200000a4 	.word	0x200000a4
 80040f0:	20000910 	.word	0x20000910
 80040f4:	200008fc 	.word	0x200008fc
 80040f8:	200008f4 	.word	0x200008f4

080040fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <vTaskSuspendAll+0x18>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3301      	adds	r3, #1
 8004106:	4a03      	ldr	r2, [pc, #12]	; (8004114 <vTaskSuspendAll+0x18>)
 8004108:	6013      	str	r3, [r2, #0]
}
 800410a:	bf00      	nop
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20000918 	.word	0x20000918

08004118 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004122:	2300      	movs	r3, #0
 8004124:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004126:	4b41      	ldr	r3, [pc, #260]	; (800422c <xTaskResumeAll+0x114>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10a      	bne.n	8004144 <xTaskResumeAll+0x2c>
	__asm volatile
 800412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	603b      	str	r3, [r7, #0]
}
 8004140:	bf00      	nop
 8004142:	e7fe      	b.n	8004142 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004144:	f000 fbfa 	bl	800493c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004148:	4b38      	ldr	r3, [pc, #224]	; (800422c <xTaskResumeAll+0x114>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3b01      	subs	r3, #1
 800414e:	4a37      	ldr	r2, [pc, #220]	; (800422c <xTaskResumeAll+0x114>)
 8004150:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004152:	4b36      	ldr	r3, [pc, #216]	; (800422c <xTaskResumeAll+0x114>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d161      	bne.n	800421e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800415a:	4b35      	ldr	r3, [pc, #212]	; (8004230 <xTaskResumeAll+0x118>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d05d      	beq.n	800421e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004162:	e02e      	b.n	80041c2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004164:	4b33      	ldr	r3, [pc, #204]	; (8004234 <xTaskResumeAll+0x11c>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	3318      	adds	r3, #24
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff fd5b 	bl	8003c2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3304      	adds	r3, #4
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fd56 	bl	8003c2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	2201      	movs	r2, #1
 8004186:	409a      	lsls	r2, r3
 8004188:	4b2b      	ldr	r3, [pc, #172]	; (8004238 <xTaskResumeAll+0x120>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4313      	orrs	r3, r2
 800418e:	4a2a      	ldr	r2, [pc, #168]	; (8004238 <xTaskResumeAll+0x120>)
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4a27      	ldr	r2, [pc, #156]	; (800423c <xTaskResumeAll+0x124>)
 80041a0:	441a      	add	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3304      	adds	r3, #4
 80041a6:	4619      	mov	r1, r3
 80041a8:	4610      	mov	r0, r2
 80041aa:	f7ff fce4 	bl	8003b76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b2:	4b23      	ldr	r3, [pc, #140]	; (8004240 <xTaskResumeAll+0x128>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d302      	bcc.n	80041c2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80041bc:	4b21      	ldr	r3, [pc, #132]	; (8004244 <xTaskResumeAll+0x12c>)
 80041be:	2201      	movs	r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041c2:	4b1c      	ldr	r3, [pc, #112]	; (8004234 <xTaskResumeAll+0x11c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1cc      	bne.n	8004164 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80041d0:	f000 fa18 	bl	8004604 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80041d4:	4b1c      	ldr	r3, [pc, #112]	; (8004248 <xTaskResumeAll+0x130>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d010      	beq.n	8004202 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041e0:	f000 f836 	bl	8004250 <xTaskIncrementTick>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80041ea:	4b16      	ldr	r3, [pc, #88]	; (8004244 <xTaskResumeAll+0x12c>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f1      	bne.n	80041e0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80041fc:	4b12      	ldr	r3, [pc, #72]	; (8004248 <xTaskResumeAll+0x130>)
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004202:	4b10      	ldr	r3, [pc, #64]	; (8004244 <xTaskResumeAll+0x12c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d009      	beq.n	800421e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800420a:	2301      	movs	r3, #1
 800420c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <xTaskResumeAll+0x134>)
 8004210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800421e:	f000 fbbd 	bl	800499c <vPortExitCritical>

	return xAlreadyYielded;
 8004222:	68bb      	ldr	r3, [r7, #8]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000918 	.word	0x20000918
 8004230:	200008f0 	.word	0x200008f0
 8004234:	200008b0 	.word	0x200008b0
 8004238:	200008f8 	.word	0x200008f8
 800423c:	200007f4 	.word	0x200007f4
 8004240:	200007f0 	.word	0x200007f0
 8004244:	20000904 	.word	0x20000904
 8004248:	20000900 	.word	0x20000900
 800424c:	e000ed04 	.word	0xe000ed04

08004250 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800425a:	4b51      	ldr	r3, [pc, #324]	; (80043a0 <xTaskIncrementTick+0x150>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	f040 808d 	bne.w	800437e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004264:	4b4f      	ldr	r3, [pc, #316]	; (80043a4 <xTaskIncrementTick+0x154>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3301      	adds	r3, #1
 800426a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800426c:	4a4d      	ldr	r2, [pc, #308]	; (80043a4 <xTaskIncrementTick+0x154>)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d120      	bne.n	80042ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004278:	4b4b      	ldr	r3, [pc, #300]	; (80043a8 <xTaskIncrementTick+0x158>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <xTaskIncrementTick+0x48>
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	603b      	str	r3, [r7, #0]
}
 8004294:	bf00      	nop
 8004296:	e7fe      	b.n	8004296 <xTaskIncrementTick+0x46>
 8004298:	4b43      	ldr	r3, [pc, #268]	; (80043a8 <xTaskIncrementTick+0x158>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	4b43      	ldr	r3, [pc, #268]	; (80043ac <xTaskIncrementTick+0x15c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a41      	ldr	r2, [pc, #260]	; (80043a8 <xTaskIncrementTick+0x158>)
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	4a41      	ldr	r2, [pc, #260]	; (80043ac <xTaskIncrementTick+0x15c>)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	4b40      	ldr	r3, [pc, #256]	; (80043b0 <xTaskIncrementTick+0x160>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3301      	adds	r3, #1
 80042b2:	4a3f      	ldr	r2, [pc, #252]	; (80043b0 <xTaskIncrementTick+0x160>)
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	f000 f9a5 	bl	8004604 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80042ba:	4b3e      	ldr	r3, [pc, #248]	; (80043b4 <xTaskIncrementTick+0x164>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d34d      	bcc.n	8004360 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042c4:	4b38      	ldr	r3, [pc, #224]	; (80043a8 <xTaskIncrementTick+0x158>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <xTaskIncrementTick+0x82>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <xTaskIncrementTick+0x84>
 80042d2:	2300      	movs	r3, #0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d004      	beq.n	80042e2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042d8:	4b36      	ldr	r3, [pc, #216]	; (80043b4 <xTaskIncrementTick+0x164>)
 80042da:	f04f 32ff 	mov.w	r2, #4294967295
 80042de:	601a      	str	r2, [r3, #0]
					break;
 80042e0:	e03e      	b.n	8004360 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042e2:	4b31      	ldr	r3, [pc, #196]	; (80043a8 <xTaskIncrementTick+0x158>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d203      	bcs.n	8004302 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80042fa:	4a2e      	ldr	r2, [pc, #184]	; (80043b4 <xTaskIncrementTick+0x164>)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6013      	str	r3, [r2, #0]
						break;
 8004300:	e02e      	b.n	8004360 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	3304      	adds	r3, #4
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff fc90 	bl	8003c2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	2b00      	cmp	r3, #0
 8004312:	d004      	beq.n	800431e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	3318      	adds	r3, #24
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff fc87 	bl	8003c2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	2201      	movs	r2, #1
 8004324:	409a      	lsls	r2, r3
 8004326:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <xTaskIncrementTick+0x168>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4313      	orrs	r3, r2
 800432c:	4a22      	ldr	r2, [pc, #136]	; (80043b8 <xTaskIncrementTick+0x168>)
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4a1f      	ldr	r2, [pc, #124]	; (80043bc <xTaskIncrementTick+0x16c>)
 800433e:	441a      	add	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	3304      	adds	r3, #4
 8004344:	4619      	mov	r1, r3
 8004346:	4610      	mov	r0, r2
 8004348:	f7ff fc15 	bl	8003b76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004350:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <xTaskIncrementTick+0x170>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	429a      	cmp	r2, r3
 8004358:	d3b4      	bcc.n	80042c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800435a:	2301      	movs	r3, #1
 800435c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800435e:	e7b1      	b.n	80042c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004360:	4b17      	ldr	r3, [pc, #92]	; (80043c0 <xTaskIncrementTick+0x170>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004366:	4915      	ldr	r1, [pc, #84]	; (80043bc <xTaskIncrementTick+0x16c>)
 8004368:	4613      	mov	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d907      	bls.n	8004388 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004378:	2301      	movs	r3, #1
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	e004      	b.n	8004388 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800437e:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <xTaskIncrementTick+0x174>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3301      	adds	r3, #1
 8004384:	4a0f      	ldr	r2, [pc, #60]	; (80043c4 <xTaskIncrementTick+0x174>)
 8004386:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004388:	4b0f      	ldr	r3, [pc, #60]	; (80043c8 <xTaskIncrementTick+0x178>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004390:	2301      	movs	r3, #1
 8004392:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004394:	697b      	ldr	r3, [r7, #20]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000918 	.word	0x20000918
 80043a4:	200008f4 	.word	0x200008f4
 80043a8:	200008a8 	.word	0x200008a8
 80043ac:	200008ac 	.word	0x200008ac
 80043b0:	20000908 	.word	0x20000908
 80043b4:	20000910 	.word	0x20000910
 80043b8:	200008f8 	.word	0x200008f8
 80043bc:	200007f4 	.word	0x200007f4
 80043c0:	200007f0 	.word	0x200007f0
 80043c4:	20000900 	.word	0x20000900
 80043c8:	20000904 	.word	0x20000904

080043cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043d2:	4b29      	ldr	r3, [pc, #164]	; (8004478 <vTaskSwitchContext+0xac>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043da:	4b28      	ldr	r3, [pc, #160]	; (800447c <vTaskSwitchContext+0xb0>)
 80043dc:	2201      	movs	r2, #1
 80043de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043e0:	e044      	b.n	800446c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80043e2:	4b26      	ldr	r3, [pc, #152]	; (800447c <vTaskSwitchContext+0xb0>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80043e8:	4b25      	ldr	r3, [pc, #148]	; (8004480 <vTaskSwitchContext+0xb4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	fab3 f383 	clz	r3, r3
 80043f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80043f6:	7afb      	ldrb	r3, [r7, #11]
 80043f8:	f1c3 031f 	rsb	r3, r3, #31
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	4921      	ldr	r1, [pc, #132]	; (8004484 <vTaskSwitchContext+0xb8>)
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10a      	bne.n	8004428 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	607b      	str	r3, [r7, #4]
}
 8004424:	bf00      	nop
 8004426:	e7fe      	b.n	8004426 <vTaskSwitchContext+0x5a>
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4613      	mov	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4a14      	ldr	r2, [pc, #80]	; (8004484 <vTaskSwitchContext+0xb8>)
 8004434:	4413      	add	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	605a      	str	r2, [r3, #4]
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	3308      	adds	r3, #8
 800444a:	429a      	cmp	r2, r3
 800444c:	d104      	bne.n	8004458 <vTaskSwitchContext+0x8c>
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	605a      	str	r2, [r3, #4]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <vTaskSwitchContext+0xbc>)
 8004460:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <vTaskSwitchContext+0xbc>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	334c      	adds	r3, #76	; 0x4c
 8004468:	4a08      	ldr	r2, [pc, #32]	; (800448c <vTaskSwitchContext+0xc0>)
 800446a:	6013      	str	r3, [r2, #0]
}
 800446c:	bf00      	nop
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000918 	.word	0x20000918
 800447c:	20000904 	.word	0x20000904
 8004480:	200008f8 	.word	0x200008f8
 8004484:	200007f4 	.word	0x200007f4
 8004488:	200007f0 	.word	0x200007f0
 800448c:	200000a4 	.word	0x200000a4

08004490 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004498:	f000 f852 	bl	8004540 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <prvIdleTask+0x28>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d9f9      	bls.n	8004498 <prvIdleTask+0x8>
			{
				taskYIELD();
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <prvIdleTask+0x2c>)
 80044a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044b4:	e7f0      	b.n	8004498 <prvIdleTask+0x8>
 80044b6:	bf00      	nop
 80044b8:	200007f4 	.word	0x200007f4
 80044bc:	e000ed04 	.word	0xe000ed04

080044c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044c6:	2300      	movs	r3, #0
 80044c8:	607b      	str	r3, [r7, #4]
 80044ca:	e00c      	b.n	80044e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4a12      	ldr	r2, [pc, #72]	; (8004520 <prvInitialiseTaskLists+0x60>)
 80044d8:	4413      	add	r3, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fb20 	bl	8003b20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3301      	adds	r3, #1
 80044e4:	607b      	str	r3, [r7, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b06      	cmp	r3, #6
 80044ea:	d9ef      	bls.n	80044cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044ec:	480d      	ldr	r0, [pc, #52]	; (8004524 <prvInitialiseTaskLists+0x64>)
 80044ee:	f7ff fb17 	bl	8003b20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044f2:	480d      	ldr	r0, [pc, #52]	; (8004528 <prvInitialiseTaskLists+0x68>)
 80044f4:	f7ff fb14 	bl	8003b20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044f8:	480c      	ldr	r0, [pc, #48]	; (800452c <prvInitialiseTaskLists+0x6c>)
 80044fa:	f7ff fb11 	bl	8003b20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044fe:	480c      	ldr	r0, [pc, #48]	; (8004530 <prvInitialiseTaskLists+0x70>)
 8004500:	f7ff fb0e 	bl	8003b20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004504:	480b      	ldr	r0, [pc, #44]	; (8004534 <prvInitialiseTaskLists+0x74>)
 8004506:	f7ff fb0b 	bl	8003b20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800450a:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <prvInitialiseTaskLists+0x78>)
 800450c:	4a05      	ldr	r2, [pc, #20]	; (8004524 <prvInitialiseTaskLists+0x64>)
 800450e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004510:	4b0a      	ldr	r3, [pc, #40]	; (800453c <prvInitialiseTaskLists+0x7c>)
 8004512:	4a05      	ldr	r2, [pc, #20]	; (8004528 <prvInitialiseTaskLists+0x68>)
 8004514:	601a      	str	r2, [r3, #0]
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	200007f4 	.word	0x200007f4
 8004524:	20000880 	.word	0x20000880
 8004528:	20000894 	.word	0x20000894
 800452c:	200008b0 	.word	0x200008b0
 8004530:	200008c4 	.word	0x200008c4
 8004534:	200008dc 	.word	0x200008dc
 8004538:	200008a8 	.word	0x200008a8
 800453c:	200008ac 	.word	0x200008ac

08004540 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004546:	e019      	b.n	800457c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004548:	f000 f9f8 	bl	800493c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800454c:	4b10      	ldr	r3, [pc, #64]	; (8004590 <prvCheckTasksWaitingTermination+0x50>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3304      	adds	r3, #4
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fb67 	bl	8003c2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800455e:	4b0d      	ldr	r3, [pc, #52]	; (8004594 <prvCheckTasksWaitingTermination+0x54>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3b01      	subs	r3, #1
 8004564:	4a0b      	ldr	r2, [pc, #44]	; (8004594 <prvCheckTasksWaitingTermination+0x54>)
 8004566:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <prvCheckTasksWaitingTermination+0x58>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3b01      	subs	r3, #1
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <prvCheckTasksWaitingTermination+0x58>)
 8004570:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004572:	f000 fa13 	bl	800499c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f810 	bl	800459c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <prvCheckTasksWaitingTermination+0x58>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e1      	bne.n	8004548 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	200008c4 	.word	0x200008c4
 8004594:	200008f0 	.word	0x200008f0
 8004598:	200008d8 	.word	0x200008d8

0800459c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	334c      	adds	r3, #76	; 0x4c
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fc69 	bl	8004e80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d108      	bne.n	80045ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fb43 	bl	8004c48 <vPortFree>
				vPortFree( pxTCB );
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fb40 	bl	8004c48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045c8:	e018      	b.n	80045fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d103      	bne.n	80045dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fb37 	bl	8004c48 <vPortFree>
	}
 80045da:	e00f      	b.n	80045fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d00a      	beq.n	80045fc <prvDeleteTCB+0x60>
	__asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	60fb      	str	r3, [r7, #12]
}
 80045f8:	bf00      	nop
 80045fa:	e7fe      	b.n	80045fa <prvDeleteTCB+0x5e>
	}
 80045fc:	bf00      	nop
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800460a:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <prvResetNextTaskUnblockTime+0x40>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <prvResetNextTaskUnblockTime+0x14>
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <prvResetNextTaskUnblockTime+0x16>
 8004618:	2300      	movs	r3, #0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d004      	beq.n	8004628 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800461e:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <prvResetNextTaskUnblockTime+0x44>)
 8004620:	f04f 32ff 	mov.w	r2, #4294967295
 8004624:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004626:	e008      	b.n	800463a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <prvResetNextTaskUnblockTime+0x40>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4a04      	ldr	r2, [pc, #16]	; (8004648 <prvResetNextTaskUnblockTime+0x44>)
 8004638:	6013      	str	r3, [r2, #0]
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr
 8004644:	200008a8 	.word	0x200008a8
 8004648:	20000910 	.word	0x20000910

0800464c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004652:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <xTaskGetSchedulerState+0x34>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d102      	bne.n	8004660 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800465a:	2301      	movs	r3, #1
 800465c:	607b      	str	r3, [r7, #4]
 800465e:	e008      	b.n	8004672 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004660:	4b08      	ldr	r3, [pc, #32]	; (8004684 <xTaskGetSchedulerState+0x38>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004668:	2302      	movs	r3, #2
 800466a:	607b      	str	r3, [r7, #4]
 800466c:	e001      	b.n	8004672 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800466e:	2300      	movs	r3, #0
 8004670:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004672:	687b      	ldr	r3, [r7, #4]
	}
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	200008fc 	.word	0x200008fc
 8004684:	20000918 	.word	0x20000918

08004688 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004692:	4b29      	ldr	r3, [pc, #164]	; (8004738 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004698:	4b28      	ldr	r3, [pc, #160]	; (800473c <prvAddCurrentTaskToDelayedList+0xb4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3304      	adds	r3, #4
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff fac4 	bl	8003c2c <uxListRemove>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10b      	bne.n	80046c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80046aa:	4b24      	ldr	r3, [pc, #144]	; (800473c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	2201      	movs	r2, #1
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	43da      	mvns	r2, r3
 80046b8:	4b21      	ldr	r3, [pc, #132]	; (8004740 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4013      	ands	r3, r2
 80046be:	4a20      	ldr	r2, [pc, #128]	; (8004740 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d10a      	bne.n	80046e0 <prvAddCurrentTaskToDelayedList+0x58>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d007      	beq.n	80046e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046d0:	4b1a      	ldr	r3, [pc, #104]	; (800473c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3304      	adds	r3, #4
 80046d6:	4619      	mov	r1, r3
 80046d8:	481a      	ldr	r0, [pc, #104]	; (8004744 <prvAddCurrentTaskToDelayedList+0xbc>)
 80046da:	f7ff fa4c 	bl	8003b76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046de:	e026      	b.n	800472e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4413      	add	r3, r2
 80046e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046e8:	4b14      	ldr	r3, [pc, #80]	; (800473c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d209      	bcs.n	800470c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046f8:	4b13      	ldr	r3, [pc, #76]	; (8004748 <prvAddCurrentTaskToDelayedList+0xc0>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4b0f      	ldr	r3, [pc, #60]	; (800473c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3304      	adds	r3, #4
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f7ff fa59 	bl	8003bbc <vListInsert>
}
 800470a:	e010      	b.n	800472e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <prvAddCurrentTaskToDelayedList+0xc4>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4b0a      	ldr	r3, [pc, #40]	; (800473c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3304      	adds	r3, #4
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f7ff fa4f 	bl	8003bbc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800471e:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	429a      	cmp	r2, r3
 8004726:	d202      	bcs.n	800472e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004728:	4a09      	ldr	r2, [pc, #36]	; (8004750 <prvAddCurrentTaskToDelayedList+0xc8>)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	6013      	str	r3, [r2, #0]
}
 800472e:	bf00      	nop
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	200008f4 	.word	0x200008f4
 800473c:	200007f0 	.word	0x200007f0
 8004740:	200008f8 	.word	0x200008f8
 8004744:	200008dc 	.word	0x200008dc
 8004748:	200008ac 	.word	0x200008ac
 800474c:	200008a8 	.word	0x200008a8
 8004750:	20000910 	.word	0x20000910

08004754 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	3b04      	subs	r3, #4
 8004764:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800476c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3b04      	subs	r3, #4
 8004772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f023 0201 	bic.w	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3b04      	subs	r3, #4
 8004782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004784:	4a08      	ldr	r2, [pc, #32]	; (80047a8 <pxPortInitialiseStack+0x54>)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3b14      	subs	r3, #20
 800478e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	3b20      	subs	r3, #32
 800479a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800479c:	68fb      	ldr	r3, [r7, #12]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr
 80047a8:	080047ad 	.word	0x080047ad

080047ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047b6:	4b12      	ldr	r3, [pc, #72]	; (8004800 <prvTaskExitError+0x54>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047be:	d00a      	beq.n	80047d6 <prvTaskExitError+0x2a>
	__asm volatile
 80047c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	60fb      	str	r3, [r7, #12]
}
 80047d2:	bf00      	nop
 80047d4:	e7fe      	b.n	80047d4 <prvTaskExitError+0x28>
	__asm volatile
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	60bb      	str	r3, [r7, #8]
}
 80047e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047ea:	bf00      	nop
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0fc      	beq.n	80047ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20000054 	.word	0x20000054
	...

08004810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004810:	4b07      	ldr	r3, [pc, #28]	; (8004830 <pxCurrentTCBConst2>)
 8004812:	6819      	ldr	r1, [r3, #0]
 8004814:	6808      	ldr	r0, [r1, #0]
 8004816:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800481a:	f380 8809 	msr	PSP, r0
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f04f 0000 	mov.w	r0, #0
 8004826:	f380 8811 	msr	BASEPRI, r0
 800482a:	f04e 0e0d 	orr.w	lr, lr, #13
 800482e:	4770      	bx	lr

08004830 <pxCurrentTCBConst2>:
 8004830:	200007f0 	.word	0x200007f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop

08004838 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004838:	4806      	ldr	r0, [pc, #24]	; (8004854 <prvPortStartFirstTask+0x1c>)
 800483a:	6800      	ldr	r0, [r0, #0]
 800483c:	6800      	ldr	r0, [r0, #0]
 800483e:	f380 8808 	msr	MSP, r0
 8004842:	b662      	cpsie	i
 8004844:	b661      	cpsie	f
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	df00      	svc	0
 8004850:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004852:	bf00      	nop
 8004854:	e000ed08 	.word	0xe000ed08

08004858 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800485e:	4b32      	ldr	r3, [pc, #200]	; (8004928 <xPortStartScheduler+0xd0>)
 8004860:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	22ff      	movs	r2, #255	; 0xff
 800486e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	b2db      	uxtb	r3, r3
 8004876:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004880:	b2da      	uxtb	r2, r3
 8004882:	4b2a      	ldr	r3, [pc, #168]	; (800492c <xPortStartScheduler+0xd4>)
 8004884:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004886:	4b2a      	ldr	r3, [pc, #168]	; (8004930 <xPortStartScheduler+0xd8>)
 8004888:	2207      	movs	r2, #7
 800488a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800488c:	e009      	b.n	80048a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800488e:	4b28      	ldr	r3, [pc, #160]	; (8004930 <xPortStartScheduler+0xd8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3b01      	subs	r3, #1
 8004894:	4a26      	ldr	r2, [pc, #152]	; (8004930 <xPortStartScheduler+0xd8>)
 8004896:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048a2:	78fb      	ldrb	r3, [r7, #3]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048aa:	2b80      	cmp	r3, #128	; 0x80
 80048ac:	d0ef      	beq.n	800488e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048ae:	4b20      	ldr	r3, [pc, #128]	; (8004930 <xPortStartScheduler+0xd8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f1c3 0307 	rsb	r3, r3, #7
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d00a      	beq.n	80048d0 <xPortStartScheduler+0x78>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	60bb      	str	r3, [r7, #8]
}
 80048cc:	bf00      	nop
 80048ce:	e7fe      	b.n	80048ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048d0:	4b17      	ldr	r3, [pc, #92]	; (8004930 <xPortStartScheduler+0xd8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	4a16      	ldr	r2, [pc, #88]	; (8004930 <xPortStartScheduler+0xd8>)
 80048d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048da:	4b15      	ldr	r3, [pc, #84]	; (8004930 <xPortStartScheduler+0xd8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048e2:	4a13      	ldr	r2, [pc, #76]	; (8004930 <xPortStartScheduler+0xd8>)
 80048e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048ee:	4b11      	ldr	r3, [pc, #68]	; (8004934 <xPortStartScheduler+0xdc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a10      	ldr	r2, [pc, #64]	; (8004934 <xPortStartScheduler+0xdc>)
 80048f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048fa:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <xPortStartScheduler+0xdc>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a0d      	ldr	r2, [pc, #52]	; (8004934 <xPortStartScheduler+0xdc>)
 8004900:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004904:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004906:	f000 f8b9 	bl	8004a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800490a:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <xPortStartScheduler+0xe0>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004910:	f7ff ff92 	bl	8004838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004914:	f7ff fd5a 	bl	80043cc <vTaskSwitchContext>
	prvTaskExitError();
 8004918:	f7ff ff48 	bl	80047ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	e000e400 	.word	0xe000e400
 800492c:	2000091c 	.word	0x2000091c
 8004930:	20000920 	.word	0x20000920
 8004934:	e000ed20 	.word	0xe000ed20
 8004938:	20000054 	.word	0x20000054

0800493c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
	__asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	607b      	str	r3, [r7, #4]
}
 8004954:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004956:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <vPortEnterCritical+0x58>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3301      	adds	r3, #1
 800495c:	4a0d      	ldr	r2, [pc, #52]	; (8004994 <vPortEnterCritical+0x58>)
 800495e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004960:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <vPortEnterCritical+0x58>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d10f      	bne.n	8004988 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <vPortEnterCritical+0x5c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <vPortEnterCritical+0x4c>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	603b      	str	r3, [r7, #0]
}
 8004984:	bf00      	nop
 8004986:	e7fe      	b.n	8004986 <vPortEnterCritical+0x4a>
	}
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20000054 	.word	0x20000054
 8004998:	e000ed04 	.word	0xe000ed04

0800499c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80049a2:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <vPortExitCritical+0x4c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10a      	bne.n	80049c0 <vPortExitCritical+0x24>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	607b      	str	r3, [r7, #4]
}
 80049bc:	bf00      	nop
 80049be:	e7fe      	b.n	80049be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049c0:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <vPortExitCritical+0x4c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	4a08      	ldr	r2, [pc, #32]	; (80049e8 <vPortExitCritical+0x4c>)
 80049c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80049ca:	4b07      	ldr	r3, [pc, #28]	; (80049e8 <vPortExitCritical+0x4c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d105      	bne.n	80049de <vPortExitCritical+0x42>
 80049d2:	2300      	movs	r3, #0
 80049d4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr
 80049e8:	20000054 	.word	0x20000054
 80049ec:	00000000 	.word	0x00000000

080049f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049f0:	f3ef 8009 	mrs	r0, PSP
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	4b0d      	ldr	r3, [pc, #52]	; (8004a30 <pxCurrentTCBConst>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a00:	6010      	str	r0, [r2, #0]
 8004a02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004a06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a0a:	f380 8811 	msr	BASEPRI, r0
 8004a0e:	f7ff fcdd 	bl	80043cc <vTaskSwitchContext>
 8004a12:	f04f 0000 	mov.w	r0, #0
 8004a16:	f380 8811 	msr	BASEPRI, r0
 8004a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004a1e:	6819      	ldr	r1, [r3, #0]
 8004a20:	6808      	ldr	r0, [r1, #0]
 8004a22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a26:	f380 8809 	msr	PSP, r0
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	4770      	bx	lr

08004a30 <pxCurrentTCBConst>:
 8004a30:	200007f0 	.word	0x200007f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop

08004a38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	607b      	str	r3, [r7, #4]
}
 8004a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a52:	f7ff fbfd 	bl	8004250 <xTaskIncrementTick>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <xPortSysTickHandler+0x40>)
 8004a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	2300      	movs	r3, #0
 8004a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	f383 8811 	msr	BASEPRI, r3
}
 8004a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a70:	bf00      	nop
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a80:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <vPortSetupTimerInterrupt+0x30>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a86:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <vPortSetupTimerInterrupt+0x34>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a8c:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <vPortSetupTimerInterrupt+0x38>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a09      	ldr	r2, [pc, #36]	; (8004ab8 <vPortSetupTimerInterrupt+0x3c>)
 8004a92:	fba2 2303 	umull	r2, r3, r2, r3
 8004a96:	099b      	lsrs	r3, r3, #6
 8004a98:	4a08      	ldr	r2, [pc, #32]	; (8004abc <vPortSetupTimerInterrupt+0x40>)
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a9e:	4b03      	ldr	r3, [pc, #12]	; (8004aac <vPortSetupTimerInterrupt+0x30>)
 8004aa0:	2207      	movs	r2, #7
 8004aa2:	601a      	str	r2, [r3, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr
 8004aac:	e000e010 	.word	0xe000e010
 8004ab0:	e000e018 	.word	0xe000e018
 8004ab4:	20000018 	.word	0x20000018
 8004ab8:	10624dd3 	.word	0x10624dd3
 8004abc:	e000e014 	.word	0xe000e014

08004ac0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08a      	sub	sp, #40	; 0x28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004acc:	f7ff fb16 	bl	80040fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ad0:	4b58      	ldr	r3, [pc, #352]	; (8004c34 <pvPortMalloc+0x174>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ad8:	f000 f910 	bl	8004cfc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004adc:	4b56      	ldr	r3, [pc, #344]	; (8004c38 <pvPortMalloc+0x178>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f040 808e 	bne.w	8004c06 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d01d      	beq.n	8004b2c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004af0:	2208      	movs	r2, #8
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4413      	add	r3, r2
 8004af6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d014      	beq.n	8004b2c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f023 0307 	bic.w	r3, r3, #7
 8004b08:	3308      	adds	r3, #8
 8004b0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <pvPortMalloc+0x6c>
	__asm volatile
 8004b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1a:	f383 8811 	msr	BASEPRI, r3
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	617b      	str	r3, [r7, #20]
}
 8004b28:	bf00      	nop
 8004b2a:	e7fe      	b.n	8004b2a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d069      	beq.n	8004c06 <pvPortMalloc+0x146>
 8004b32:	4b42      	ldr	r3, [pc, #264]	; (8004c3c <pvPortMalloc+0x17c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d864      	bhi.n	8004c06 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b3c:	4b40      	ldr	r3, [pc, #256]	; (8004c40 <pvPortMalloc+0x180>)
 8004b3e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b40:	4b3f      	ldr	r3, [pc, #252]	; (8004c40 <pvPortMalloc+0x180>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b46:	e004      	b.n	8004b52 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d903      	bls.n	8004b64 <pvPortMalloc+0xa4>
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f1      	bne.n	8004b48 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b64:	4b33      	ldr	r3, [pc, #204]	; (8004c34 <pvPortMalloc+0x174>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d04b      	beq.n	8004c06 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2208      	movs	r2, #8
 8004b74:	4413      	add	r3, r2
 8004b76:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	1ad2      	subs	r2, r2, r3
 8004b88:	2308      	movs	r3, #8
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d91f      	bls.n	8004bd0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4413      	add	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <pvPortMalloc+0xf8>
	__asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	613b      	str	r3, [r7, #16]
}
 8004bb4:	bf00      	nop
 8004bb6:	e7fe      	b.n	8004bb6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	1ad2      	subs	r2, r2, r3
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bca:	69b8      	ldr	r0, [r7, #24]
 8004bcc:	f000 f8f8 	bl	8004dc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bd0:	4b1a      	ldr	r3, [pc, #104]	; (8004c3c <pvPortMalloc+0x17c>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	4a18      	ldr	r2, [pc, #96]	; (8004c3c <pvPortMalloc+0x17c>)
 8004bdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bde:	4b17      	ldr	r3, [pc, #92]	; (8004c3c <pvPortMalloc+0x17c>)
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	4b18      	ldr	r3, [pc, #96]	; (8004c44 <pvPortMalloc+0x184>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d203      	bcs.n	8004bf2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bea:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <pvPortMalloc+0x17c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a15      	ldr	r2, [pc, #84]	; (8004c44 <pvPortMalloc+0x184>)
 8004bf0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	4b10      	ldr	r3, [pc, #64]	; (8004c38 <pvPortMalloc+0x178>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c06:	f7ff fa87 	bl	8004118 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <pvPortMalloc+0x16a>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	60fb      	str	r3, [r7, #12]
}
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <pvPortMalloc+0x168>
	return pvReturn;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3728      	adds	r7, #40	; 0x28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	2000152c 	.word	0x2000152c
 8004c38:	20001538 	.word	0x20001538
 8004c3c:	20001530 	.word	0x20001530
 8004c40:	20001524 	.word	0x20001524
 8004c44:	20001534 	.word	0x20001534

08004c48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d048      	beq.n	8004cec <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	425b      	negs	r3, r3
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4413      	add	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	4b21      	ldr	r3, [pc, #132]	; (8004cf4 <vPortFree+0xac>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4013      	ands	r3, r2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10a      	bne.n	8004c8c <vPortFree+0x44>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	60fb      	str	r3, [r7, #12]
}
 8004c88:	bf00      	nop
 8004c8a:	e7fe      	b.n	8004c8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <vPortFree+0x62>
	__asm volatile
 8004c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	60bb      	str	r3, [r7, #8]
}
 8004ca6:	bf00      	nop
 8004ca8:	e7fe      	b.n	8004ca8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <vPortFree+0xac>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d019      	beq.n	8004cec <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d115      	bne.n	8004cec <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <vPortFree+0xac>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	401a      	ands	r2, r3
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004cd0:	f7ff fa14 	bl	80040fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <vPortFree+0xb0>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4413      	add	r3, r2
 8004cde:	4a06      	ldr	r2, [pc, #24]	; (8004cf8 <vPortFree+0xb0>)
 8004ce0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ce2:	6938      	ldr	r0, [r7, #16]
 8004ce4:	f000 f86c 	bl	8004dc0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ce8:	f7ff fa16 	bl	8004118 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004cec:	bf00      	nop
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20001538 	.word	0x20001538
 8004cf8:	20001530 	.word	0x20001530

08004cfc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004d06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d08:	4b27      	ldr	r3, [pc, #156]	; (8004da8 <prvHeapInit+0xac>)
 8004d0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00c      	beq.n	8004d30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3307      	adds	r3, #7
 8004d1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0307 	bic.w	r3, r3, #7
 8004d22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	4a1f      	ldr	r2, [pc, #124]	; (8004da8 <prvHeapInit+0xac>)
 8004d2c:	4413      	add	r3, r2
 8004d2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d34:	4a1d      	ldr	r2, [pc, #116]	; (8004dac <prvHeapInit+0xb0>)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d3a:	4b1c      	ldr	r3, [pc, #112]	; (8004dac <prvHeapInit+0xb0>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	4413      	add	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d48:	2208      	movs	r2, #8
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0307 	bic.w	r3, r3, #7
 8004d56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4a15      	ldr	r2, [pc, #84]	; (8004db0 <prvHeapInit+0xb4>)
 8004d5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d5e:	4b14      	ldr	r3, [pc, #80]	; (8004db0 <prvHeapInit+0xb4>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2200      	movs	r2, #0
 8004d64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d66:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <prvHeapInit+0xb4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	1ad2      	subs	r2, r2, r3
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <prvHeapInit+0xb4>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	4a0a      	ldr	r2, [pc, #40]	; (8004db4 <prvHeapInit+0xb8>)
 8004d8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	4a09      	ldr	r2, [pc, #36]	; (8004db8 <prvHeapInit+0xbc>)
 8004d92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d94:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <prvHeapInit+0xc0>)
 8004d96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d9a:	601a      	str	r2, [r3, #0]
}
 8004d9c:	bf00      	nop
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	20000924 	.word	0x20000924
 8004dac:	20001524 	.word	0x20001524
 8004db0:	2000152c 	.word	0x2000152c
 8004db4:	20001534 	.word	0x20001534
 8004db8:	20001530 	.word	0x20001530
 8004dbc:	20001538 	.word	0x20001538

08004dc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004dc8:	4b27      	ldr	r3, [pc, #156]	; (8004e68 <prvInsertBlockIntoFreeList+0xa8>)
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	e002      	b.n	8004dd4 <prvInsertBlockIntoFreeList+0x14>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d8f7      	bhi.n	8004dce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	4413      	add	r3, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d108      	bne.n	8004e02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	441a      	add	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	441a      	add	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d118      	bne.n	8004e48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <prvInsertBlockIntoFreeList+0xac>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d00d      	beq.n	8004e3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	441a      	add	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	e008      	b.n	8004e50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <prvInsertBlockIntoFreeList+0xac>)
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	e003      	b.n	8004e50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d002      	beq.n	8004e5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e5e:	bf00      	nop
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr
 8004e68:	20001524 	.word	0x20001524
 8004e6c:	2000152c 	.word	0x2000152c

08004e70 <memset>:
 8004e70:	4603      	mov	r3, r0
 8004e72:	4402      	add	r2, r0
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d100      	bne.n	8004e7a <memset+0xa>
 8004e78:	4770      	bx	lr
 8004e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e7e:	e7f9      	b.n	8004e74 <memset+0x4>

08004e80 <_reclaim_reent>:
 8004e80:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <_reclaim_reent+0xa8>)
 8004e82:	b570      	push	{r4, r5, r6, lr}
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4604      	mov	r4, r0
 8004e88:	4283      	cmp	r3, r0
 8004e8a:	d04b      	beq.n	8004f24 <_reclaim_reent+0xa4>
 8004e8c:	69c3      	ldr	r3, [r0, #28]
 8004e8e:	b143      	cbz	r3, 8004ea2 <_reclaim_reent+0x22>
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d144      	bne.n	8004f20 <_reclaim_reent+0xa0>
 8004e96:	69e3      	ldr	r3, [r4, #28]
 8004e98:	6819      	ldr	r1, [r3, #0]
 8004e9a:	b111      	cbz	r1, 8004ea2 <_reclaim_reent+0x22>
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f000 f86b 	bl	8004f78 <_free_r>
 8004ea2:	6961      	ldr	r1, [r4, #20]
 8004ea4:	b111      	cbz	r1, 8004eac <_reclaim_reent+0x2c>
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f000 f866 	bl	8004f78 <_free_r>
 8004eac:	69e1      	ldr	r1, [r4, #28]
 8004eae:	b111      	cbz	r1, 8004eb6 <_reclaim_reent+0x36>
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f000 f861 	bl	8004f78 <_free_r>
 8004eb6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004eb8:	b111      	cbz	r1, 8004ec0 <_reclaim_reent+0x40>
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f000 f85c 	bl	8004f78 <_free_r>
 8004ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ec2:	b111      	cbz	r1, 8004eca <_reclaim_reent+0x4a>
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f000 f857 	bl	8004f78 <_free_r>
 8004eca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ecc:	b111      	cbz	r1, 8004ed4 <_reclaim_reent+0x54>
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f000 f852 	bl	8004f78 <_free_r>
 8004ed4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004ed6:	b111      	cbz	r1, 8004ede <_reclaim_reent+0x5e>
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f000 f84d 	bl	8004f78 <_free_r>
 8004ede:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004ee0:	b111      	cbz	r1, 8004ee8 <_reclaim_reent+0x68>
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f000 f848 	bl	8004f78 <_free_r>
 8004ee8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004eea:	b111      	cbz	r1, 8004ef2 <_reclaim_reent+0x72>
 8004eec:	4620      	mov	r0, r4
 8004eee:	f000 f843 	bl	8004f78 <_free_r>
 8004ef2:	6a23      	ldr	r3, [r4, #32]
 8004ef4:	b1b3      	cbz	r3, 8004f24 <_reclaim_reent+0xa4>
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004efc:	4718      	bx	r3
 8004efe:	5949      	ldr	r1, [r1, r5]
 8004f00:	b941      	cbnz	r1, 8004f14 <_reclaim_reent+0x94>
 8004f02:	3504      	adds	r5, #4
 8004f04:	69e3      	ldr	r3, [r4, #28]
 8004f06:	2d80      	cmp	r5, #128	; 0x80
 8004f08:	68d9      	ldr	r1, [r3, #12]
 8004f0a:	d1f8      	bne.n	8004efe <_reclaim_reent+0x7e>
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f000 f833 	bl	8004f78 <_free_r>
 8004f12:	e7c0      	b.n	8004e96 <_reclaim_reent+0x16>
 8004f14:	680e      	ldr	r6, [r1, #0]
 8004f16:	4620      	mov	r0, r4
 8004f18:	f000 f82e 	bl	8004f78 <_free_r>
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	e7ef      	b.n	8004f00 <_reclaim_reent+0x80>
 8004f20:	2500      	movs	r5, #0
 8004f22:	e7ef      	b.n	8004f04 <_reclaim_reent+0x84>
 8004f24:	bd70      	pop	{r4, r5, r6, pc}
 8004f26:	bf00      	nop
 8004f28:	200000a4 	.word	0x200000a4

08004f2c <__libc_init_array>:
 8004f2c:	b570      	push	{r4, r5, r6, lr}
 8004f2e:	2600      	movs	r6, #0
 8004f30:	4d0c      	ldr	r5, [pc, #48]	; (8004f64 <__libc_init_array+0x38>)
 8004f32:	4c0d      	ldr	r4, [pc, #52]	; (8004f68 <__libc_init_array+0x3c>)
 8004f34:	1b64      	subs	r4, r4, r5
 8004f36:	10a4      	asrs	r4, r4, #2
 8004f38:	42a6      	cmp	r6, r4
 8004f3a:	d109      	bne.n	8004f50 <__libc_init_array+0x24>
 8004f3c:	f000 f870 	bl	8005020 <_init>
 8004f40:	2600      	movs	r6, #0
 8004f42:	4d0a      	ldr	r5, [pc, #40]	; (8004f6c <__libc_init_array+0x40>)
 8004f44:	4c0a      	ldr	r4, [pc, #40]	; (8004f70 <__libc_init_array+0x44>)
 8004f46:	1b64      	subs	r4, r4, r5
 8004f48:	10a4      	asrs	r4, r4, #2
 8004f4a:	42a6      	cmp	r6, r4
 8004f4c:	d105      	bne.n	8004f5a <__libc_init_array+0x2e>
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}
 8004f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f54:	4798      	blx	r3
 8004f56:	3601      	adds	r6, #1
 8004f58:	e7ee      	b.n	8004f38 <__libc_init_array+0xc>
 8004f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5e:	4798      	blx	r3
 8004f60:	3601      	adds	r6, #1
 8004f62:	e7f2      	b.n	8004f4a <__libc_init_array+0x1e>
 8004f64:	0800510c 	.word	0x0800510c
 8004f68:	0800510c 	.word	0x0800510c
 8004f6c:	0800510c 	.word	0x0800510c
 8004f70:	08005110 	.word	0x08005110

08004f74 <__retarget_lock_acquire_recursive>:
 8004f74:	4770      	bx	lr

08004f76 <__retarget_lock_release_recursive>:
 8004f76:	4770      	bx	lr

08004f78 <_free_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	4605      	mov	r5, r0
 8004f7c:	2900      	cmp	r1, #0
 8004f7e:	d040      	beq.n	8005002 <_free_r+0x8a>
 8004f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f84:	1f0c      	subs	r4, r1, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bfb8      	it	lt
 8004f8a:	18e4      	addlt	r4, r4, r3
 8004f8c:	f000 f83c 	bl	8005008 <__malloc_lock>
 8004f90:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <_free_r+0x8c>)
 8004f92:	6813      	ldr	r3, [r2, #0]
 8004f94:	b933      	cbnz	r3, 8004fa4 <_free_r+0x2c>
 8004f96:	6063      	str	r3, [r4, #4]
 8004f98:	6014      	str	r4, [r2, #0]
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fa0:	f000 b838 	b.w	8005014 <__malloc_unlock>
 8004fa4:	42a3      	cmp	r3, r4
 8004fa6:	d908      	bls.n	8004fba <_free_r+0x42>
 8004fa8:	6820      	ldr	r0, [r4, #0]
 8004faa:	1821      	adds	r1, r4, r0
 8004fac:	428b      	cmp	r3, r1
 8004fae:	bf01      	itttt	eq
 8004fb0:	6819      	ldreq	r1, [r3, #0]
 8004fb2:	685b      	ldreq	r3, [r3, #4]
 8004fb4:	1809      	addeq	r1, r1, r0
 8004fb6:	6021      	streq	r1, [r4, #0]
 8004fb8:	e7ed      	b.n	8004f96 <_free_r+0x1e>
 8004fba:	461a      	mov	r2, r3
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	b10b      	cbz	r3, 8004fc4 <_free_r+0x4c>
 8004fc0:	42a3      	cmp	r3, r4
 8004fc2:	d9fa      	bls.n	8004fba <_free_r+0x42>
 8004fc4:	6811      	ldr	r1, [r2, #0]
 8004fc6:	1850      	adds	r0, r2, r1
 8004fc8:	42a0      	cmp	r0, r4
 8004fca:	d10b      	bne.n	8004fe4 <_free_r+0x6c>
 8004fcc:	6820      	ldr	r0, [r4, #0]
 8004fce:	4401      	add	r1, r0
 8004fd0:	1850      	adds	r0, r2, r1
 8004fd2:	4283      	cmp	r3, r0
 8004fd4:	6011      	str	r1, [r2, #0]
 8004fd6:	d1e0      	bne.n	8004f9a <_free_r+0x22>
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4408      	add	r0, r1
 8004fde:	6010      	str	r0, [r2, #0]
 8004fe0:	6053      	str	r3, [r2, #4]
 8004fe2:	e7da      	b.n	8004f9a <_free_r+0x22>
 8004fe4:	d902      	bls.n	8004fec <_free_r+0x74>
 8004fe6:	230c      	movs	r3, #12
 8004fe8:	602b      	str	r3, [r5, #0]
 8004fea:	e7d6      	b.n	8004f9a <_free_r+0x22>
 8004fec:	6820      	ldr	r0, [r4, #0]
 8004fee:	1821      	adds	r1, r4, r0
 8004ff0:	428b      	cmp	r3, r1
 8004ff2:	bf01      	itttt	eq
 8004ff4:	6819      	ldreq	r1, [r3, #0]
 8004ff6:	685b      	ldreq	r3, [r3, #4]
 8004ff8:	1809      	addeq	r1, r1, r0
 8004ffa:	6021      	streq	r1, [r4, #0]
 8004ffc:	6063      	str	r3, [r4, #4]
 8004ffe:	6054      	str	r4, [r2, #4]
 8005000:	e7cb      	b.n	8004f9a <_free_r+0x22>
 8005002:	bd38      	pop	{r3, r4, r5, pc}
 8005004:	20001678 	.word	0x20001678

08005008 <__malloc_lock>:
 8005008:	4801      	ldr	r0, [pc, #4]	; (8005010 <__malloc_lock+0x8>)
 800500a:	f7ff bfb3 	b.w	8004f74 <__retarget_lock_acquire_recursive>
 800500e:	bf00      	nop
 8005010:	20001674 	.word	0x20001674

08005014 <__malloc_unlock>:
 8005014:	4801      	ldr	r0, [pc, #4]	; (800501c <__malloc_unlock+0x8>)
 8005016:	f7ff bfae 	b.w	8004f76 <__retarget_lock_release_recursive>
 800501a:	bf00      	nop
 800501c:	20001674 	.word	0x20001674

08005020 <_init>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr

0800502c <_fini>:
 800502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502e:	bf00      	nop
 8005030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005032:	bc08      	pop	{r3}
 8005034:	469e      	mov	lr, r3
 8005036:	4770      	bx	lr
